# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 2.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-03 19:29+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../doc/book/box/box_ctl.rst:5
msgid "Submodule `box.ctl`"
msgstr ""

#: ../doc/book/box/box_ctl.rst:9
msgid "The ``box.ctl`` submodule contains two functions: ``wait_ro`` (wait until read-only) and ``wait_rw`` (wait until read-write). The functions are useful during initialization of a server."
msgstr ""

#: ../doc/book/box/box_ctl.rst:14
msgid "A particular use is for :ref:`box_once() <box-once>`. For example, when a replica is initializing, it may call a ``box.once()`` function while the server is still in read-only mode, and fail to make changes that are necessary only once before the replica is fully initialized. This could cause conflicts between a master and a replica if the master is in read-write mode and the replica is in read-only mode. Waiting until \"read only mode = false\" solves this problem."
msgstr ""

#: ../doc/book/box/box_ctl.rst:24
msgid "To see whether a function is already in read-only or read-write mode, check :ref:`box.info.ro <box_introspection-box_info>`."
msgstr ""

#: ../doc/book/box/box_ctl.rst:31
msgid "Wait until ``box.info.ro`` is true."
msgstr ""

#: ../doc/book/box/box_ctl.rst:0
#: ../doc/book/box/box_ctl.rst:0
#: ../doc/book/box/box_ctl.rst:0
msgid "Parameters"
msgstr ""

#: ../doc/book/box/box_ctl.rst:33
#: ../doc/book/box/box_ctl.rst:56
msgid "maximum number of seconds to wait"
msgstr ""

#: ../doc/book/box/box_ctl.rst:0
#: ../doc/book/box/box_ctl.rst:0
#: ../doc/book/box/box_ctl.rst:0
msgid "return"
msgstr ""

#: ../doc/book/box/box_ctl.rst:34
#: ../doc/book/box/box_ctl.rst:57
msgid "nil, or error may be thrown due to timeout or fiber cancellation"
msgstr ""

#: ../doc/book/box/box_ctl.rst:36
#: ../doc/book/box/box_ctl.rst:60
#: ../doc/book/box/box_ctl.rst:126
msgid "**Example:**"
msgstr ""

#: ../doc/book/box/box_ctl.rst:38
msgid "tarantool> box.info().ro\n"
"---\n"
"- false\n"
"...\n"
"\n"
"tarantool> n = box.ctl.wait_ro(0.1)\n"
"---\n"
"- error: timed out\n"
"..."
msgstr ""

#: ../doc/book/box/box_ctl.rst:54
msgid "Wait until box.info.ro is false."
msgstr ""

#: ../doc/book/box/box_ctl.rst:62
msgid "tarantool> box.ctl.wait_rw(0.1)\n"
"---\n"
"..."
msgstr ""

#: ../doc/book/box/box_ctl.rst:70
msgid "The ``box.ctl`` submodule also contains two functions for the two :ref:`server trigger <triggers>` definitions: ``on_shutdown`` and ``on_schema_init``."
msgstr ""

#: ../doc/book/box/box_ctl.rst:75
msgid "Create a \"shutdown :ref:`trigger <triggers>`\". The ``trigger-function`` will be executed whenever   :ref:`os.exit() <os-exit>` happens, or when the server is shut down after receiving a SIGTERM or SIGINT or SIGHUP signal (but not after SIGSEGV or SIGABORT or any signal that causes immediate program termination)."
msgstr ""

#: ../doc/book/box/box_ctl.rst:82
msgid "function which will become the trigger function"
msgstr ""

#: ../doc/book/box/box_ctl.rst:84
msgid "existing trigger function which will be replaced by trigger-function"
msgstr ""

#: ../doc/book/box/box_ctl.rst:87
msgid "nil or function pointer"
msgstr ""

#: ../doc/book/box/box_ctl.rst:89
#: ../doc/book/box/box_ctl.rst:111
msgid "If the parameters are (nil, old-trigger-function), then the old trigger is deleted."
msgstr ""

#: ../doc/book/box/box_ctl.rst:92
#: ../doc/book/box/box_ctl.rst:124
msgid "Details about trigger characteristics are in the :ref:`triggers <triggers-box_triggers>` section."
msgstr ""

#: ../doc/book/box/box_ctl.rst:98
msgid "Create a \"schema_init :ref:`trigger <triggers>`\". The ``trigger-function`` will be executed when :ref:`box.cfg{} <index-book_cfg>` happens for the first time. That is, the ``schema_init`` trigger is called before the server's configuration and recovery begins, and therefore ``box.ctl.on_schema_init`` must be called before ``box.cfg`` is called."
msgstr ""

#: ../doc/book/box/box_ctl.rst:105
msgid "Parameter: trigger-function (function) – function which will become the trigger function"
msgstr ""

#: ../doc/book/box/box_ctl.rst:107
msgid "Parameter: old-trigger-function (function) – existing trigger function which will be replaced by trigger-function"
msgstr ""

#: ../doc/book/box/box_ctl.rst:109
msgid "Return:    nil or function pointer"
msgstr ""

#: ../doc/book/box/box_ctl.rst:114
msgid "A common use is: make a ``schema_init`` trigger function which creates a ``before_replace`` trigger function on a system space. Thus, since system spaces are created when the server starts, the ``before_replace`` triggers will be activated for each tuple in each system space. For example, such a trigger could change the storage engine of a given space, or make a given space replica-local while a replica is being bootstrapped. Making such a change after ``box.cfg`` is not reliable because other connections might use the database before the change can be made."
msgstr ""

#: ../doc/book/box/box_ctl.rst:128
msgid "Suppose that, before the server is fully up and ready for connections, you want to make sure that the engine of space ``space_name`` is vinyl. So you want to make a trigger that will be activated when a tuple is inserted in the ``_space`` system space. In this case you could end up with a master that has space-name with ``engine='memtx'`` and a replica that has space_name with ``engine='vinyl'``, with the same contents."
msgstr ""

#: ../doc/book/box/box_ctl.rst:137
msgid "function function_for_before_replace(old, new)\n"
"  if new[3] == 'space_name' and new[4] ~= 'vinyl' then\n"
"    return new:update{{'=', 4, 'vinyl'}}\n"
"  end\n"
"end\n"
"\n"
"box.ctl.on_schema_init(function()\n"
"  box.space._space:before_replace(function_for_before_replace)\n"
"end)\n"
"\n"
"box.cfg{replication='master_uri', ...}"
msgstr ""

