# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 2.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-03 19:29+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../doc/reference/reference_lua/box_error.rst:3
msgid "Submodule `box.error`"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:9
msgid "Overview"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:11
msgid ""
"The ``box.error`` function is for raising an error. The difference "
"between this function and Lua's built-in `error "
"<https://www.lua.org/pil/8.3.html>`_ function is that when the error "
"reaches the client, its error code is preserved. In contrast, a Lua error"
" would always be presented to the client as :errcode:`ER_PROC_LUA`."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:19
msgid "Index"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:21
msgid "Below is a list of all ``box.error`` functions."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:29
msgid "Name"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:29
msgid "Use"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:31
msgid ":ref:`box.error() <box_error-error>`"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:31
msgid "Throw an error"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:34
msgid ":ref:`box.error.last() <box_error-last>`"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:34
msgid "Get a description of the last error"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:37
msgid ":ref:`box.error.clear() <box_error-clear>`"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:37
msgid "Clear the record of errors"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:40
msgid ":ref:`box.error.new() <box_error-new>`"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:40
msgid "Create an error but do not throw"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:46
msgid ""
"When called with a Lua-table argument, the code and reason have any user-"
"desired values. The result will be those values."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst
msgid "Parameters"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:49
msgid "description of an error, defined by user"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:50
msgid "numeric code for this error, defined by user"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:54
msgid ""
"When called without arguments, ``box.error()`` re-throws whatever the "
"last error was."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:61
msgid ""
"Emulate a request error, with text based on one of the pre-defined "
"Tarantool errors defined in the file `errcode.h "
"<https://github.com/tarantool/tarantool/blob/2.1/src/box/errcode.h>`_ in "
"the source tree. Lua constants which correspond to those Tarantool errors"
" are defined as members of ``box.error``, for example "
"``box.error.NO_SUCH_USER == 45``."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:67
#: ../doc/reference/reference_lua/box_error.rst:157
msgid "number of a pre-defined error"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:68
#: ../doc/reference/reference_lua/box_error.rst:158
msgid "part of the message which will accompany the error"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:70
msgid "For example:"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:72
#, python-format
msgid ""
"the ``NO_SUCH_USER`` message is \"``User '%s' is not found``\" -- it "
"includes one \"``%s``\" component which will be replaced with errtext. "
"Thus a call to ``box.error(box.error.NO_SUCH_USER, 'joe')`` or "
"``box.error(45, 'joe')`` will result in an error with the accompanying "
"message \"``User 'joe' is not found``\"."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst
msgid "except"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:78
msgid "whatever is specified in errcode-number."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:80
#: ../doc/reference/reference_lua/box_error.rst:120
#: ../doc/reference/reference_lua/box_error.rst:160
msgid "**Example:**"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:82
msgid ""
"tarantool> box.error{code = 555, reason = 'Arbitrary message'}\n"
"---\n"
"- error: Arbitrary message\n"
"...\n"
"tarantool> box.error()\n"
"---\n"
"- error: Arbitrary message\n"
"...\n"
"tarantool> box.error(box.error.FUNCTION_ACCESS_DENIED, 'A', 'B', 'C')\n"
"---\n"
"- error: A access denied for user 'B' to function 'C'\n"
"..."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:101
msgid ""
"Returns a description of the last error, as a Lua table with five "
"members: \"line\" (number) Tarantool source file line number, \"code\" "
"(number) error's number, \"type\", (string) error's C++ class, "
"\"message\" (string) error's message, \"file\" (string) Tarantool source "
"file. Additionally, if the error is a system error (for example due to a "
"failure in socket or file io), there may be a sixth member: \"errno\" "
"(number) C standard error number."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:111
msgid "rtype: table"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:117
msgid ""
"Clears the record of errors, so functions like `box.error()` or "
"`box.error.last()` will have no effect."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:122
msgid ""
"tarantool> box.error{code = 555, reason = 'Arbitrary message'}\n"
"---\n"
"- error: Arbitrary message\n"
"...\n"
"tarantool> box.schema.space.create('#')\n"
"---\n"
"- error: Invalid identifier '#' (expected letters, digits or an "
"underscore)\n"
"...\n"
"tarantool> box.error.last()\n"
"---\n"
"- line: 278\n"
"  code: 70\n"
"  type: ClientError\n"
"  message: Invalid identifier '#' (expected letters, digits or an "
"underscore)\n"
"  file: "
"/tmp/buildd/tarantool-1.7.0.252.g1654e31~precise/src/box/key_def.cc\n"
"...\n"
"tarantool> box.error.clear()\n"
"---\n"
"...\n"
"tarantool> box.error.last()\n"
"---\n"
"- null\n"
"..."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:152
msgid ""
"Create an error object, but do not throw. This is useful when error "
"information should be saved for later retrieval. The parameters are the "
"same as for :ref:`box.error() <box_error-error>`, see the description "
"there."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:162
msgid ""
"tarantool> e = box.error.new{code = 555, reason = 'Arbitrary message'}\n"
"---\n"
"...\n"
"tarantool> e:unpack()\n"
"---\n"
"- type: ClientError\n"
"  code: 555\n"
"  message: Arbitrary message\n"
"  trace:\n"
"  - file: '[string \"e = box.error.new{code = 555, reason = "
"''Arbit...\"]'\n"
"    line: 1\n"
"..."
msgstr ""

