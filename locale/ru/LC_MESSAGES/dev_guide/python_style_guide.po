# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-03 19:10+0000\n"
"PO-Revision-Date: 2019-11-14 20:46+0300\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"Generated-By: Babel 2.7.0\n"
"X-Generator: Poedit 2.2.4\n"

#: ../doc/dev_guide/python_style_guide.rst:3
msgid "Python Style Guide"
msgstr "Руководство по написанию кода на Python"

#: ../doc/dev_guide/python_style_guide.rst:7
msgid "Introduction"
msgstr "Введение"

#: ../doc/dev_guide/python_style_guide.rst:9
msgid ""
"This document gives coding conventions for the Python code comprising the "
"standard library in the main Python distribution.  Please see the companion "
"informational PEP describing style guidelines for the C code in the C "
"implementation of Python [1]_."
msgstr ""
"Данный документ описывает соглашение о том, как писать код для языка Python, "
"включая стандартную библиотеку, входящую в состав Python. Посмотрите также "
"на сопутствующую PEP (Python enhanced proposal -- заявку на улучшение языка "
"Python), описывающую, какого стиля следует придерживаться при написании кода "
"на C в реализации языка Python [1]_."

#: ../doc/dev_guide/python_style_guide.rst:14
msgid ""
"This document and PEP 257 (Docstring Conventions) were adapted from Guido's "
"original Python Style Guide essay, with some additions from Barry's style "
"guide [2]_."
msgstr ""
"Данный документ, а также PEP 257 (Документирование кода) созданы на основе "
"оригинала рекомендаций Гуидо ван Россума с добавлениями от Барри [2]_."

#: ../doc/dev_guide/python_style_guide.rst:21
msgid "A Foolish Consistency is the Hobgoblin of Little Minds"
msgstr ""
"A Foolish Consistency is the Hobgoblin of Little Minds (\"Безрассудная "
"согласованность сбивает с толку мелкие умы\")"

#: ../doc/dev_guide/python_style_guide.rst:23
msgid ""
"One of Guido's key insights is that code is read much more often than it is "
"written.  The guidelines provided here are intended to improve the "
"readability of code and make it consistent across the wide spectrum of "
"Python code.  As PEP 20 says, \"Readability counts\"."
msgstr ""
"Одна из ключевых идей Гвидо заключается в том, что код читается намного "
"чаще, чем пишется. И рекомендации по стилю программирования предназначены "
"улучшить читаемость кода и сделать его согласованным во множестве проектов "
"на языке Python. Как написано в PEP 20, \"Читаемость имеет значение\"."

#: ../doc/dev_guide/python_style_guide.rst:28
msgid ""
"A style guide is about consistency.  Consistency with this style guide is "
"important.  Consistency within a project is more important. Consistency "
"within one module or function is the most important."
msgstr ""
"В руководстве речь идет о согласованности. Согласованность с руководством "
"очень важна. Согласованность внутри проекта еще важнее. А согласованность в "
"пределах модуля или функции -- самое важное."

#: ../doc/dev_guide/python_style_guide.rst:32
msgid ""
"But most importantly: know when to be inconsistent -- sometimes the style "
"guide just doesn't apply.  When in doubt, use your best judgment.  Look at "
"other examples and decide what looks best.  And don't hesitate to ask!"
msgstr ""
"Но очень важно понимать, когда можно отойти от рекомендаций, потому что "
"руководство неприменимо. Если вы сомневаетесь, используйте свой опыт. Просто "
"посмотрите на другие примеры и решите, какой выглядит лучше. И не бойтесь "
"спросить!"

#: ../doc/dev_guide/python_style_guide.rst:37
msgid "Two good reasons to break a particular rule:"
msgstr "Правила можно нарушить по одной из этих причин:"

#: ../doc/dev_guide/python_style_guide.rst:39
msgid ""
"When applying the rule would make the code less readable, even for someone "
"who is used to reading code that follows the rules."
msgstr ""
"Если применение правила сделает код менее читаемым даже для того, кто привык "
"читать код, написанный по правилам."

#: ../doc/dev_guide/python_style_guide.rst:42
msgid ""
"To be consistent with surrounding code that also breaks it (maybe for "
"historic reasons) -- although this is also an opportunity to clean up "
"someone else's mess (in true XP style)."
msgstr ""
"Чтобы не отступать по стилю от уже написанного не по правилам кода "
"(возможно, в силу исторических причин) -- впрочем, это может быть "
"возможность причесать чужой код (в стиле XP)."

#: ../doc/dev_guide/python_style_guide.rst:49
msgid "Code lay-out"
msgstr "Размещение кода"

#: ../doc/dev_guide/python_style_guide.rst:53
msgid "Indentation"
msgstr "Отступы"

#: ../doc/dev_guide/python_style_guide.rst:55
msgid "Use 4 spaces per indentation level."
msgstr "Используйте 4 пробела на каждый уровень отступа."

#: ../doc/dev_guide/python_style_guide.rst:57
msgid ""
"For really old code that you don't want to mess up, you can continue to use "
"8-space tabs."
msgstr ""
"Если вы не хотите наводить путаницу в очень старом коде, можете продолжать "
"использовать отступы в 8 пробелов."

#: ../doc/dev_guide/python_style_guide.rst:60
msgid ""
"Continuation lines should align wrapped elements either vertically using "
"Python's implicit line joining inside parentheses, brackets and braces, or "
"using a hanging indent.  When using a hanging indent the following "
"considerations should be applied; there should be no arguments on the first "
"line and further indentation should be used to clearly distinguish itself as "
"a continuation line."
msgstr ""
"Продолжения строк должны выравнивать переносимые элементы либо вертикально, "
"используя подразумевающееся объединение строк в скобках (круглых, квадратных "
"или фигурных), либо с использованием висячего отступа. При использовании "
"висячего отступа необходимо применять следующие соображения: на первой "
"строке не должно быть аргументов, а остальные строки должны четко "
"восприниматься как продолжение строки."

#: ../doc/dev_guide/python_style_guide.rst:67
#: ../doc/dev_guide/python_style_guide.rst:324
#: ../doc/dev_guide/python_style_guide.rst:353
#: ../doc/dev_guide/python_style_guide.rst:372
#: ../doc/dev_guide/python_style_guide.rst:385
msgid "Yes::"
msgstr "Правильно::"

#: ../doc/dev_guide/python_style_guide.rst:103
msgid ""
"# Aligned with opening delimiter\n"
"foo = long_function_name(var_one, var_two,\n"
"                         var_three, var_four)\n"
"\n"
"# More indentation included to distinguish this from the rest.\n"
"def long_function_name(\n"
"        var_one, var_two, var_three,\n"
"        var_four):\n"
"    print(var_one)"
msgstr ""
"# выравнивание по открывающему разделителю\n"
"foo = long_function_name(var_one, var_two,\n"
"                         var_three, var_four)\n"
"\n"
"# больше отступов, чтобы данный сегмент отличался от остальных.\n"
"def long_function_name(\n"
"        var_one, var_two, var_three,\n"
"        var_four):\n"
"    print(var_one)"

#: ../doc/dev_guide/python_style_guide.rst:79
#: ../doc/dev_guide/python_style_guide.rst:330
#: ../doc/dev_guide/python_style_guide.rst:361
#: ../doc/dev_guide/python_style_guide.rst:377
msgid "No::"
msgstr "Неправильно::"

#: ../doc/dev_guide/python_style_guide.rst:115
msgid ""
"# Arguments on first line forbidden when not using vertical alignment\n"
"foo = long_function_name(var_one, var_two,\n"
"    var_three, var_four)\n"
"\n"
"# Further indentation required as indentation is not distinguishable\n"
"def long_function_name(\n"
"    var_one, var_two, var_three,\n"
"    var_four):\n"
"    print(var_one)"
msgstr ""
"# запрещены аргументы на первой строке, если не используется вертикальное "
"выравнивание\n"
"foo = long_function_name(var_one, var_two,\n"
"    var_three, var_four)\n"
"\n"
"# необходимы дополнительные отступы для четких отличий\n"
"def long_function_name(\n"
"    var_one, var_two, var_three,\n"
"    var_four):\n"
"    print(var_one)"

#: ../doc/dev_guide/python_style_guide.rst:91
msgid "Optional::"
msgstr "Возможно::"

#: ../doc/dev_guide/python_style_guide.rst:127
msgid ""
"# Extra indentation is not necessary.\n"
"foo = long_function_name(\n"
"  var_one, var_two,\n"
"  var_three, var_four)"
msgstr ""
"# Нет необходимости в дополнительных отступах.\n"
"foo = long_function_name(\n"
"  var_one, var_two,\n"
"  var_three, var_four)"

#: ../doc/dev_guide/python_style_guide.rst:98
msgid ""
"The closing brace/bracket/parenthesis on multi-line constructs may either "
"line up under the first non-whitespace character of the last line of list, "
"as in::"
msgstr ""
"Закрывающие круглые/квадратные/фигурные скобки в многострочных конструкциях "
"могут находиться либо под первым символом последней строки списка (не "
"пробелом), например:"

#: ../doc/dev_guide/python_style_guide.rst:136
msgid ""
"my_list = [\n"
"    1, 2, 3,\n"
"    4, 5, 6,\n"
"    ]\n"
"result = some_function_that_takes_arguments(\n"
"    'a', 'b', 'c',\n"
"    'd', 'e', 'f',\n"
"    )"
msgstr ""
"my_list = [\n"
"    1, 2, 3,\n"
"    4, 5, 6,\n"
"    ]\n"
"result = some_function_that_takes_arguments(\n"
"    'a', 'b', 'c',\n"
"    'd', 'e', 'f',\n"
"    )"

#: ../doc/dev_guide/python_style_guide.rst:111
msgid ""
"or it may be lined up under the first character of the line that starts the "
"multi-line construct, as in::"
msgstr ""
"либо под первым символом строки, с которой начинается многострочная "
"конструкция:"

#: ../doc/dev_guide/python_style_guide.rst:148
msgid ""
"my_list = [\n"
"    1, 2, 3,\n"
"    4, 5, 6,\n"
"]\n"
"result = some_function_that_takes_arguments(\n"
"    'a', 'b', 'c',\n"
"    'd', 'e', 'f',\n"
")"
msgstr ""
"my_list = [\n"
"    1, 2, 3,\n"
"    4, 5, 6,\n"
"]\n"
"result = some_function_that_takes_arguments(\n"
"    'a', 'b', 'c',\n"
"    'd', 'e', 'f',\n"
")"

#: ../doc/dev_guide/python_style_guide.rst:126
msgid "Tabs or Spaces?"
msgstr "Табуляция или пробелы?"

#: ../doc/dev_guide/python_style_guide.rst:128
msgid "Never mix tabs and spaces."
msgstr "Никогда не смешивайте символы табуляции и пробелы."

#: ../doc/dev_guide/python_style_guide.rst:130
msgid ""
"The most popular way of indenting Python is with spaces only.  The second-"
"most popular way is with tabs only.  Code indented with a mixture of tabs "
"and spaces should be converted to using spaces exclusively.  When invoking "
"the Python command line interpreter with the ``-t`` option, it issues "
"warnings about code that illegally mixes tabs and spaces.  When using ``-"
"tt`` these warnings become errors. These options are highly recommended!"
msgstr ""
"Самый распространенный способ отступов в Python -- пробелы. На втором месте "
"-- отступы только с использованием табуляции. Код, в котором используются и "
"те, и другие типы отступов, следует исправить так, чтобы отступы в нем были "
"расставлены только с помощью пробелов. При вызове интерпретатора в командной "
"строке с параметром ``-t`` он выдаст предупреждение в случае использовании "
"смешанного стиля в отступах. Запустив интерпретатор с параметром -tt, вы "
"получите в этих местах ошибки. Рекомендуем использовать эти опции!"

#: ../doc/dev_guide/python_style_guide.rst:138
msgid ""
"For new projects, spaces-only are strongly recommended over tabs. Most "
"editors have features that make this easy to do."
msgstr ""
"В новых проектах для отступов настоятельно рекомендуется использовать только "
"пробелы. Во многих редакторах можно легко это делать."

#: ../doc/dev_guide/python_style_guide.rst:143
msgid "Maximum Line Length"
msgstr "Максимальная длина строки"

#: ../doc/dev_guide/python_style_guide.rst:145
msgid "Limit all lines to a maximum of 79 characters."
msgstr "Ограничьте максимальную длину строки 79 символами."

#: ../doc/dev_guide/python_style_guide.rst:147
msgid ""
"There are still many devices around that are limited to 80 character lines; "
"plus, limiting windows to 80 characters makes it possible to have several "
"windows side-by-side.  The default wrapping on such devices disrupts the "
"visual structure of the code, making it more difficult to understand.  "
"Therefore, please limit all lines to a maximum of 79 characters.  For "
"flowing long blocks of text (docstrings or comments), limiting the length to "
"72 characters is recommended."
msgstr ""
"Пока еще есть немало устройств, где длина строки ограничена 80 символами; к "
"тому же, ограничив ширину окна 80 символами, мы можем расположить несколько "
"окон рядом друг с другом. Автоматический перенос строк на таких устройствах "
"нарушит форматирование, и код будет труднее понять. Поэтому ограничьте длину "
"строки 79 символами. Для длинных блоков текста (строки документации или "
"комментарии) рекомендуется ограничиваться 72 символами."

#: ../doc/dev_guide/python_style_guide.rst:155
msgid ""
"The preferred way of wrapping long lines is by using Python's implied line "
"continuation inside parentheses, brackets and braces.  Long lines can be "
"broken over multiple lines by wrapping expressions in parentheses. These "
"should be used in preference to using a backslash for line continuation."
msgstr ""
"Предпочтительный способ переноса длинных строк -- использование "
"подразумевающегося продолжения строки между обычными, квадратными и "
"фигурными скобками. Длинные строки можно разбить на несколько строк в "
"скобках. Это лучше, чем использовать обратную косую черту для продолжения "
"строки."

#: ../doc/dev_guide/python_style_guide.rst:161
msgid ""
"Backslashes may still be appropriate at times.  For example, long, multiple "
"``with``-statements cannot use implicit continuation, so backslashes are "
"acceptable::"
msgstr ""
"Обратную косую черту можно использовать время от времени. Например, длинный "
"оператор with не может работать с неявными продолжениями, так что обратная "
"косая черта здесь подойдет:"

#: ../doc/dev_guide/python_style_guide.rst:199
msgid ""
"with open('/path/to/some/file/you/want/to/read') as file_1, \\\n"
"        open('/path/to/some/file/being/written', 'w') as file_2:\n"
"    file_2.write(file_1.read())"
msgstr ""
"with open('/path/to/some/file/you/want/to/read') as file_1, \\\n"
"        open('/path/to/some/file/being/written', 'w') as file_2:\n"
"    file_2.write(file_1.read())"

#: ../doc/dev_guide/python_style_guide.rst:169
msgid "Another such case is with ``assert`` statements."
msgstr "Еще один такой случай -- операторы ``assert``."

#: ../doc/dev_guide/python_style_guide.rst:171
msgid ""
"Make sure to indent the continued line appropriately.  The preferred place "
"to break around a binary operator is *after* the operator, not before it.  "
"Some examples::"
msgstr ""
"Делайте правильные отступы для перенесенной строки. Предпочтительнее "
"вставить перенос строки *после* логического оператора, а не перед ним. "
"Например:"

#: ../doc/dev_guide/python_style_guide.rst:209
msgid ""
"class Rectangle(Blob):\n"
"\n"
"    def __init__(self, width, height,\n"
"                 color='black', emphasis=None, highlight=0):\n"
"        if (width == 0 and height == 0 and\n"
"            color == 'red' and emphasis == 'strong' or\n"
"            highlight > 100):\n"
"            raise ValueError(\"sorry, you lose\")\n"
"        if width == 0 and height == 0 and (color == 'red' or\n"
"                                           emphasis is None):\n"
"            raise ValueError(\"I don't think so -- values are %s, %s\" %\n"
"                             (width, height))\n"
"        Blob.__init__(self, width, height,\n"
"                      color, emphasis, highlight)"
msgstr ""
"class Rectangle(Blob):\n"
"\n"
"    def __init__(self, width, height,\n"
"                 color='black', emphasis=None, highlight=0):\n"
"        if (width == 0 and height == 0 and\n"
"            color == 'red' and emphasis == 'strong' or\n"
"            highlight > 100):\n"
"            raise ValueError(\"sorry, you lose\")\n"
"        if width == 0 and height == 0 and (color == 'red' or\n"
"                                           emphasis is None):\n"
"            raise ValueError(\"I don't think so -- values are %s, %s\" %\n"
"                             (width, height))\n"
"        Blob.__init__(self, width, height,\n"
"                      color, emphasis, highlight)"

#: ../doc/dev_guide/python_style_guide.rst:192
msgid "Blank Lines"
msgstr "Пустые строки"

#: ../doc/dev_guide/python_style_guide.rst:194
msgid "Separate top-level function and class definitions with two blank lines."
msgstr ""
"Отделяйте функции верхнего уровня и определения классов двумя пустыми "
"строками."

#: ../doc/dev_guide/python_style_guide.rst:197
msgid "Method definitions inside a class are separated by a single blank line."
msgstr "Определения методов в пределах класса отделяйте одной пустой строкой."

#: ../doc/dev_guide/python_style_guide.rst:200
msgid ""
"Extra blank lines may be used (sparingly) to separate groups of related "
"functions.  Blank lines may be omitted between a bunch of related one-liners "
"(e.g. a set of dummy implementations)."
msgstr ""
"Также можно добавлять пустые строки (не слишком часто) для выделения групп "
"связанных функций. Пустые строки не стоит добавлять между несколькими "
"связанными программами в одну строку (например, в формальной реализации)."

#: ../doc/dev_guide/python_style_guide.rst:204
msgid "Use blank lines in functions, sparingly, to indicate logical sections."
msgstr ""
"Не слишком часто можно добавлять пустые строки в коде функций, чтобы "
"отделить друг от друга логические части."

#: ../doc/dev_guide/python_style_guide.rst:206
msgid ""
"Python accepts the control-L (i.e. ^L) form feed character as whitespace; "
"Many tools treat these characters as page separators, so you may use them to "
"separate pages of related sections of your file. Note, some editors and web-"
"based code viewers may not recognize control-L as a form feed and will show "
"another glyph in its place."
msgstr ""
"Python расценивает символ control+L (или ^L) как пробел. Многие редакторы "
"обрабатывают его как разрыв страницы, поэтому его можно использовать для "
"выделения логических части в файле на разных страницах. Обратите внимание, "
"что не все редакторы распознают control+L и могут на его месте отображать "
"другой символ."

#: ../doc/dev_guide/python_style_guide.rst:214
msgid "Encodings (PEP 263)"
msgstr "Кодировка (PEP 263)"

#: ../doc/dev_guide/python_style_guide.rst:216
msgid ""
"Code in the core Python distribution should always use the ASCII or Latin-1 "
"encoding (a.k.a. ISO-8859-1).  For Python 3.0 and beyond, UTF-8 is preferred "
"over Latin-1, see PEP 3120."
msgstr ""
"В коде ядра Python всегда должна использоваться кодировка ASCII или Latin-1 "
"(также известную как ISO-8859-1). Начиная с версии Python 3.0, "
"предпочтительной является кодировка UTF-8, а не Latin-1 (см. PEP 3120). "

#: ../doc/dev_guide/python_style_guide.rst:220
msgid ""
"Files using ASCII should not have a coding cookie.  Latin-1 (or UTF-8) "
"should only be used when a comment or docstring needs to mention an author "
"name that requires Latin-1; otherwise, using ``\\x``, ``\\u`` or ``\\U`` "
"escapes is the preferred way to include non-ASCII data in string literals."
msgstr ""
"Для файлов с ASCII не следует объявлять кодировку. Используйте Latin-1 (или "
"UTF-8), только если необходимо указать в комментарии или строке документации "
"имя автора, содержащее в себе символ из Latin-1. В остальных случаях "
"рекомендуется использовать управляющие символы \\x, \\u или \\U, чтобы "
"вставить в строку символы не из ASCII."

#: ../doc/dev_guide/python_style_guide.rst:226
msgid ""
"For Python 3.0 and beyond, the following policy is prescribed for the "
"standard library (see PEP 3131): All identifiers in the Python standard "
"library MUST use ASCII-only identifiers, and SHOULD use English words "
"wherever feasible (in many cases, abbreviations and technical terms are used "
"which aren't English). In addition, string literals and comments must also "
"be in ASCII. The only exceptions are (a) test cases testing the non-ASCII "
"features, and (b) names of authors. Authors whose names are not based on the "
"latin alphabet MUST provide a latin transliteration of their names."
msgstr ""
"Начиная с версии Python 3.0 и выше, в стандартной библиотеке действует "
"следующая политика (см. PEP 3131): все идентификаторы в стандартной "
"библиотеке Python ДОЛЖНЫ содержать только ASCII-символы и означать "
"английские слова везде, где это возможно (во многих случаях используются "
"сокращения или неанглийские технические термины). Кроме того, строки и "
"комментарии также должны содержать лишь ASCII-символы. Исключения "
"составляют: (a) тестовые сценарии для тестирования функций программы в "
"других кодировках, и (b) имена авторов. Авторы, в именах которых есть буквы "
"не из латинского алфавита, должны транслитерировать свои имена в латиницу."

#: ../doc/dev_guide/python_style_guide.rst:237
msgid ""
"Open source projects with a global audience are encouraged to adopt a "
"similar policy."
msgstr ""
"В проектах с открытым кодом для широкой аудитории также рекомендуется "
"использовать это правило."

#: ../doc/dev_guide/python_style_guide.rst:243
msgid "Imports"
msgstr "Импорт"

#: ../doc/dev_guide/python_style_guide.rst:245
msgid "Imports should usually be on separate lines, e.g.::"
msgstr "Импорт разных модулей должен быть на разных строках, например:"

#: ../doc/dev_guide/python_style_guide.rst:281
msgid ""
"Yes: import os\n"
"     import sys\n"
"\n"
"No:  import sys, os"
msgstr ""
"Yes: import os\n"
"     import sys\n"
"\n"
"No:  import sys, os"

#: ../doc/dev_guide/python_style_guide.rst:252
msgid "It's okay to say this though::"
msgstr "В то же время, можно писать вот так:"

#: ../doc/dev_guide/python_style_guide.rst:288
msgid "from subprocess import Popen, PIPE"
msgstr "from subprocess import Popen, PIPE"

#: ../doc/dev_guide/python_style_guide.rst:256
msgid ""
"Imports are always put at the top of the file, just after any module "
"comments and docstrings, and before module globals and constants."
msgstr ""
"Импорт всегда нужно делать в начале файла сразу после комментариев к модулю "
"и строк документации, перед объявлением глобальных переменных и постоянных."

#: ../doc/dev_guide/python_style_guide.rst:259
msgid "Imports should be grouped in the following order:"
msgstr "Группируйте импорты в следующем порядке:"

#: ../doc/dev_guide/python_style_guide.rst:261
msgid "standard library imports"
msgstr "импорты стандартной библиотеки"

#: ../doc/dev_guide/python_style_guide.rst:262
msgid "related third party imports"
msgstr "импорты сторонних библиотек"

#: ../doc/dev_guide/python_style_guide.rst:263
msgid "local application/library specific imports"
msgstr "импорты модулей текущего проекта"

#: ../doc/dev_guide/python_style_guide.rst:265
msgid "You should put a blank line between each group of imports."
msgstr "Между группами импортов вставляйте пустую строку."

#: ../doc/dev_guide/python_style_guide.rst:267
msgid "Put any relevant ``__all__`` specification after the imports."
msgstr "Указывайте все необходимые спецификации __all__ после импортов."

#: ../doc/dev_guide/python_style_guide.rst:269
msgid ""
"Relative imports for intra-package imports are highly discouraged. Always "
"use the absolute package path for all imports.  Even now that PEP 328 is "
"fully implemented in Python 2.5, its style of explicit relative imports is "
"actively discouraged; absolute imports are more portable and usually more "
"readable."
msgstr ""
"Относительные импорты крайне не рекомендуются. Всегда указывайте абсолютный "
"путь к модулю для всех видов импорта. Даже сейчас, когда PEP 328 реализован "
"в версии Python 2.5, явно использовать относительные импорты не "
"рекомендуется. Абсолютные импорты более независимы и, как правило, обладают "
"лучшей читаемостью."

#: ../doc/dev_guide/python_style_guide.rst:275
msgid ""
"When importing a class from a class-containing module, it's usually okay to "
"spell this::"
msgstr "При импорте класса из модуля с классами, обычно можно писать так:"

#: ../doc/dev_guide/python_style_guide.rst:312
msgid ""
"from myclass import MyClass\n"
"from foo.bar.yourclass import YourClass"
msgstr ""
"from myclass import MyClass\n"
"from foo.bar.yourclass import YourClass"

#: ../doc/dev_guide/python_style_guide.rst:281
msgid "If this spelling causes local name clashes, then spell them ::"
msgstr "Если такое написание вызывает конфликт локальных имен, пишите:"

#: ../doc/dev_guide/python_style_guide.rst:317
msgid ""
"import myclass\n"
"import foo.bar.yourclass"
msgstr ""
"import myclass\n"
"import foo.bar.yourclass"

#: ../doc/dev_guide/python_style_guide.rst:286
msgid "and use \"myclass.MyClass\" and \"foo.bar.yourclass.YourClass\"."
msgstr "И используйте \"myclass.MyClass\" и \"foo.bar.yourclass.YourClass\"."

#: ../doc/dev_guide/python_style_guide.rst:291
msgid "Whitespace in Expressions and Statements"
msgstr "Пробелы в выражениях и операторах"

#: ../doc/dev_guide/python_style_guide.rst:295
msgid "Pet Peeves"
msgstr "Наболевшие вопросы"

#: ../doc/dev_guide/python_style_guide.rst:297
msgid "Avoid extraneous whitespace in the following situations:"
msgstr "Избегайте использования пробелов в следующих ситуациях:"

#: ../doc/dev_guide/python_style_guide.rst:299
msgid "Immediately inside parentheses, brackets or braces. ::"
msgstr "Перед круглыми, фигурными и квадратными скобками и после них:"

#: ../doc/dev_guide/python_style_guide.rst:335
msgid ""
"Yes: spam(ham[1], {eggs: 2})\n"
"No:  spam( ham[ 1 ], { eggs: 2 } )"
msgstr ""
"Yes: spam(ham[1], {eggs: 2})\n"
"No:  spam( ham[ 1 ], { eggs: 2 } )"

#: ../doc/dev_guide/python_style_guide.rst:304
msgid "Immediately before a comma, semicolon, or colon::"
msgstr "Сразу перед запятой, точкой с запятой, двоеточием:"

#: ../doc/dev_guide/python_style_guide.rst:340
msgid ""
"Yes: if x == 4: print x, y; x, y = y, x\n"
"No:  if x == 4 : print x , y ; x , y = y , x"
msgstr ""
"Yes: if x == 4: print x, y; x, y = y, x\n"
"No:  if x == 4 : print x , y ; x , y = y , x"

#: ../doc/dev_guide/python_style_guide.rst:309
msgid ""
"Immediately before the open parenthesis that starts the argument list of a "
"function call::"
msgstr ""
"Сразу перед открывающей скобкой, после которой начинается список аргументов "
"при вызове функции:"

#: ../doc/dev_guide/python_style_guide.rst:346
msgid ""
"Yes: spam(1)\n"
"No:  spam (1)"
msgstr ""
"Yes: spam(1)\n"
"No:  spam (1)"

#: ../doc/dev_guide/python_style_guide.rst:315
msgid ""
"Immediately before the open parenthesis that starts an indexing or slicing::"
msgstr "Сразу перед открывающей скобкой, после которой идет индекс или срез:"

#: ../doc/dev_guide/python_style_guide.rst:352
msgid ""
"Yes: dict['key'] = list[index]\n"
"No:  dict ['key'] = list [index]"
msgstr ""
"Yes: dict['key'] = list[index]\n"
"No:  dict ['key'] = list [index]"

#: ../doc/dev_guide/python_style_guide.rst:321
msgid ""
"More than one space around an assignment (or other) operator to align it "
"with another."
msgstr ""
"Больше одного пробела вокруг оператора присваивания (или другого) для того, "
"чтобы выровнять его с другим оператором:"

#: ../doc/dev_guide/python_style_guide.rst:360
msgid ""
"x = 1\n"
"y = 2\n"
"long_variable = 3"
msgstr ""
"x = 1\n"
"y = 2\n"
"long_variable = 3"

#: ../doc/dev_guide/python_style_guide.rst:366
msgid ""
"x             = 1\n"
"y             = 2\n"
"long_variable = 3"
msgstr ""
"x             = 1\n"
"y             = 2\n"
"long_variable = 3"

#: ../doc/dev_guide/python_style_guide.rst:339
msgid "Other Recommendations"
msgstr "Прочие рекомендации"

#: ../doc/dev_guide/python_style_guide.rst:341
msgid ""
"Always surround these binary operators with a single space on either side: "
"assignment (``=``), augmented assignment (``+=``, ``-=`` etc.), comparisons "
"(``==``, ``<``, ``>``, ``!=``, ``<>``, ``<=``, ``>=``, ``in``, ``not in``, "
"``is``, ``is not``), Booleans (``and``, ``or``, ``not``)."
msgstr ""
"Всегда окружайте эти знаки двухместных операций пробелами по одному с каждой "
"стороны: присваивание (``=``), комбинированное присваивание (``+=``, ``-=`` "
"и т.д.), сравнения (``==``, ``<``, ``>``, ``!=``, ``<>``, ``<=``, ``>=``, "
"``in``, ``not in``, ``is``, ``is not``), логические операторы (``and``, "
"``or``, ``not``)."

#: ../doc/dev_guide/python_style_guide.rst:347
msgid ""
"If operators with different priorities are used, consider adding whitespace "
"around the operators with the lowest priority(ies). Use your own judgement; "
"however, never use more than one space, and always have the same amount of "
"whitespace on both sides of a binary operator."
msgstr ""
"Если используются знаки операций с разными приоритетами, рассмотрите "
"возможность добавить пробелы вокруг операций с самым низким приоритетом. "
"Судите сами, однако, никогда не используйте больше одного пробела, и всегда "
"используйте одинаковое количество пробелов по обе стороны от знака."

#: ../doc/dev_guide/python_style_guide.rst:389
msgid ""
"i = i + 1\n"
"submitted += 1\n"
"x = x*2 - 1\n"
"hypot2 = x*x + y*y\n"
"c = (a+b) * (a-b)"
msgstr ""
"i = i + 1\n"
"submitted += 1\n"
"x = x*2 - 1\n"
"hypot2 = x*x + y*y\n"
"c = (a+b) * (a-b)"

#: ../doc/dev_guide/python_style_guide.rst:397
msgid ""
"i=i+1\n"
"submitted +=1\n"
"x = x * 2 - 1\n"
"hypot2 = x * x + y * y\n"
"c = (a + b) * (a - b)"
msgstr ""
"i=i+1\n"
"submitted +=1\n"
"x = x * 2 - 1\n"
"hypot2 = x * x + y * y\n"
"c = (a + b) * (a - b)"

#: ../doc/dev_guide/python_style_guide.rst:369
msgid ""
"Don't use spaces around the ``=`` sign when used to indicate a keyword "
"argument or a default parameter value."
msgstr ""
"Не используйте пробелы для отделения знака ``=``, когда он употребляется для "
"обозначения аргумента ключевого слова или значения параметра по умолчанию."

#: ../doc/dev_guide/python_style_guide.rst:408
msgid ""
"def complex(real, imag=0.0):\n"
"    return magic(r=real, i=imag)"
msgstr ""
"def complex(real, imag=0.0):\n"
"    return magic(r=real, i=imag)"

#: ../doc/dev_guide/python_style_guide.rst:413
msgid ""
"def complex(real, imag = 0.0):\n"
"    return magic(r = real, i = imag)"
msgstr ""
"def complex(real, imag = 0.0):\n"
"    return magic(r = real, i = imag)"

#: ../doc/dev_guide/python_style_guide.rst:382
msgid ""
"Compound statements (multiple statements on the same line) are generally "
"discouraged."
msgstr ""
"Не рекомендуется использовать составные операторы (несколько операторов в "
"одной строке)."

#: ../doc/dev_guide/python_style_guide.rst:421
msgid ""
"if foo == 'blah':\n"
"    do_blah_thing()\n"
"do_one()\n"
"do_two()\n"
"do_three()"
msgstr ""
"if foo == 'blah':\n"
"    do_blah_thing()\n"
"do_one()\n"
"do_two()\n"
"do_three()"

#: ../doc/dev_guide/python_style_guide.rst:393
#: ../doc/dev_guide/python_style_guide.rst:402
msgid "Rather not::"
msgstr "Скорее неправильно:"

#: ../doc/dev_guide/python_style_guide.rst:429
msgid ""
"if foo == 'blah': do_blah_thing()\n"
"do_one(); do_two(); do_three()"
msgstr ""
"if foo == 'blah': do_blah_thing()\n"
"do_one(); do_two(); do_three()"

#: ../doc/dev_guide/python_style_guide.rst:398
msgid ""
"While sometimes it's okay to put an if/for/while with a small body on the "
"same line, never do this for multi-clause statements.  Also avoid folding "
"such long lines!"
msgstr ""
"Иногда можно разместить тело цикла if/for/while в той же строке, но если "
"операторов несколько, никогда так не делайте. И избегайте свертывания таких "
"длинных строк!"

#: ../doc/dev_guide/python_style_guide.rst:438
msgid ""
"if foo == 'blah': do_blah_thing()\n"
"for x in lst: total += x\n"
"while t < 10: t = delay()"
msgstr ""
"if foo == 'blah': do_blah_thing()\n"
"for x in lst: total += x\n"
"while t < 10: t = delay()"

#: ../doc/dev_guide/python_style_guide.rst:408
msgid "Definitely not::"
msgstr "Точно неправильно:"

#: ../doc/dev_guide/python_style_guide.rst:444
msgid ""
"if foo == 'blah': do_blah_thing()\n"
"else: do_non_blah_thing()\n"
"\n"
"try: something()\n"
"finally: cleanup()\n"
"\n"
"do_one(); do_two(); do_three(long, argument,\n"
"                             list, like, this)\n"
"\n"
"if foo == 'blah': one(); two(); three()"
msgstr ""
"if foo == 'blah': do_blah_thing()\n"
"else: do_non_blah_thing()\n"
"\n"
"try: something()\n"
"finally: cleanup()\n"
"\n"
"do_one(); do_two(); do_three(long, argument,\n"
"                             list, like, this)\n"
"\n"
"if foo == 'blah': one(); two(); three()"

#: ../doc/dev_guide/python_style_guide.rst:423
msgid "Comments"
msgstr "Комментарии"

#: ../doc/dev_guide/python_style_guide.rst:425
msgid ""
"Comments that contradict the code are worse than no comments.  Always make a "
"priority of keeping the comments up-to-date when the code changes!"
msgstr ""
"Комментарии, которые противоречат коду, хуже, чем отсутствие комментариев. "
"Всегда считайте первоочередной задачей исправить комментарии, если меняется "
"код!"

#: ../doc/dev_guide/python_style_guide.rst:429
msgid ""
"Comments should be complete sentences.  If a comment is a phrase or "
"sentence, its first word should be capitalized, unless it is an identifier "
"that begins with a lower case letter (never alter the case of identifiers!)."
msgstr ""
"Комментарии должны представлять собой законченные предложения. Если "
"комментарием будет фраза или предложение, первое слово должно быть написано "
"с заглавной буквы, если только это не идентификатор, который пишется со "
"строчной буквы (никогда не меняйте регистр идентификаторов!)."

#: ../doc/dev_guide/python_style_guide.rst:434
msgid ""
"If a comment is short, the period at the end can be omitted.  Block comments "
"generally consist of one or more paragraphs built out of complete sentences, "
"and each sentence should end in a period."
msgstr ""
"Если комментарий короткий, точку в конце предложения можно опустить. Блок "
"комментариев обычно состоит из одного или более абзацев, составленных из "
"полных предложений, поэтому каждое предложение должно заканчиваться точкой."

#: ../doc/dev_guide/python_style_guide.rst:438
msgid "You should use two spaces after a sentence-ending period."
msgstr "После точки в конце предложения следует ставить два пробела."

#: ../doc/dev_guide/python_style_guide.rst:440
msgid "When writing English, Strunk and White apply."
msgstr ""
"Если вы пишете на английском языке, не забывайте о рекомендациях Странка и "
"Уайта по стилю."

#: ../doc/dev_guide/python_style_guide.rst:442
msgid ""
"Python coders from non-English speaking countries: please write your "
"comments in English, unless you are 120% sure that the code will never be "
"read by people who don't speak your language."
msgstr ""
"Разработчики на языке Python из неанглоязычных стран, пишите комментарии на "
"английском, если только вы не уверены на 120%, что ваш код никогда не будут "
"читать люди, не знающие вашего родного языка."

#: ../doc/dev_guide/python_style_guide.rst:448
msgid "Block Comments"
msgstr "Блок комментариев"

#: ../doc/dev_guide/python_style_guide.rst:450
msgid ""
"Block comments generally apply to some (or all) code that follows them, and "
"are indented to the same level as that code.  Each line of a block comment "
"starts with a ``#`` and a single space (unless it is indented text inside "
"the comment)."
msgstr ""
"Блок комментариев обычно сопровождает фрагмент кода (или весь код), который "
"за ним следует, и находится на том же уровне отступов, что и сам код. Каждая "
"строка блока комментариев должна начинаться с символа ``#`` и одного пробела "
"после него (если только в самом тексте комментария нет отступов)."

#: ../doc/dev_guide/python_style_guide.rst:455
msgid ""
"Paragraphs inside a block comment are separated by a line containing a "
"single ``#``."
msgstr ""
"Абзацы в пределах блока комментариев отделяются строкой, состоящей из одного "
"символа ``#``."

#: ../doc/dev_guide/python_style_guide.rst:460
msgid "Inline Comments"
msgstr "Комментарии в строке с кодом"

#: ../doc/dev_guide/python_style_guide.rst:462
msgid "Use inline comments sparingly."
msgstr "Старайтесь реже использовать подобные комментарии."

#: ../doc/dev_guide/python_style_guide.rst:464
msgid ""
"An inline comment is a comment on the same line as a statement. Inline "
"comments should be separated by at least two spaces from the statement.  "
"They should start with a # and a single space."
msgstr ""
"Встроенный комментарий находится в той же строке, что и оператор. Такие "
"комментарии должны отделяться от оператора хотя бы двумя пробелами. Они "
"должны начинаться с символа # и одного пробела."

#: ../doc/dev_guide/python_style_guide.rst:468
msgid ""
"Inline comments are unnecessary and in fact distracting if they state the "
"obvious.  Don't do this::"
msgstr ""
"Комментарии в строке с кодом не нужны и в действительности отвлекают от "
"чтения, если они объясняют очевидное. Не пишите так:"

#: ../doc/dev_guide/python_style_guide.rst:505
msgid "x = x + 1                 # Increment x"
msgstr "x = x + 1                 # Увеличение x"

#: ../doc/dev_guide/python_style_guide.rst:473
msgid "But sometimes, this is useful::"
msgstr "Иногда, впрочем, они полезны:"

#: ../doc/dev_guide/python_style_guide.rst:509
msgid "x = x + 1                 # Compensate for border"
msgstr "x = x + 1                 # Место для рамки окна"

#: ../doc/dev_guide/python_style_guide.rst:479
msgid "Documentation Strings"
msgstr "Строки документации"

#: ../doc/dev_guide/python_style_guide.rst:481
msgid ""
"Conventions for writing good documentation strings (a.k.a. \"docstrings\") "
"are immortalized in PEP 257."
msgstr ""
"Соглашения о написании хорошей документации (docstrings) увековечены в PEP "
"257."

#: ../doc/dev_guide/python_style_guide.rst:484
msgid ""
"Write docstrings for all public modules, functions, classes, and methods.  "
"Docstrings are not necessary for non-public methods, but you should have a "
"comment that describes what the method does.  This comment should appear "
"after the ``def`` line."
msgstr ""
"Пишите документацию для всех доступных модулей, функций, классов, методов. "
"Строки документации необязательны для внутренних методов, но нужно добавить "
"комментарий о том, что делает метод. Комментарий должен идти после строки "
"``def``."

#: ../doc/dev_guide/python_style_guide.rst:489
msgid ""
"PEP 257 describes good docstring conventions.  Note that most importantly, "
"the ``\"\"\"`` that ends a multiline docstring should be on a line by "
"itself, and preferably preceded by a blank line, e.g.::"
msgstr ""
"PEP 257 объясняет, как правильно и хорошо писать документацию. Следует "
"отметить, что очень важно, чтобы закрывающие ``\"\"\"`` стояли на отдельной "
"строке, а предпочтительно, чтобы перед ними была и пустая строка, например:"

#: ../doc/dev_guide/python_style_guide.rst:527
msgid ""
"\"\"\"Return a foobang\n"
"\n"
"Optional plotz says to frobnicate the bizbaz first.\n"
"\n"
"\"\"\""
msgstr ""
"\"\"\"Return a foobang\n"
"\n"
"Optional plotz says to frobnicate the bizbaz first.\n"
"\n"
"\"\"\""

#: ../doc/dev_guide/python_style_guide.rst:499
msgid ""
"For one liner docstrings, it's okay to keep the closing ``\"\"\"`` on the "
"same line."
msgstr ""
"Для однострочной документации можно оставить закрывающие ``\"\"\"`` на той "
"же строке."

#: ../doc/dev_guide/python_style_guide.rst:505
msgid "Version Bookkeeping"
msgstr "Контроль версий"

#: ../doc/dev_guide/python_style_guide.rst:507
msgid ""
"If you have to have Subversion, CVS, or RCS crud in your source file, do it "
"as follows. ::"
msgstr ""
"Если вам нужно использовать Subversion, CVS или RCS в ваших исходных кодах, "
"делайте это следующим образом:"

#: ../doc/dev_guide/python_style_guide.rst:544
msgid ""
"__version__ = \"$Revision$\"\n"
"# $Source$"
msgstr ""
"__version__ = \"$Revision$\"\n"
"# $Source$"

#: ../doc/dev_guide/python_style_guide.rst:513
msgid ""
"These lines should be included after the module's docstring, before any "
"other code, separated by a blank line above and below."
msgstr ""
"Эти строки следует указывать после документации модуля перед любым другим "
"кодом, отделяя их пустыми строками сверху и снизу."

#: ../doc/dev_guide/python_style_guide.rst:519
msgid "Naming Conventions"
msgstr "Соглашения по именованию"

#: ../doc/dev_guide/python_style_guide.rst:521
msgid ""
"The naming conventions of Python's library are a bit of a mess, so we'll "
"never get this completely consistent -- nevertheless, here are the currently "
"recommended naming standards.  New modules and packages (including third "
"party frameworks) should be written to these standards, but where an "
"existing library has a different style, internal consistency is preferred."
msgstr ""
"Соглашения по именованию переменных в Python довольно запущены, поэтому "
"полной согласованности невозможно будет добиться. Тем не менее, ниже мы "
"приводим список рекомендованных стандартов именования. Новые модули и пакеты "
"(включая сторонние) должны быть написаны в соответствии с этими стандартами, "
"но если уже существующая библиотека написана в другом стиле, предпочтительно "
"поддерживать согласованность."

#: ../doc/dev_guide/python_style_guide.rst:530
msgid "Descriptive: Naming Styles"
msgstr "Описание: Стили имен"

#: ../doc/dev_guide/python_style_guide.rst:532
msgid ""
"There are a lot of different naming styles.  It helps to be able to "
"recognize what naming style is being used, independently from what they are "
"used for."
msgstr ""
"Существует много различных стилей именования. Полезно распознавать, какой "
"стиль именования используется независимо от того, для чего он используется."

#: ../doc/dev_guide/python_style_guide.rst:536
msgid "The following naming styles are commonly distinguished:"
msgstr "Обычно различают следующие стили именования:"

#: ../doc/dev_guide/python_style_guide.rst:538
msgid "``b`` (single lowercase letter)"
msgstr "``b`` (отдельная строчная буква)"

#: ../doc/dev_guide/python_style_guide.rst:539
msgid "``B`` (single uppercase letter)"
msgstr "``B`` (отдельная заглавная буква)"

#: ../doc/dev_guide/python_style_guide.rst:540
msgid "``lowercase``"
msgstr "``lowercase`` (слово в нижнем регистре)"

#: ../doc/dev_guide/python_style_guide.rst:541
msgid "``lower_case_with_underscores``"
msgstr ""
"``lower_case_with_underscores`` (слова из строчных букв с символами "
"подчеркивания)"

#: ../doc/dev_guide/python_style_guide.rst:542
msgid "``UPPERCASE``"
msgstr "``UPPERCASE`` (заглавные буквы)"

#: ../doc/dev_guide/python_style_guide.rst:543
msgid "``UPPER_CASE_WITH_UNDERSCORES``"
msgstr ""
"UPPERCASE_WITH_UNDERSCORES (слова из заглавных букв с символами "
"подчеркивания)"

#: ../doc/dev_guide/python_style_guide.rst:544
msgid ""
"``CapitalizedWords`` (or CapWords, or CamelCase -- so named because of the "
"bumpy look of its letters [3]_).  This is also sometimes known as StudlyCaps."
msgstr ""
"``CapitalizedWords`` (слова с заглавными буквами, или CapWords, или "
"CamelCase -- называется так, потому что прописные буквы внутри слова "
"напоминают горбы верблюда [3]_). Иногда называется StudlyCaps. "

#: ../doc/dev_guide/python_style_guide.rst:548
msgid ""
"Note: When using abbreviations in CapWords, capitalize all the letters of "
"the abbreviation.  Thus HTTPServerError is better than HttpServerError."
msgstr ""
"Примечание: когда вы используете аббревиатуры в стиле CapWords, пишите все "
"буквы аббревиатуры заглавными. HTTPServerError выглядит лучше, чем "
"HttpServerError."

#: ../doc/dev_guide/python_style_guide.rst:551
msgid ""
"``mixedCase`` (differs from CapitalizedWords by initial lowercase character!)"
msgstr ""
"mixedCase (отличается от CapitalizedWords тем, что первое слово начинается "
"со строчной буквы!)"

#: ../doc/dev_guide/python_style_guide.rst:553
msgid "``Capitalized_Words_With_Underscores`` (ugly!)"
msgstr ""
"Capitalized_Words_With_Underscores (слова с заглавными буквами и символами "
"подчеркивания -- уродливо!)"

#: ../doc/dev_guide/python_style_guide.rst:555
msgid ""
"There's also the style of using a short unique prefix to group related names "
"together.  This is not used much in Python, but it is mentioned for "
"completeness.  For example, the ``os.stat()`` function returns a tuple whose "
"items traditionally have names like ``st_mode``, ``st_size``, ``st_mtime`` "
"and so on.  (This is done to emphasize the correspondence with the fields of "
"the POSIX system call struct, which helps programmers familiar with that.)"
msgstr ""
"Еще есть стиль, в котором к именам из одной логической группы добавляется "
"короткий уникальный префикс. Этот стиль редко используется в Python, но "
"упомянем его для полноты изложения. Например, функция ``os.stat()`` "
"возвращает кортеж, имена в котором традиционно выглядят так: ``st_mode``, "
"``st_size``, ``st_mtime`` и так далее. (Так сделано, чтобы подчеркнуть "
"соответствие этих полей структуре системных вызовов POSIX, что помогает "
"знакомым с ней разработчикам)."

#: ../doc/dev_guide/python_style_guide.rst:563
msgid ""
"The X11 library uses a leading X for all its public functions.  In Python, "
"this style is generally deemed unnecessary because attribute and method "
"names are prefixed with an object, and function names are prefixed with a "
"module name."
msgstr ""
"В библиотеке X11 используется префикс Х для всех доступных функций. В Python "
"этот стиль считается лишним, потому что перед полями и именами методов стоит "
"имя объекта, а перед именами функций стоит имя модуля."

#: ../doc/dev_guide/python_style_guide.rst:568
msgid ""
"In addition, the following special forms using leading or trailing "
"underscores are recognized (these can generally be combined with any case "
"convention):"
msgstr ""
"Кроме того, используются следующие специальные формы записи имен с "
"добавлением символа подчеркивания в начало или конец имени (их можно "
"использовать с любым типом регистра):"

#: ../doc/dev_guide/python_style_guide.rst:572
msgid ""
"``_single_leading_underscore``: weak \"internal use\" indicator. E.g. ``from "
"M import *`` does not import objects whose name starts with an underscore."
msgstr ""
"``_single_leading_underscore``: слабый индикатор \"для внутреннего "
"пользования\". Например, ``from M import *`` не будет импортировать объекты, "
"имена которых начинаются с символа подчеркивания."

#: ../doc/dev_guide/python_style_guide.rst:576
msgid ""
"``single_trailing_underscore_``: used by convention to avoid conflicts with "
"Python keyword, e.g. ::"
msgstr ""
"``single_trailing_underscore_``: используется по соглашению во избежание "
"конфликтов с ключевыми словами Python, например:"

#: ../doc/dev_guide/python_style_guide.rst:613
msgid "Tkinter.Toplevel(master, class_='ClassName')"
msgstr "Tkinter.Toplevel(master, class_='ClassName')"

#: ../doc/dev_guide/python_style_guide.rst:581
msgid ""
"``__double_leading_underscore``: when naming a class attribute, invokes name "
"mangling (inside class FooBar, ``__boo`` becomes ``_FooBar__boo``; see "
"below)."
msgstr ""
"``__double_leading_underscore``: изменяет имя атрибута класса (в классе "
"FooBar, ``__boo`` становится ``_FooBar__boo``; см. ниже)."

#: ../doc/dev_guide/python_style_guide.rst:585
msgid ""
"``__double_leading_and_trailing_underscore__``: \"magic\" objects or "
"attributes that live in user-controlled namespaces. E.g. ``__init__``, "
"``__import__`` or ``__file__``.  Never invent such names; only use them as "
"documented."
msgstr ""
"``__double_leading_and_trailing_underscore__``: \"волшебные\" объекты или "
"атрибуты, которые находятся в live in в пространствах имен, управляемых "
"пользователем. Например, ``__init__``, ``__import__`` или ``__file__``. Не "
"придумывайте такие имена, используйте их только так, как написано в "
"документации."

#: ../doc/dev_guide/python_style_guide.rst:592
msgid "Prescriptive: Naming Conventions"
msgstr "Предписания: соглашения по именованию"

#: ../doc/dev_guide/python_style_guide.rst:596
msgid "Names to Avoid"
msgstr "Имена, которых следует избегать"

#: ../doc/dev_guide/python_style_guide.rst:598
msgid ""
"Never use the characters 'l' (lowercase letter el), 'O' (uppercase letter "
"oh), or 'I' (uppercase letter eye) as single character variable names."
msgstr ""
"Никогда не используйте символы 'l' (строчная латинская буква эль), "
"'O' (заглавная латинская буква о) или 'I' (заглавная латинская буква ай) в "
"качестве однобуквенных имен переменных."

#: ../doc/dev_guide/python_style_guide.rst:602
msgid ""
"In some fonts, these characters are indistinguishable from the numerals one "
"and zero.  When tempted to use 'l', use 'L' instead."
msgstr ""
"В некоторых шрифтах эти символы неотличимы от цифр один и ноль. Если нельзя "
"обойтись без 'l', пишите вместо нее 'L'."

#: ../doc/dev_guide/python_style_guide.rst:607
msgid "Package and Module Names"
msgstr "Имена модулей и пакетов"

#: ../doc/dev_guide/python_style_guide.rst:609
msgid ""
"Modules should have short, all-lowercase names.  Underscores can be used in "
"the module name if it improves readability.  Python packages should also "
"have short, all-lowercase names, although the use of underscores is "
"discouraged."
msgstr ""
"Имена модулей должны быть короткими и состоять из строчных букв. Можно "
"использовать и символы подчеркивания, если это улучшает читаемость. Имена "
"пакетов Python также должны быть короткими и состоять из строчных букв, но "
"здесь символы подчеркивания не приветствуются."

#: ../doc/dev_guide/python_style_guide.rst:614
msgid ""
"Since module names are mapped to file names, and some file systems are case "
"insensitive and truncate long names, it is important that module names be "
"chosen to be fairly short -- this won't be a problem on Unix, but it may be "
"a problem when the code is transported to older Mac or Windows versions, or "
"DOS."
msgstr ""
"Так как имена модулей отображаются в именах файлов, а некоторые файловые "
"системы являются нечувствительными к регистру символов и обрезают длинные "
"имена, очень важно использовать достаточно короткие имена модулей -- это не "
"проблема в Unix, но может стать проблемой при переносе кода в старые версии "
"Windows, Mac или DOS."

#: ../doc/dev_guide/python_style_guide.rst:620
msgid ""
"When an extension module written in C or C++ has an accompanying Python "
"module that provides a higher level (e.g. more object oriented) interface, "
"the C/C++ module has a leading underscore (e.g. ``_socket``)."
msgstr ""
"Если для модуля расширения, написанного на С или C++, есть сопутствующий "
"Python-модуль, содержащий интерфейс более высокого уровня (например, более "
"объектно-ориентированный), модуль С/С++ начинается с символа подчеркивания "
"(например, ``_socket``)."

#: ../doc/dev_guide/python_style_guide.rst:627
msgid "Class Names"
msgstr "Имена классов"

#: ../doc/dev_guide/python_style_guide.rst:629
msgid ""
"Almost without exception, class names use the CapWords convention. Classes "
"for internal use have a leading underscore in addition."
msgstr ""
"Все имена классов должны соответствовать CapWords почти без исключений. "
"Классы для внутреннего использования могут также начинаться с символа "
"подчеркивания."

#: ../doc/dev_guide/python_style_guide.rst:634
msgid "Exception Names"
msgstr "Имена исключений"

#: ../doc/dev_guide/python_style_guide.rst:636
msgid ""
"Because exceptions should be classes, the class naming convention applies "
"here.  However, you should use the suffix \"Error\" on your exception names "
"(if the exception actually is an error)."
msgstr ""
"Так как исключения должны быть классами, к исключениям применяются правила "
"именования классов. Однако вы можете добавить суффикс \"Error\" в конце "
"имени (если исключение действительно является ошибкой)."

#: ../doc/dev_guide/python_style_guide.rst:642
msgid "Global Variable Names"
msgstr "Имена глобальных переменных"

#: ../doc/dev_guide/python_style_guide.rst:644
msgid ""
"(Let's hope that these variables are meant for use inside one module only.)  "
"The conventions are about the same as those for functions."
msgstr ""
"(Будем надеяться, что такие имена используются только в пределах одного "
"модуля.) Применяются те же правила, что и для имен функций."

#: ../doc/dev_guide/python_style_guide.rst:647
msgid ""
"Modules that are designed for use via ``from M import *`` should use the "
"``__all__`` mechanism to prevent exporting globals, or use the older "
"convention of prefixing such globals with an underscore (which you might "
"want to do to indicate these globals are \"module non-public\")."
msgstr ""
"В модули, которые предназначены для использования с помощью ``from M import "
"*``, следует добавить механизм ``__all__``, чтобы предотвратить экспорт "
"глобальных переменных, или же использовать старое соглашение, добавляя перед "
"именами таких глобальных переменных один символ подчеркивания (которым можно "
"обозначить глобальные переменные, которые используются только внутри модуля)."

#: ../doc/dev_guide/python_style_guide.rst:655
msgid "Function Names"
msgstr "Имена функций"

#: ../doc/dev_guide/python_style_guide.rst:657
msgid ""
"Function names should be lowercase, with words separated by underscores as "
"necessary to improve readability."
msgstr ""
"Имена функций должны состоять из строчных букв, а слова разделяться "
"символами подчеркивания, чтобы улучшить читаемость."

#: ../doc/dev_guide/python_style_guide.rst:660
msgid ""
"mixedCase is allowed only in contexts where that's already the prevailing "
"style (e.g. threading.py), to retain backwards compatibility."
msgstr ""
"mixedCase допускается только в тех местах, где уже преобладает такой стиль "
"(например, threading.py), для обратной совместимости."

#: ../doc/dev_guide/python_style_guide.rst:666
msgid "Function and method arguments"
msgstr "Аргументы функций и методов"

#: ../doc/dev_guide/python_style_guide.rst:668
msgid "Always use ``self`` for the first argument to instance methods."
msgstr ""
"Всегда используйте ``self`` в качестве первого аргумента метода экземпляра."

#: ../doc/dev_guide/python_style_guide.rst:670
msgid "Always use ``cls`` for the first argument to class methods."
msgstr "Всегда используйте ``cls`` в качестве первого аргумента метода класса."

#: ../doc/dev_guide/python_style_guide.rst:672
msgid ""
"If a function argument's name clashes with a reserved keyword, it is "
"generally better to append a single trailing underscore rather than use an "
"abbreviation or spelling corruption.  Thus ``class_`` is better than "
"``clss``.  (Perhaps better is to avoid such clashes by using a synonym.)"
msgstr ""
"Если имя аргумента функции конфликтует с зарезервированным ключевым словом, "
"обычно лучше добавить в конец имени символ подчеркивания, а не сокращать "
"слово или искажать его. Таким образом, ``class_`` лучше, чем ``clss``. "
"(Возможно, будет лучше избегать конфликта имен путем подбора синонима)."

#: ../doc/dev_guide/python_style_guide.rst:680
msgid "Method Names and Instance Variables"
msgstr "Имена методов и переменные экземпляров"

#: ../doc/dev_guide/python_style_guide.rst:682
msgid ""
"Use the function naming rules: lowercase with words separated by underscores "
"as necessary to improve readability."
msgstr ""
"Используйте тот же стиль, что и для имен функций: они должны состоять из "
"строчных букв, а слова разделяться символами подчеркивания, чтобы улучшить "
"читаемость."

#: ../doc/dev_guide/python_style_guide.rst:685
msgid ""
"Use one leading underscore only for non-public methods and instance "
"variables."
msgstr ""
"Используйте только один символ подчеркивания в начале слова для внутренних "
"методов и переменных экземпляров."

#: ../doc/dev_guide/python_style_guide.rst:688
msgid ""
"To avoid name clashes with subclasses, use two leading underscores to invoke "
"Python's name mangling rules."
msgstr ""
"Чтобы избежать конфликта имен с подклассами, добавьте два символа "
"подчеркивания в начале слова, чтобы включить механизм изменения имен в "
"Python. "

#: ../doc/dev_guide/python_style_guide.rst:691
msgid ""
"Python mangles these names with the class name: if class Foo has an "
"attribute named ``__a``, it cannot be accessed by ``Foo.__a``.  (An "
"insistent user could still gain access by calling ``Foo._Foo__a``.) "
"Generally, double leading underscores should be used only to avoid name "
"conflicts with attributes in classes designed to be subclassed."
msgstr ""
"Python изменяет эти имена: если в классе Foo есть атрибут с именем ``__a``, "
"к нему нельзя обратиться через ``Foo.__a``. (Настойчивый пользователь всё "
"равно может получить доступ через ``Foo._Foo__a``.) Вообще, двойное "
"подчеркивание в начале имени должно использоваться только во избежание "
"конфликта имен с атрибутами классов, предназначенных для разделения на "
"подклассы."

#: ../doc/dev_guide/python_style_guide.rst:697
msgid "Note: there is some controversy about the use of __names (see below)."
msgstr ""
"Примечание: есть некоторые разногласия по поводу использования имен __names "
"(см. ниже)."

#: ../doc/dev_guide/python_style_guide.rst:701
msgid "Constants"
msgstr "Постоянные"

#: ../doc/dev_guide/python_style_guide.rst:703
msgid ""
"Constants are usually defined on a module level and written in all capital "
"letters with underscores separating words.  Examples include "
"``MAX_OVERFLOW`` and ``TOTAL``."
msgstr ""
"Постоянные обычно объявляются на уровне модуля и записываются только "
"заглавными буквами, а слова разделяются символами подчеркивания. Например: "
"MAX_OVERFLOW, TOTAL."

#: ../doc/dev_guide/python_style_guide.rst:709
msgid "Designing for inheritance"
msgstr "Проектирование наследования"

#: ../doc/dev_guide/python_style_guide.rst:711
msgid ""
"Always decide whether a class's methods and instance variables "
"(collectively: \"attributes\") should be public or non-public.  If in doubt, "
"choose non-public; it's easier to make it public later than to make a public "
"attribute non-public."
msgstr ""
"Обязательно решите, каким должен быть метод класса или переменная экземпляра "
"класса (в общем, атрибут) -- доступными (public) или внутренними (non-"
"public). Если вы сомневаетесь, делайте их внутренними. Потом будет проще "
"открыть к ним доступ, чем наоборот."

#: ../doc/dev_guide/python_style_guide.rst:716
msgid ""
"Public attributes are those that you expect unrelated clients of your class "
"to use, with your commitment to avoid backward incompatible changes.  Non-"
"public attributes are those that are not intended to be used by third "
"parties; you make no guarantees that non-public attributes won't change or "
"even be removed."
msgstr ""
"Доступные атрибуты -- это такие атрибуты, которые будут использовать "
"потребители ваших классов, и вы должны быть уверены в обратной "
"совместимости. Внутренние атрибуты, в свою очередь, не предназначены для "
"использования третьими лицами, поэтому вы можете не гарантировать, что не "
"измените или не удалите эти атрибуты."

#: ../doc/dev_guide/python_style_guide.rst:722
msgid ""
"We don't use the term \"private\" here, since no attribute is really private "
"in Python (without a generally unnecessary amount of work)."
msgstr ""
"Мы не используем термин \"закрытый\" (private), потому что на самом деле в "
"Python таких атрибутов не бывает (без ненужных дополнительных усилий)."

#: ../doc/dev_guide/python_style_guide.rst:725
msgid ""
"Another category of attributes are those that are part of the \"subclass API"
"\" (often called \"protected\" in other languages).  Some classes are "
"designed to be inherited from, either to extend or modify aspects of the "
"class's behavior.  When designing such a class, take care to make explicit "
"decisions about which attributes are public, which are part of the subclass "
"API, and which are truly only to be used by your base class."
msgstr ""
"Другой тип атрибутов классов принадлежит так называемому API подклассов (в "
"других языках они часто называются защищенными -- \"protected\"). Некоторые "
"классы предназначены для наследования другими классами, которые расширяют "
"или изменяют поведение базового класса. Когда вы проектируете такой класс, "
"решите и явным образом укажите, какие атрибуты являются доступными (public), "
"какие относятся к API подклассов (subclass API), а какие используются только "
"базовым классом."

#: ../doc/dev_guide/python_style_guide.rst:733
msgid "With this in mind, here are the Pythonic guidelines:"
msgstr "С учетом вышесказанного, сформулируем рекомендации:"

#: ../doc/dev_guide/python_style_guide.rst:735
msgid "Public attributes should have no leading underscores."
msgstr ""
"В начале имени доступных атрибутов не должно быть символов подчеркивания."

#: ../doc/dev_guide/python_style_guide.rst:737
msgid ""
"If your public attribute name collides with a reserved keyword, append a "
"single trailing underscore to your attribute name.  This is preferable to an "
"abbreviation or corrupted spelling.  (However, not withstanding this rule, "
"'cls' is the preferred spelling for any variable or argument which is known "
"to be a class, especially the first argument to a class method.)"
msgstr ""
"Если имя доступного атрибута конфликтует с ключевым словом языка, добавьте в "
"конец имени один символ подчеркивания. Это более предпочтительно, чем "
"сокращать слово или искажать его (однако, у этого правила есть исключение: "
"'cls' -- это предпочтительное написание любой переменной или аргумента, "
"который означает класс, а особенно первого аргумента метода класса)."

#: ../doc/dev_guide/python_style_guide.rst:745
#: ../doc/dev_guide/python_style_guide.rst:756
#: ../doc/dev_guide/python_style_guide.rst:778
msgid "Note 1:"
msgstr "Примечание 1:"

#: ../doc/dev_guide/python_style_guide.rst:745
msgid "See the argument name recommendation above for class methods."
msgstr "См. рекомендации по именам аргументов выше для методов класса."

#: ../doc/dev_guide/python_style_guide.rst:747
msgid ""
"For simple public data attributes, it is best to expose just the attribute "
"name, without complicated accessor/mutator methods.  Keep in mind that "
"Python provides an easy path to future enhancement, should you find that a "
"simple data attribute needs to grow functional behavior.  In that case, use "
"properties to hide functional implementation behind simple data attribute "
"access syntax."
msgstr ""
"Назовите простые открытые атрибуты понятными именами и не пишите сложные "
"методы доступа и изменения (accessor/mutator). Следует помнить, что в Python "
"очень легко расширить поведение функции, если потребуется. В этом случае "
"используйте свойства (properties), чтобы скрыть функциональную реализацию за "
"синтаксисом доступа к атрибутам."

#: ../doc/dev_guide/python_style_guide.rst:756
msgid "Properties only work on new-style classes."
msgstr "Свойства работают только в классах нового стиля (new-style classes)."

#: ../doc/dev_guide/python_style_guide.rst:760
#: ../doc/dev_guide/python_style_guide.rst:783
msgid "Note 2:"
msgstr "Примечание 2:"

#: ../doc/dev_guide/python_style_guide.rst:759
msgid ""
"Try to keep the functional behavior side-effect free, although side-effects "
"such as caching are generally fine."
msgstr ""
"Постарайтесь избавиться от побочных эффектов, связанных с функциональным "
"поведением, хотя такие вещи, как кэширование, вполне допустимы."

#: ../doc/dev_guide/python_style_guide.rst:765
#: ../doc/dev_guide/python_style_guide.rst:788
msgid "Note 3:"
msgstr "Примечание 3:"

#: ../doc/dev_guide/python_style_guide.rst:763
msgid ""
"Avoid using properties for computationally expensive operations; the "
"attribute notation makes the caller believe that access is (relatively) "
"cheap."
msgstr ""
"Избегайте использовать вычислительно затратные операции, потому что из-за "
"записи с помощью атрибутов создается впечатление, что доступ происходит "
"(относительно) быстро."

#: ../doc/dev_guide/python_style_guide.rst:767
msgid ""
"If your class is intended to be subclassed, and you have attributes that you "
"do not want subclasses to use, consider naming them with double leading "
"underscores and no trailing underscores.  This invokes Python's name "
"mangling algorithm, where the name of the class is mangled into the "
"attribute name.  This helps avoid attribute name collisions should "
"subclasses inadvertently contain attributes with the same name."
msgstr ""
"Если ваш класс предназначен для разделения на подклассы, но некоторые "
"атрибуты не должны наследоваться подклассами, подумайте о добавлении в имена "
"двух символов подчеркивания в начале и ни одного в конце. Механизм изменения "
"имен в Python сработает так, что имя класса добавится к имени такого "
"атрибута. Это позволит избежать конфликта имен, если в подклассах случайно "
"появятся атрибуты с такими же именами."

#: ../doc/dev_guide/python_style_guide.rst:776
msgid ""
"Note that only the simple class name is used in the mangled name, so if a "
"subclass chooses both the same class name and attribute name, you can still "
"get name collisions."
msgstr ""
"Обратите внимание, что только имена простых классов используются в "
"измененном имени, поэтому если в подклассе будет то же имя класса и имя "
"атрибута, то снова возникнет конфликт имен."

#: ../doc/dev_guide/python_style_guide.rst:781
msgid ""
"Name mangling can make certain uses, such as debugging and "
"``__getattr__()``, less convenient.  However the name mangling algorithm is "
"well documented and easy to perform manually."
msgstr ""
"Механизм изменения имен может затруднить отладку или работу с "
"``__getattr__()``. Тем не менее, алгоритм хорошо документирован и легко "
"реализуется вручную."

#: ../doc/dev_guide/python_style_guide.rst:786
msgid ""
"Not everyone likes name mangling.  Try to balance the need to avoid "
"accidental name clashes with potential use by advanced callers."
msgstr ""
"Не всем нравится механизм изменения имен. Постарайтесь достичь компромисса "
"между необходимостью избежать конфликта имен и возможностью доступа к этим "
"атрибутам."

#: ../doc/dev_guide/python_style_guide.rst:792
msgid "References"
msgstr "Использованная литература"

#: ../doc/dev_guide/python_style_guide.rst:794
msgid ""
"`PEP 7, Style Guide for C Code, van Rossum <https://www.python.org/dev/peps/"
"pep-0007/>`_"
msgstr ""
"ван Россум Гвидо. `PEP 7, Руководство по программированию на языке C "
"<https://www.python.org/dev/peps/pep-0007/>`_"

#: ../doc/dev_guide/python_style_guide.rst:795
msgid ""
"`Barry's GNU Mailman style guide <http://barry.warsaw.us/software/STYLEGUIDE."
"txt>`_"
msgstr ""
"`Руководство Барри по GNU Mailman <http://barry.warsaw.us/software/"
"STYLEGUIDE.txt>`_"

#: ../doc/dev_guide/python_style_guide.rst:796
msgid "`CamelCase Wikipedia page <http://www.wikipedia.com/wiki/CamelCase>`_"
msgstr ""
"`Страница Википедии о CamelCase <http://www.wikipedia.com/wiki/CamelCase>`_"

#: ../doc/dev_guide/python_style_guide.rst:800
msgid "Copyright"
msgstr "Защита авторских прав"

#: ../doc/dev_guide/python_style_guide.rst:802
msgid "Author:"
msgstr "Автор:"

#: ../doc/dev_guide/python_style_guide.rst:804
msgid "Guido van Rossum <guido@python.org>"
msgstr "Гвидо ван Россум <guido@python.org>"

#: ../doc/dev_guide/python_style_guide.rst:805
msgid "Barry Warsaw <barry@python.org>"
msgstr "Барри Ворсо <barry@python.org>"
