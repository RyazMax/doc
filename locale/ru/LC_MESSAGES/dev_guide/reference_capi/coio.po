# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-04 10:02+0000\n"
"PO-Revision-Date: 2019-12-20 21:24+0300\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
"Generated-By: Babel 2.7.0\n"

#: ../doc/dev_guide/reference_capi/coio.rst:3
msgid "Module `coio`"
msgstr "Модуль `coio`"

#: ../doc/dev_guide/reference_capi/coio.rst:9
msgid "READ event"
msgstr "событие чтения READ"

#: ../doc/dev_guide/reference_capi/coio.rst:13
msgid "WRITE event"
msgstr "событие записи WRITE"

#: ../doc/dev_guide/reference_capi/coio.rst:19
msgid "Wait until READ or WRITE event on socket (``fd``). Yields."
msgstr ""
"Ожидание события чтения или записи (READ / WRITE) на сокете (``fd``) с "
"передачей управления."

#: ../doc/dev_guide/reference_capi/coio.rst:0
msgid "Parameters"
msgstr "Параметры"

#: ../doc/dev_guide/reference_capi/coio.rst:21
#: ../doc/dev_guide/reference_capi/coio.rst:70
msgid "non-blocking socket file description"
msgstr "дескриптор файла сокета без блокировки"

#: ../doc/dev_guide/reference_capi/coio.rst:22
msgid ""
"requested events to wait. Combination of ``COIO_READ | COIO_WRITE`` bit "
"flags."
msgstr ""
"запрашиваемые события. Комбинация битовых флагов ``COIO_READ | COIO_WRITE``."

#: ../doc/dev_guide/reference_capi/coio.rst:24
msgid "timeout in seconds."
msgstr "время ожидания в секундах."

#: ../doc/dev_guide/reference_capi/coio.rst:0
msgid "Returns"
msgstr "Возвращает"

#: ../doc/dev_guide/reference_capi/coio.rst:26
msgid "0 - timeout"
msgstr "0 - время ожидания"

#: ../doc/dev_guide/reference_capi/coio.rst:27
msgid ""
">0 - returned events. Combination of ``TNT_IO_READ | TNT_IO_WRITE`` bit "
"flags."
msgstr ""
">0 - возвращаемые события. Комбинация битовых флагов ``TNT_IO_READ | "
"TNT_IO_WRITE``."

#: ../doc/dev_guide/reference_capi/coio.rst:33
msgid ""
"Create new eio task with specified function and arguments. Yield and wait "
"until the task is complete or a timeout occurs. This function may use the :"
"ref:`worker_pool_threads <cfg_basic-worker_pool_threads>` configuration "
"parameter."
msgstr ""
"Создание новой задачи ошибочного ввода-вывода (eio) с указанной функцией и "
"аргументами. Передает управление и ожидает окончания задачи или истечения "
"времени ожидания. Функция может использовать конфигурационный параметр :ref:"
"`worker_pool_threads <cfg_basic-worker_pool_threads>`."

#: ../doc/dev_guide/reference_capi/coio.rst:38
msgid ""
"To avoid double error checking, this function does not throw exceptions. In "
"most cases it is also necessary to check the return value of the called "
"function and perform necessary actions. If func sets errno, the errno is "
"preserved across the call."
msgstr ""
"Во избежание двойной проверки ошибок функция не выбрасывает исключения. В "
"большинстве случаев также необходимо проверять возвращаемое значение "
"вызванной функции и выполнить необходимые действия. Если функция определяет "
"номер ошибки errno, этот номер ошибки сохраняется в течение вызова."

#: ../doc/dev_guide/reference_capi/coio.rst:43
msgid "-1 and ``errno`` = ENOMEM if failed to create a task"
msgstr "-1 и ``errno`` = ENOMEM, если задача не была создана"

#: ../doc/dev_guide/reference_capi/coio.rst:44
msgid "the function return (``errno`` is preserved)."
msgstr "возврат функции (``errno`` сохраняется)."

#: ../doc/dev_guide/reference_capi/coio.rst:46
msgid "**Example:**"
msgstr "**Пример:**"

#: ../doc/dev_guide/reference_capi/coio.rst:48
msgid ""
"static ssize_t openfile_cb(va_list ap)\n"
"{\n"
"        const char* filename = va_arg(ap);\n"
"        int flags = va_arg(ap);\n"
"        return open(filename, flags);\n"
"}\n"
"\n"
"if (coio_call(openfile_cb, 0.10, \"/tmp/file\", 0) == -1)\n"
"    // handle errors.\n"
"..."
msgstr ""
"static ssize_t openfile_cb(va_list ap)\n"
" {\n"
"         const char* filename = va_arg(ap);\n"
"         int flags = va_arg(ap);\n"
"         return open(filename, flags);\n"
" }\n"
" \n"
" if (coio_call(openfile_cb, 0.10, \"/tmp/file\", 0) == -1)\n"
"     // обработка ошибок.\n"
" ..."

#: ../doc/dev_guide/reference_capi/coio.rst:63
msgid "Fiber-friendly version of :manpage:`getaddrinfo(3)`."
msgstr "Версия :manpage:`getaddrinfo(3)` для файбера."

#: ../doc/dev_guide/reference_capi/coio.rst:67
msgid ""
"Close the ``fd`` and wake any fiber blocked in :ref:`coio_wait() <c_api-coio-"
"coio_wait>` call on this ``fd``."
msgstr ""
"Закрытие ``fd`` и пробуждение любого файбера, заблокированного в вызове :ref:"
"`coio_wait() <c_api-coio-coio_wait>` на данном сокете ``fd``."

#: ../doc/dev_guide/reference_capi/coio.rst:72
msgid "the result of ``close(fd)``, see :manpage:`close(2)`"
msgstr "результат ``close(fd)``, см. :manpage:`close(2)`"
