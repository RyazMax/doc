# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-04 10:02+0000\n"
"PO-Revision-Date: 2019-12-06 16:16+0300\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
"Generated-By: Babel 2.7.0\n"

#: ../doc/reference/reference_lua/box_error.rst:3
msgid "Submodule `box.error`"
msgstr "Вложенный модуль `box.error`"

#: ../doc/reference/reference_lua/box_error.rst:9
msgid "Overview"
msgstr "Общие сведения"

#: ../doc/reference/reference_lua/box_error.rst:11
msgid ""
"The ``box.error`` function is for raising an error. The difference between "
"this function and Lua's built-in `error <https://www.lua.org/pil/8.3.html>`_ "
"function is that when the error reaches the client, its error code is "
"preserved. In contrast, a Lua error would always be presented to the client "
"as :errcode:`ER_PROC_LUA`."
msgstr ""
"Функция ``box.error`` предназначена для вызова ошибки. Разница между этой "
"функцией и встроенной Lua-функцией `error <https://www.lua.org/pil/8.3."
"html>`_ в том, что когда клиент получает ошибку, код ошибки сохраняется. В "
"отличие от этого, ошибки в Lua всегда передаются на клиент в виде :errcode:"
"`ER_PROC_LUA`."

#: ../doc/reference/reference_lua/box_error.rst:19
msgid "Index"
msgstr "Указатель"

#: ../doc/reference/reference_lua/box_error.rst:21
msgid "Below is a list of all ``box.error`` functions."
msgstr "Ниже приведен перечень всех функций модуля ``box.error``."

#: ../doc/reference/reference_lua/box_error.rst:29
msgid "Name"
msgstr "Имя"

#: ../doc/reference/reference_lua/box_error.rst:29
msgid "Use"
msgstr "Назначение"

#: ../doc/reference/reference_lua/box_error.rst:31
msgid ":ref:`box.error() <box_error-error>`"
msgstr ":ref:`box.error() <box_error-error>`"

#: ../doc/reference/reference_lua/box_error.rst:31
msgid "Throw an error"
msgstr "Вызов ошибки"

#: ../doc/reference/reference_lua/box_error.rst:34
msgid ":ref:`box.error.last() <box_error-last>`"
msgstr ":ref:`box.error.last() <box_error-last>`"

#: ../doc/reference/reference_lua/box_error.rst:34
msgid "Get a description of the last error"
msgstr "Получение описания последней ошибки"

#: ../doc/reference/reference_lua/box_error.rst:37
msgid ":ref:`box.error.clear() <box_error-clear>`"
msgstr ":ref:`box.error.clear() <box_error-clear>`"

#: ../doc/reference/reference_lua/box_error.rst:37
msgid "Clear the record of errors"
msgstr "Очистка записи об ошибках"

#: ../doc/reference/reference_lua/box_error.rst:40
msgid ":ref:`box.error.new() <box_error-new>`"
msgstr ":ref:`box.error.new() <box_error-new>`"

#: ../doc/reference/reference_lua/box_error.rst:40
msgid "Create an error but do not throw"
msgstr "Создание ошибки без выдачи"

#: ../doc/reference/reference_lua/box_error.rst:46
msgid ""
"When called with a Lua-table argument, the code and reason have any user-"
"desired values. The result will be those values."
msgstr ""
"При вызове с аргументом из Lua-таблицы значения параметров code и reason "
"будут любыми по желанию пользователя. Результатом будут эти значения."

#: ../doc/reference/reference_lua/box_error.rst:0
msgid "Parameters"
msgstr "Параметры"

#: ../doc/reference/reference_lua/box_error.rst:49
msgid "description of an error, defined by user"
msgstr "(строка) описание ошибки, задается пользователем"

#: ../doc/reference/reference_lua/box_error.rst:50
msgid "numeric code for this error, defined by user"
msgstr "(целое число) числовой код ошибки, задается пользователем"

#: ../doc/reference/reference_lua/box_error.rst:54
msgid ""
"When called without arguments, ``box.error()`` re-throws whatever the last "
"error was."
msgstr ""
"При вызове без аргументов ``box.error()`` повторно вызывает последнюю ошибку."

#: ../doc/reference/reference_lua/box_error.rst:61
msgid ""
"Emulate a request error, with text based on one of the pre-defined Tarantool "
"errors defined in the file `errcode.h <https://github.com/tarantool/"
"tarantool/blob/2.1/src/box/errcode.h>`_ in the source tree. Lua constants "
"which correspond to those Tarantool errors are defined as members of ``box."
"error``, for example ``box.error.NO_SUCH_USER == 45``."
msgstr ""
"Моделирование ошибки запроса с текстом на основе одной из ошибок "
"Tarantool'а, заданных в файле `errcode.h <https://github.com/tarantool/"
"tarantool/blob/2.1/src/box/errcode.h>`_ в исходном дереве. Lua-постоянные, "
"которые соответствуют этим ошибкам в Tarantool'е, определяются как элементы "
"``box.error``, например ``box.error.NO_SUCH_USER == 45``."

#: ../doc/reference/reference_lua/box_error.rst:67
#: ../doc/reference/reference_lua/box_error.rst:157
msgid "number of a pre-defined error"
msgstr "номер предварительно заданной ошибки"

#: ../doc/reference/reference_lua/box_error.rst:68
#: ../doc/reference/reference_lua/box_error.rst:158
msgid "part of the message which will accompany the error"
msgstr "часть сообщения, которое сопровождает ошибку"

#: ../doc/reference/reference_lua/box_error.rst:70
msgid "For example:"
msgstr "Пример:"

#: ../doc/reference/reference_lua/box_error.rst:72
msgid ""
"the ``NO_SUCH_USER`` message is \"``User '%s' is not found``\" -- it "
"includes one \"``%s``\" component which will be replaced with errtext. Thus "
"a call to ``box.error(box.error.NO_SUCH_USER, 'joe')`` or ``box.error(45, "
"'joe')`` will result in an error with the accompanying message \"``User "
"'joe' is not found``\"."
msgstr ""
"сообщение ``NO_SUCH_USER`` = \"``User '%s' is not found``\" (пользователь не "
"найден) -- оно включает в себя компонент \"``%s``\", который будет заменен "
"значением параметра errtext. Таким образом, вызов ``box.error(box.error."
"NO_SUCH_USER, 'joe')`` или ``box.error(45, 'joe')`` приведет к ошибке с "
"сообщением \"``User 'joe' is not found``\" (пользователь 'joe' не найден)."

#: ../doc/reference/reference_lua/box_error.rst:0
msgid "except"
msgstr "Исключение:"

#: ../doc/reference/reference_lua/box_error.rst:78
msgid "whatever is specified in errcode-number."
msgstr "то, что указано в номере errcode."

#: ../doc/reference/reference_lua/box_error.rst:80
#: ../doc/reference/reference_lua/box_error.rst:120
#: ../doc/reference/reference_lua/box_error.rst:160
msgid "**Example:**"
msgstr "**Пример:**"

#: ../doc/reference/reference_lua/box_error.rst:82
msgid ""
"tarantool> box.error{code = 555, reason = 'Arbitrary message'}\n"
"---\n"
"- error: Arbitrary message\n"
"...\n"
"tarantool> box.error()\n"
"---\n"
"- error: Arbitrary message\n"
"...\n"
"tarantool> box.error(box.error.FUNCTION_ACCESS_DENIED, 'A', 'B', 'C')\n"
"---\n"
"- error: A access denied for user 'B' to function 'C'\n"
"..."
msgstr ""
"tarantool> box.error{code = 555, reason = 'Arbitrary message'}\n"
"---\n"
"- error: Arbitrary message\n"
"...\n"
"tarantool> box.error()\n"
"---\n"
"- error: Arbitrary message\n"
"...\n"
"tarantool> box.error(box.error.FUNCTION_ACCESS_DENIED, 'A', 'B', 'C')\n"
"---\n"
"- error: A access denied for user 'B' to function 'C'\n"
"..."

#: ../doc/reference/reference_lua/box_error.rst:101
msgid ""
"Returns a description of the last error, as a Lua table with five members: "
"\"line\" (number) Tarantool source file line number, \"code\" (number) "
"error's number, \"type\", (string) error's C++ class, \"message\" (string) "
"error's message, \"file\" (string) Tarantool source file. Additionally, if "
"the error is a system error (for example due to a failure in socket or file "
"io), there may be a sixth member: \"errno\" (number) C standard error number."
msgstr ""
"Возвращает описание последней ошибки в виде Lua-таблицы с 5 элементами: "
"\"line\" (число) -- номер строки в исходном файле Tarantool'а, \"code"
"\" (число) -- номер ошибки, \"type\" (строка) -- C++ класс ошибки, \"message"
"\" (строка) -- сообщение об ошибке, \"file\" (строка) -- исходный файл "
"Tarantool'а. Кроме того, если ошибка является системной (например, по "
"причине ошибки в сокете или файловом вводы-выводе), может быть "
"дополнительный шестой элемент: \"errno\" (число) стандартный номер ошибки на "
"языке C."

#: ../doc/reference/reference_lua/box_error.rst:111
msgid "rtype: table"
msgstr "Тип возвращаемого значения: таблица"

#: ../doc/reference/reference_lua/box_error.rst:117
msgid ""
"Clears the record of errors, so functions like `box.error()` or `box.error."
"last()` will have no effect."
msgstr ""
"Очистка записи об ошибках, то есть функции `box.error()` или `box.error."
"last()` не сработают."

#: ../doc/reference/reference_lua/box_error.rst:122
msgid ""
"tarantool> box.error{code = 555, reason = 'Arbitrary message'}\n"
"---\n"
"- error: Arbitrary message\n"
"...\n"
"tarantool> box.schema.space.create('#')\n"
"---\n"
"- error: Invalid identifier '#' (expected letters, digits or an underscore)\n"
"...\n"
"tarantool> box.error.last()\n"
"---\n"
"- line: 278\n"
"  code: 70\n"
"  type: ClientError\n"
"  message: Invalid identifier '#' (expected letters, digits or an "
"underscore)\n"
"  file: /tmp/buildd/tarantool-1.7.0.252.g1654e31~precise/src/box/key_def.cc\n"
"...\n"
"tarantool> box.error.clear()\n"
"---\n"
"...\n"
"tarantool> box.error.last()\n"
"---\n"
"- null\n"
"..."
msgstr ""
"tarantool> box.error{code = 555, reason = 'Arbitrary message'}\n"
"---\n"
"- error: Arbitrary message\n"
"...\n"
"tarantool> box.schema.space.create('#')\n"
"---\n"
"- error: Invalid identifier '#' (expected letters, digits or an underscore)\n"
"...\n"
"tarantool> box.error.last()\n"
"---\n"
"- line: 278\n"
"  code: 70\n"
"  type: ClientError\n"
"  message: Invalid identifier '#' (expected letters, digits or an "
"underscore)\n"
"  file: /tmp/buildd/tarantool-1.7.0.252.g1654e31~precise/src/box/key_def.cc\n"
"...\n"
"tarantool> box.error.clear()\n"
"---\n"
"...\n"
"tarantool> box.error.last()\n"
"---\n"
"- null\n"
"..."

#: ../doc/reference/reference_lua/box_error.rst:152
msgid ""
"Create an error object, but do not throw. This is useful when error "
"information should be saved for later retrieval. The parameters are the same "
"as for :ref:`box.error() <box_error-error>`, see the description there."
msgstr ""
"Создание ошибки без выдачи. Используется, когда необходимо сохранить "
"информацию об ошибке для последующей выборки. Используются такие же "
"параметры, как в :ref:`box.error() <box_error-error>`, см. описание по "
"ссылке."

#: ../doc/reference/reference_lua/box_error.rst:162
msgid ""
"tarantool> e = box.error.new{code = 555, reason = 'Arbitrary message'}\n"
"---\n"
"...\n"
"tarantool> e:unpack()\n"
"---\n"
"- type: ClientError\n"
"  code: 555\n"
"  message: Arbitrary message\n"
"  trace:\n"
"  - file: '[string \"e = box.error.new{code = 555, reason = ''Arbit...\"]'\n"
"    line: 1\n"
"..."
msgstr ""
"tarantool> e = box.error.new{code = 555, reason = 'Arbitrary message'}\n"
"---\n"
"...\n"
"tarantool> e:unpack()\n"
"---\n"
"- type: ClientError\n"
"  code: 555\n"
"  message: Arbitrary message\n"
"  trace:\n"
"  - file: '[string \"e = box.error.new{code = 555, reason = ''Arbit...\"]'\n"
"    line: 1\n"
"..."
