# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-04 10:02+0000\n"
"PO-Revision-Date: 2019-12-06 16:16+0300\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
"Generated-By: Babel 2.7.0\n"

#: ../doc/reference/reference_lua/decimal.rst:5
#, fuzzy
msgid "Module `decimal`"
msgstr "Модуль `yaml`"

#: ../doc/reference/reference_lua/decimal.rst:9
msgid ""
"The ``decimal`` module has functions for working with exact numbers. This is "
"important when numbers are large or even the slighest inaccuracy is "
"unacceptable. For example Lua calculates ``0.16666666666667 * 6`` with "
"floating-point so the result is 1. But with the decimal module (using "
"``decimal.new`` to convert the number to decimal type) ``decimal."
"new('0.16666666666667') * 6`` is 1.00000000000002."
msgstr ""

#: ../doc/reference/reference_lua/decimal.rst:18
msgid ""
"To construct a decimal number, bring in the module with "
"``require('decimal')`` and then use ``decimal.new(n)`` or any function in "
"the decimal module: :ref:`abs(n) <decimal-abs>` :ref:`exp(n) <decimal-exp>` :"
"ref:`ln(n) <decimal-ln>` :ref:`log10(n) <decimal-log10>` :ref:`new(n) "
"<decimal-new>` :ref:`precision(n) <decimal-precision>` :ref:`rescale(decimal-"
"number, new-scale) <decimal-rescale>` :ref:`scale(n) <decimal-scale>` :ref:"
"`sqrt(n) <decimal-sqrt>` :ref:`trim(decimal-number) <decimal-trim>`, where n "
"can be a string or a non-decimal number or a decimal number. If it is a "
"string or a non-decimal number, Tarantool converts it to a decimal number "
"before working with it. It is best to construct from strings, and to convert "
"back to strings after calculations, because Lua numbers have only 15 digits "
"of precision. Decimal numbers have 38 digits of precision, that is, the "
"total number of digits before and after the decimal point can be 38. "
"Tarantool supports the usual arithmetic and comparison operators + - * / % ^ "
"< > <= >= ~= ==. If an operation has both decimal and non-decimal operands, "
"then the non-decimal operand is converted to decimal before the operation "
"happens."
msgstr ""

#: ../doc/reference/reference_lua/decimal.rst:46
msgid "Use ``tostring(decimal-number)`` to convert back to a string."
msgstr ""

#: ../doc/reference/reference_lua/decimal.rst:48
msgid ""
"A decimal operation will fail if overflow happens (when a number is greater "
"than 10^38 - 1 or less than -10^38 - 1). A decimal operation will fail if "
"arithmetic is impossible (such as division by zero or square root of minus "
"1). A decimal operation will not fail if rounding of post-decimal digits is "
"necessary to get 38-digit precision."
msgstr ""

#: ../doc/reference/reference_lua/decimal.rst:59
msgid ""
"Returns absolute value of a decimal number. For example if a is -1 then "
"``decimal.abs(a)`` returns 1."
msgstr ""

#: ../doc/reference/reference_lua/decimal.rst:66
msgid ""
"Returns *e* raised to the power of a decimal number. For example if a is 1 "
"then ``decimal.exp(a)`` returns 2.7182818284590452353602874713526624978. "
"Compare ``math.exp(1)`` from the `Lua math library <https://www.lua.org/"
"pil/18.html>`_, which returns 2.718281828459."
msgstr ""

#: ../doc/reference/reference_lua/decimal.rst:77
msgid ""
"Returns natural logarithm of a decimal number. For example if a is 1 then "
"``decimal.ln(a)`` returns 0."
msgstr ""

#: ../doc/reference/reference_lua/decimal.rst:84
msgid ""
"Returns base-10 logarithm of a decimal number. For example if a is 100 then "
"``decimal.log10(a)`` returns 2."
msgstr ""

#: ../doc/reference/reference_lua/decimal.rst:91
msgid ""
"Returns the value of the input as a decimal number. For example if a is 1E-1 "
"then ``decimal.new(a)`` returns 0.1."
msgstr ""

#: ../doc/reference/reference_lua/decimal.rst:99
msgid ""
"Returns the number of digits in a decimal number. For example if a is "
"123.4560 then ``decimal.precision(a)`` returns 7."
msgstr ""

#: ../doc/reference/reference_lua/decimal.rst:106
msgid ""
"Returns the number after possible rounding or padding. If the number of post-"
"decimal digits is greater than new-scale, then rounding occurs. The rounding "
"rule is: round half away from zero. If the number of post-decimal digits is "
"less than new-scale, then padding of zeros occurs. For example if a is "
"-123.4550 then ``decimal.rescale(a, 2)`` returns -123.46, and ``decimal."
"rescale(a, 5)`` returns -123.45500."
msgstr ""

#: ../doc/reference/reference_lua/decimal.rst:118
msgid ""
"Returns the number of post-decimal digits in a decimal number. For example "
"if a is 123.4560 then ``decimal.scale(a)`` returns 4."
msgstr ""

#: ../doc/reference/reference_lua/decimal.rst:125
msgid ""
"Returns the square root of a decimal number. For example if a is 2 then "
"``decimal.sqrt(a)`` returns 1.4142135623730950488016887242096980786."
msgstr ""

#: ../doc/reference/reference_lua/decimal.rst:133
msgid ""
"Returns a decimal number after possible removing of trailing post-decimal "
"zeros. For example if a is 2.20200 then ``decimal.trim(a)`` returns 2.202."
msgstr ""
