# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-03 19:29+0000\n"
"PO-Revision-Date: 2019-12-06 16:16+0300\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
"Generated-By: Babel 2.7.0\n"

#: ../doc/reference/reference_lua/other.rst:3
#, fuzzy
msgid "Other package components"
msgstr "Получение таблицы URI-компонентов"

#: ../doc/reference/reference_lua/other.rst:5
msgid ""
"All the Tarantool modules are, at some level, inside a package which, "
"appropriately, is named ``package``. There are also miscellaneous functions "
"and variables which are outside all modules."
msgstr ""

#: ../doc/reference/reference_lua/other.rst:15
msgid "Name"
msgstr "Имя"

#: ../doc/reference/reference_lua/other.rst:15
msgid "Use"
msgstr "Назначение"

#: ../doc/reference/reference_lua/other.rst:17
msgid ":ref:`tonumber64() <other-tonumber64>`"
msgstr ":ref:`tonumber64() <other-tonumber64>`"

#: ../doc/reference/reference_lua/other.rst:17
msgid "Convert a string or a Lua number to a 64-bit integer"
msgstr "Конвертация строки или Lua-числа в 64-битное целое число"

#: ../doc/reference/reference_lua/other.rst:20
msgid ":ref:`dostring() <other-dostring>`"
msgstr ":ref:`dostring() <other-dostring>`"

#: ../doc/reference/reference_lua/other.rst:20
msgid "Parse and execute an arbitrary chunk of Lua code"
msgstr "Анализ и выполнение произвольного Lua-кода"

#: ../doc/reference/reference_lua/other.rst:23
#, fuzzy
msgid ":ref:`package.path <other-package_path>`"
msgstr ":ref:`pickle.pack() <pickle-pack>`"

#: ../doc/reference/reference_lua/other.rst:23
msgid "Where Tarantool looks for Lua additions"
msgstr ""

#: ../doc/reference/reference_lua/other.rst:26
msgid ":ref:`package.cpath <other-package_cpath>`"
msgstr ""

#: ../doc/reference/reference_lua/other.rst:26
msgid "Where Tarantool looks for C additions"
msgstr ""

#: ../doc/reference/reference_lua/other.rst:29
#, fuzzy
msgid ":ref:`package.loaded <other-package_loaded>`"
msgstr ":ref:`msgpack.encode() <msgpack-encode>`"

#: ../doc/reference/reference_lua/other.rst:29
msgid "What Tarantool has already looked for and found"
msgstr ""

#: ../doc/reference/reference_lua/other.rst:32
msgid ":ref:`package.setsearchroot <other-package_setsearchroot>`"
msgstr ""

#: ../doc/reference/reference_lua/other.rst:32
msgid "Set the root path for a directory search"
msgstr ""

#: ../doc/reference/reference_lua/other.rst:35
msgid ":ref:`package.searchroot <other-package_searchroot>`"
msgstr ""

#: ../doc/reference/reference_lua/other.rst:35
msgid "Get the root path for a directory search"
msgstr ""

#: ../doc/reference/reference_lua/other.rst:44
msgid ""
"Convert a string or a Lua number to a 64-bit integer. The input value can be "
"expressed in decimal, binary (for example 0b1010), or hexadecimal (for "
"example -0xffff). The result can be used in arithmetic, and the arithmetic "
"will be 64-bit integer arithmetic rather than floating-point arithmetic. "
"(Operations on an unconverted Lua number use floating-point arithmetic.) The "
"``tonumber64()`` function is added by Tarantool; the name is global."
msgstr ""
"Конвертация строки или Lua-числа в 64-битное целое число. Входное значение "
"может быть выражено десятичным, двоичным (например, 0b1010) или "
"шестнадцатеричным (например, -0xffff) числом. Результат может использоваться "
"в арифметике, причем скорее в 64-битной целочисленной арифметике, а не в "
"арифметике в системе с плавающей запятой. (Операции с неконвертированными "
"Lua-числами выполняются в арифметике в системе с плавающей запятой.) Функция "
"``tonumber64()`` в Tarantool'е является глобальной."

#: ../doc/reference/reference_lua/other.rst:52
#: ../doc/reference/reference_lua/other.rst:92
msgid "**Example:**"
msgstr "**Пример:**"

#: ../doc/reference/reference_lua/other.rst:54
msgid ""
"tarantool> type(123456789012345), type(tonumber64(123456789012345))\n"
"---\n"
"- number\n"
"- number\n"
"...\n"
"tarantool> i = tonumber64('1000000000')\n"
"---\n"
"...\n"
"tarantool> type(i), i / 2, i - 2, i * 2, i + 2, i % 2, i ^ 2\n"
"---\n"
"- number\n"
"- 500000000\n"
"- 999999998\n"
"- 2000000000\n"
"- 1000000002\n"
"- 0\n"
"- 1000000000000000000\n"
"..."
msgstr ""
"tarantool> type(123456789012345), type(tonumber64(123456789012345))\n"
"---\n"
"- number\n"
"- number\n"
"...\n"
"tarantool> i = tonumber64('1000000000')\n"
"---\n"
"...\n"
"tarantool> type(i), i / 2, i - 2, i * 2, i + 2, i % 2, i ^ 2\n"
"---\n"
"- number\n"
"- 500000000\n"
"- 999999998\n"
"- 2000000000\n"
"- 1000000002\n"
"- 0\n"
"- 1000000000000000000\n"
"..."

#: ../doc/reference/reference_lua/other.rst:79
msgid ""
"Parse and execute an arbitrary chunk of Lua code. This function is mainly "
"useful to define and run Lua code without having to introduce changes to the "
"global Lua environment."
msgstr ""
"Анализ и выполнение произвольного Lua-кода. Данная функция используется "
"преимущественно для определения и выполнения Lua-кода без необходимости "
"внесения изменений в глобальное Lua-окружение."

#: ../doc/reference/reference_lua/other.rst:0
msgid "Parameters"
msgstr "Параметры"

#: ../doc/reference/reference_lua/other.rst:83
msgid "Lua code"
msgstr "Lua-код"

#: ../doc/reference/reference_lua/other.rst:84
msgid ""
"zero or more scalar values which will be appended to, or substitute for, "
"items in the Lua chunk."
msgstr ""
"ноль или другие скалярные значения, которые заменяются или к которым "
"прибавляются значения."

#: ../doc/reference/reference_lua/other.rst:0
msgid "return"
msgstr "возвращает"

#: ../doc/reference/reference_lua/other.rst:87
msgid "whatever is returned by the Lua code chunk."
msgstr "то, что возвращает Lua-код."

#: ../doc/reference/reference_lua/other.rst:89
msgid ""
"Possible errors: If there is a compilation error, it is raised as a Lua "
"error."
msgstr "Возможные ошибки: Ошибка компиляции появляется как Lua-ошибка."

#: ../doc/reference/reference_lua/other.rst:94
msgid ""
"tarantool> dostring('abc')\n"
"---\n"
"error: '[string \"abc\"]:1: ''='' expected near ''<eof>'''\n"
"...\n"
"tarantool> dostring('return 1')\n"
"---\n"
"- 1\n"
"...\n"
"tarantool> dostring('return ...', 'hello', 'world')\n"
"---\n"
"- hello\n"
"- world\n"
"...\n"
"tarantool> dostring([[\n"
"         >   local f = function(key)\n"
"         >     local t = box.space.tester:select{key}\n"
"         >     if t ~= nil then\n"
"         >       return t[1]\n"
"         >     else\n"
"         >       return nil\n"
"         >     end\n"
"         >   end\n"
"         >   return f(...)]], 1)\n"
"---\n"
"- null\n"
"..."
msgstr ""
"tarantool> dostring('abc')\n"
"---\n"
"error: '[string \"abc\"]:1: ''='' expected near ''<eof>'''\n"
"...\n"
"tarantool> dostring('return 1')\n"
"---\n"
"- 1\n"
"...\n"
"tarantool> dostring('return ...', 'hello', 'world')\n"
"---\n"
"- hello\n"
"- world\n"
"...\n"
"tarantool> dostring([[\n"
"         >   local f = function(key)\n"
"         >     local t = box.space.tester:select{key}\n"
"         >     if t ~= nil then\n"
"         >       return t[1]\n"
"         >     else\n"
"         >       return nil\n"
"         >     end\n"
"         >   end\n"
"         >   return f(...)]], 1)\n"
"---\n"
"- null\n"
"..."

#: ../doc/reference/reference_lua/other.rst:127
msgid ""
"This is a string that Tarantool uses to search for Lua modules, especially "
"imporant for ``require()``. See :ref:`Modules, rocks and applications "
"<app_server-modules>`."
msgstr ""

#: ../doc/reference/reference_lua/other.rst:135
msgid ""
"This is a string that Tarantool uses to search for C modules, especially "
"imporant for ``require()``. See :ref:`Modules, rocks and applications "
"<app_server-modules>`."
msgstr ""

#: ../doc/reference/reference_lua/other.rst:143
msgid ""
"This is a string that shows what Lua or C modules Tarantool has loaded, so "
"that their functions and members are available. Initially it has all the pre-"
"loaded modules, which don't need ``require()``."
msgstr ""

#: ../doc/reference/reference_lua/other.rst:152
msgid ""
"Set the search root. The search root is the root directory from which "
"dependencies are loaded."
msgstr ""

#: ../doc/reference/reference_lua/other.rst:155
#, fuzzy
msgid "the path. Default = current directory."
msgstr "Получение имени текущей рабочей директории"

#: ../doc/reference/reference_lua/other.rst:157
msgid ""
"The search-root string must contain a relative or absolute path. If it is a "
"relative path, then it will be expanded to an absolute path. If search-root "
"is omitted, or is box.NULL, then the search root is reset to the current "
"directory, which is found with debug.sourcedir()."
msgstr ""

#: ../doc/reference/reference_lua/other.rst:163
msgid "Example:"
msgstr "Пример:"

#: ../doc/reference/reference_lua/other.rst:165
msgid ""
"Suppose that a Lua file ``myapp/init.lua`` is the project root. |br| Suppose "
"the current path is ``/home/tara``. |br| Add this as the first line of "
"``myapp/init.lua``: |br| :code:`package.setsearchroot()` |br| Start the "
"project with |br| :code:`$ tarantool myapp/init.lua` |br| The search root "
"will be the default, made absolute: ``/home/tara/myapp``. Within the Lua "
"application all dependencies will be searched relative to ``/home/tara/"
"myapp``."
msgstr ""

#: ../doc/reference/reference_lua/other.rst:179
msgid ""
"Return a string with the current search root. After ``package."
"setsearchroot('/home')`` the returned string will be ``/home'``."
msgstr ""
