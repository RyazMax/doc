# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-03 19:29+0000\n"
"PO-Revision-Date: 2019-12-06 16:16+0300\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
"Generated-By: Babel 2.7.0\n"

#: ../doc/reference/reference_lua/yaml.rst:5
msgid "Module `yaml`"
msgstr "Модуль `yaml`"

#: ../doc/reference/reference_lua/yaml.rst:9
msgid "Overview"
msgstr "Общие сведения"

#: ../doc/reference/reference_lua/yaml.rst:11
msgid ""
"The ``yaml`` module takes strings in YAML_ format and decodes them, or takes "
"a series of non-YAML values and encodes them."
msgstr ""
"Модуль ``yaml`` берет строки в формате YAML_ и декодирует их или берет ряд "
"значений в ином формате и кодирует их в формат YAML."

#: ../doc/reference/reference_lua/yaml.rst:16
msgid "Index"
msgstr "Указатель"

#: ../doc/reference/reference_lua/yaml.rst:18
msgid "Below is a list of all ``yaml`` functions and members."
msgstr "Ниже приведен перечень всех функций и элементов модуля ``yaml``."

#: ../doc/reference/reference_lua/yaml.rst:26
msgid "Name"
msgstr "Имя"

#: ../doc/reference/reference_lua/yaml.rst:26
msgid "Use"
msgstr "Назначение"

#: ../doc/reference/reference_lua/yaml.rst:28
msgid ":ref:`yaml.encode() <yaml-encode>`"
msgstr ":ref:`yaml.encode() <yaml-encode>`"

#: ../doc/reference/reference_lua/yaml.rst:28
msgid "Convert a Lua object to a YAML string"
msgstr "Конвертация Lua-объекта в YAML-строку"

#: ../doc/reference/reference_lua/yaml.rst:31
msgid ":ref:`yaml.decode() <yaml-decode>`"
msgstr ":ref:`yaml.decode() <yaml-decode>`"

#: ../doc/reference/reference_lua/yaml.rst:31
msgid "Convert a YAML string to a Lua object"
msgstr "Конвертация YAML-строки в Lua-объект"

#: ../doc/reference/reference_lua/yaml.rst:34
msgid ":ref:`yaml.NULL <yaml-null>`"
msgstr ":ref:`yaml.NULL <yaml-null>`"

#: ../doc/reference/reference_lua/yaml.rst:34
msgid "Analog of Lua's \"nil\""
msgstr "Аналог \"nil\" в языке Lua "

#: ../doc/reference/reference_lua/yaml.rst:44
msgid "Convert a Lua object to a YAML string."
msgstr "Конвертация Lua-объекта в YAML-строку."

#: ../doc/reference/reference_lua/yaml.rst:0
msgid "Parameters"
msgstr "Параметры"

#: ../doc/reference/reference_lua/yaml.rst:46
msgid "either a scalar value or a Lua table value."
msgstr "скалярное значение или значение из Lua-таблицы."

#: ../doc/reference/reference_lua/yaml.rst:0
msgid "return"
msgstr "возвращает"

#: ../doc/reference/reference_lua/yaml.rst:47
msgid "the original value reformatted as a YAML string."
msgstr "оригинальное значение, преобразованное в YAML-строку."

#: ../doc/reference/reference_lua/yaml.rst:0
msgid "rtype"
msgstr "тип возвращаемого значения"

#: ../doc/reference/reference_lua/yaml.rst:48
msgid "string"
msgstr "строка"

#: ../doc/reference/reference_lua/yaml.rst:54
msgid "Convert a YAML string to a Lua object."
msgstr "Конвертация YAML-строки в Lua-объект."

#: ../doc/reference/reference_lua/yaml.rst:56
msgid "a string formatted as YAML."
msgstr "строка в формате YAML."

#: ../doc/reference/reference_lua/yaml.rst:57
msgid "the original contents formatted as a Lua table."
msgstr "оригинальное содержание в формате Lua-таблицы."

#: ../doc/reference/reference_lua/yaml.rst:58
msgid "table"
msgstr "таблица"

#: ../doc/reference/reference_lua/yaml.rst:64
msgid ""
"A value comparable to Lua \"nil\" which may be useful as a placeholder in a "
"tuple."
msgstr ""
"Значение, сопоставимое с нулевым значением \"nil\" в языке Lua, которое "
"можно использовать в качестве объекта-заполнителя в кортеже."

#: ../doc/reference/reference_lua/yaml.rst:68
msgid "Example"
msgstr "Пример"

#: ../doc/reference/reference_lua/yaml.rst:70
msgid ""
"tarantool> yaml = require('yaml')\n"
"---\n"
"...\n"
"tarantool> y = yaml.encode({'a', 1, 'b', 2})\n"
"---\n"
"...\n"
"tarantool> z = yaml.decode(y)\n"
"---\n"
"...\n"
"tarantool> z[1], z[2], z[3], z[4]\n"
"---\n"
"- a\n"
"- 1\n"
"- b\n"
"- 2\n"
"...\n"
"tarantool> if yaml.NULL == nil then print('hi') end\n"
"hi\n"
"---\n"
"..."
msgstr ""
"tarantool> yaml = require('yaml')\n"
"---\n"
"...\n"
"tarantool> y = yaml.encode({'a', 1, 'b', 2})\n"
"---\n"
"...\n"
"tarantool> z = yaml.decode(y)\n"
"---\n"
"...\n"
"tarantool> z[1], z[2], z[3], z[4]\n"
"---\n"
"- a\n"
"- 1\n"
"- b\n"
"- 2\n"
"...\n"
"tarantool> if yaml.NULL == nil then print('hi') end\n"
"hi\n"
"---\n"
"..."

#: ../doc/reference/reference_lua/yaml.rst:93
msgid ""
"The `YAML collection style <http://yaml.org/spec/1.1/#id930798>`_ can be "
"specified with ``__serialize``:"
msgstr ""
"`Набор YAML-стилей <http://yaml.org/spec/1.1/#id930798>`_ можно указать с "
"помощью ``__serialize``:"

#: ../doc/reference/reference_lua/yaml.rst:96
msgid "``__serialize=\"sequence\"`` for a Block Sequence array,"
msgstr "``__serialize=\"sequence\"`` для массива последовательности блоков,"

#: ../doc/reference/reference_lua/yaml.rst:97
msgid "``__serialize=\"seq\"`` for a Flow Sequence array,"
msgstr "``__serialize=\"seq\"`` для массива последовательности потоков,"

#: ../doc/reference/reference_lua/yaml.rst:98
msgid "``__serialize=\"mapping\"`` for a Block Mapping map,"
msgstr ""
"``__serialize=\"mapping\"`` для ассоциативного массива последовательности "
"блоков,"

#: ../doc/reference/reference_lua/yaml.rst:99
msgid "``__serialize=\"map\"`` for a Flow Mapping map."
msgstr ""
"``__serialize=\"map\"`` для ассоциативного массива последовательности "
"потоков."

#: ../doc/reference/reference_lua/yaml.rst:101
msgid ""
"Serializing 'A' and 'B' with different ``__serialize`` values causes "
"different results:"
msgstr ""
"Сериализация 'A' и' B' различными значениями ``__serialize`` приводит к "
"различным результатам:"

#: ../doc/reference/reference_lua/yaml.rst:104
msgid ""
"tarantool> yaml = require('yaml')\n"
"---\n"
"...\n"
"tarantool> yaml.encode(setmetatable({'A', 'B'}, { __serialize=\"sequence"
"\"}))\n"
"---\n"
"- |\n"
"  ---\n"
"  - A\n"
"  - B\n"
"  ...\n"
"...\n"
"tarantool> yaml.encode(setmetatable({'A', 'B'}, { __serialize=\"seq\"}))\n"
"---\n"
"- |\n"
"  ---\n"
"  ['A', 'B']\n"
"  ...\n"
"...\n"
"tarantool> yaml.encode({setmetatable({f1 = 'A', f2 = 'B'}, { __serialize="
"\"map\"})})\n"
"---\n"
"- |\n"
"  ---\n"
"  - {'f2': 'B', 'f1': 'A'}\n"
"  ...\n"
"...\n"
"tarantool> yaml.encode({setmetatable({f1 = 'A', f2 = 'B'}, { __serialize="
"\"mapping\"})})\n"
"---\n"
"- |\n"
"  ---\n"
"  - f2: B\n"
"    f1: A\n"
"  ...\n"
"..."
msgstr ""
"tarantool> yaml = require('yaml')\n"
"---\n"
"...\n"
"tarantool> yaml.encode(setmetatable({'A', 'B'}, { __serialize=\"sequence"
"\"}))\n"
"---\n"
"- |\n"
"  ---\n"
"  - A\n"
"  - B\n"
"  ...\n"
"...\n"
"tarantool> yaml.encode(setmetatable({'A', 'B'}, { __serialize=\"seq\"}))\n"
"---\n"
"- |\n"
"  ---\n"
"  ['A', 'B']\n"
"  ...\n"
"...\n"
"tarantool> yaml.encode({setmetatable({f1 = 'A', f2 = 'B'}, { __serialize="
"\"map\"})})\n"
"---\n"
"- |\n"
"  ---\n"
"  - {'f2': 'B', 'f1': 'A'}\n"
"  ...\n"
"...\n"
"tarantool> yaml.encode({setmetatable({f1 = 'A', f2 = 'B'}, { __serialize="
"\"mapping\"})})\n"
"---\n"
"- |\n"
"  ---\n"
"  - f2: B\n"
"    f1: A\n"
"  ...\n"
"..."

#: ../doc/reference/reference_lua/yaml.rst:140
msgid ""
"Also, some YAML configuration settings for encoding can be changed, in the "
"same way that they can be changed for :ref:`JSON <json-module_cfg>`."
msgstr ""
"Кроме того, некоторые параметры конфигурации YAML для кодировки можно "
"изменить так же, как и для :ref:`JSON <json-module_cfg>`."
