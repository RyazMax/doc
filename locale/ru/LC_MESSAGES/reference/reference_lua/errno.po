# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-03 19:10+0000\n"
"PO-Revision-Date: 2019-12-06 16:16+0300\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"Generated-By: Babel 2.7.0\n"
"X-Generator: Poedit 2.2.4\n"

#: ../doc/reference/reference_lua/errno.rst:5
msgid "Module `errno`"
msgstr "Модуль `errno`"

#: ../doc/reference/reference_lua/errno.rst:11
msgid "Overview"
msgstr "Общие сведения"

#: ../doc/reference/reference_lua/errno.rst:13
msgid ""
"The ``errno`` module is typically used within a function or within a Lua "
"program, in association with a module whose functions can return operating-"
"system errors, such as :ref:`fio <fio-module>`."
msgstr ""
"Модуль ``errno``, как правило, используется внутри функции или в рамках Lua-"
"программы совместно с модулем, функции которого могут возвращать ошибки ОС, "
"например :ref:`fio <fio-module>`."

#: ../doc/reference/reference_lua/errno.rst:19
msgid "Index"
msgstr "Указатель"

#: ../doc/reference/reference_lua/errno.rst:21
msgid "Below is a list of all ``errno`` functions."
msgstr "Ниже приведен перечень всех функций модуля ``errno``."

#: ../doc/reference/reference_lua/errno.rst:29
msgid "Name"
msgstr "Имя"

#: ../doc/reference/reference_lua/errno.rst:29
msgid "Use"
msgstr "Назначение"

#: ../doc/reference/reference_lua/errno.rst:31
msgid ":ref:`errno() <errno-errno>`"
msgstr ":ref:`errno() <errno-errno>`"

#: ../doc/reference/reference_lua/errno.rst:31
msgid "Get an error number for the last OS-related function"
msgstr "Получение номера ошибки для последней функции, связанной с ОС"

#: ../doc/reference/reference_lua/errno.rst:34
msgid ":ref:`errno.strerror() <errno-strerror>`"
msgstr ":ref:`errno.strerror() <errno-strerror>`"

#: ../doc/reference/reference_lua/errno.rst:34
msgid "Get an error message for the corresponding error number"
msgstr "Получение сообщения об ошибке для соответствующего номера ошибки"

#: ../doc/reference/reference_lua/errno.rst:42
msgid ""
"Return an error number for the last operating-system-related function, or 0. "
"To invoke it, simply say ``errno()``, without the module name."
msgstr ""
"Возврат номера ошибки для последней функции, связанной с операционной "
"системой, или 0. Чтобы вызвать функцию, просто введите команду ``errno()`` "
"без названия модуля."

#: ../doc/reference/reference_lua/errno.rst:0
msgid "rtype"
msgstr "тип возвращаемого значения"

#: ../doc/reference/reference_lua/errno.rst:45
msgid "integer"
msgstr "целое число"

#: ../doc/reference/reference_lua/errno.rst:51
msgid ""
"Return a string, given an error number. The string will contain the text of "
"the conventional error message for the current operating system. If ``code`` "
"is not supplied, the error message will be for the last operating-system-"
"related function, or 0."
msgstr ""
"Возврат строки в ответ на номер ошибки. Строка будет содержать текст "
"традиционного сообщения об ошибке для текущей операционной системы. Если не "
"указан код ``code``, то будет выведено сообщение об ошибке для последней "
"функции, связанной с операционной системой, или 0."

#: ../doc/reference/reference_lua/errno.rst:0
msgid "Parameters"
msgstr "Параметры"

#: ../doc/reference/reference_lua/errno.rst:56
msgid "number of an operating-system error"
msgstr "номер ошибки в операционной системе"

#: ../doc/reference/reference_lua/errno.rst:58
msgid "string"
msgstr "строка"

#: ../doc/reference/reference_lua/errno.rst:60
msgid "**Example:**"
msgstr "**Пример:**"

#: ../doc/reference/reference_lua/errno.rst:62
msgid ""
"This function displays the result of a call to :ref:`fio.open() <fio-open>` "
"which causes error 2 (``errno.ENOENT``). The display includes the error "
"number, the associated error string, and the error name."
msgstr ""
"Данная функция отображает результат вызова :ref:`fio.open() <fio-open>`, "
"который вызывает ошибку 2 (``errno.ENOENT``). В результат включен номер "
"ошибки, связанная с ним строка сообщения об ошибке и название ошибки."

#: ../doc/reference/reference_lua/errno.rst:66
msgid ""
"tarantool> function f()\n"
"         >   local fio = require('fio')\n"
"         >   local errno = require('errno')\n"
"         >   fio.open('no_such_file')\n"
"         >   print('errno() = ' .. errno())\n"
"         >   print('errno.strerror() = ' .. errno.strerror())\n"
"         >   local t = getmetatable(errno).__index\n"
"         >   for k, v in pairs(t) do\n"
"         >     if v == errno() then\n"
"         >       print('errno() constant = ' .. k)\n"
"         >     end\n"
"         >   end\n"
"         > end\n"
"---\n"
"...\n"
"\n"
"tarantool> f()\n"
"errno() = 2\n"
"errno.strerror() = No such file or directory\n"
"errno() constant = ENOENT\n"
"---\n"
"..."
msgstr ""
"tarantool> function f()\n"
"         >   local fio = require('fio')\n"
"         >   local errno = require('errno')\n"
"         >   fio.open('no_such_file')\n"
"         >   print('errno() = ' .. errno())\n"
"         >   print('errno.strerror() = ' .. errno.strerror())\n"
"         >   local t = getmetatable(errno).__index\n"
"         >   for k, v in pairs(t) do\n"
"         >     if v == errno() then\n"
"         >       print('errno() constant = ' .. k)\n"
"         >     end\n"
"         >   end\n"
"         > end\n"
"---\n"
"...\n"
"\n"
"tarantool> f()\n"
"errno() = 2\n"
"errno.strerror() = No such file or directory\n"
"errno() constant = ENOENT\n"
"---\n"
"..."

#: ../doc/reference/reference_lua/errno.rst:91
msgid ""
"To see all possible error names stored in the ``errno`` metatable, say "
"``getmetatable(errno)`` (output abridged):"
msgstr ""
"Чтобы увидеть все возможные названия ошибок, которые хранятся в метатаблице "
"``errno``, введите команду ``getmetatable(errno)`` (выводятся сокращенно):"

#: ../doc/reference/reference_lua/errno.rst:94
msgid ""
"tarantool> getmetatable(errno)\n"
"---\n"
"- __newindex: 'function: 0x41666a38'\n"
"  __call: 'function: 0x41666890'\n"
"  __index:\n"
"  ENOLINK: 67\n"
"  EMSGSIZE: 90\n"
"  EOVERFLOW: 75\n"
"  ENOTCONN: 107\n"
"  EFAULT: 14\n"
"  EOPNOTSUPP: 95\n"
"  EEXIST: 17\n"
"  ENOSR: 63\n"
"  ENOTSOCK: 88\n"
"  EDESTADDRREQ: 89\n"
"  <...>\n"
"..."
msgstr ""
"tarantool> getmetatable(errno)\n"
"---\n"
"- __newindex: 'function: 0x41666a38'\n"
"  __call: 'function: 0x41666890'\n"
"  __index:\n"
"  ENOLINK: 67\n"
"  EMSGSIZE: 90\n"
"  EOVERFLOW: 75\n"
"  ENOTCONN: 107\n"
"  EFAULT: 14\n"
"  EOPNOTSUPP: 95\n"
"  EEXIST: 17\n"
"  ENOSR: 63\n"
"  ENOTSOCK: 88\n"
"  EDESTADDRREQ: 89\n"
"  <...>\n"
"..."
