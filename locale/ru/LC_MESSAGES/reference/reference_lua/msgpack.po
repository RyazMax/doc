# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-04 10:02+0000\n"
"PO-Revision-Date: 2019-12-06 16:16+0300\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
"Generated-By: Babel 2.7.0\n"

#: ../doc/reference/reference_lua/msgpack.rst:5
msgid "Module `msgpack`"
msgstr "Модуль `msgpack`"

#: ../doc/reference/reference_lua/msgpack.rst:9
msgid "Overview"
msgstr "Общие сведения"

#: ../doc/reference/reference_lua/msgpack.rst:11
msgid ""
"The ``msgpack`` module takes strings in MsgPack_ format and decodes them, or "
"takes a series of non-MsgPack values and encodes them. Tarantool makes heavy "
"internal use of MsgPack because tuples in Tarantool are :ref:`stored <index-"
"box_lua-vs-msgpack>` as MsgPack arrays."
msgstr ""
"Модуль ``msgpack`` берет строки в формате MsgPack_ и декодирует их или берет "
"ряд значений в ином формате и кодирует их в формат MsgPack. MsgPack "
"интенсивно используется в Tarantool'е, поскольку кортежи :ref:`хранятся "
"<index-box_lua-vs-msgpack>` в виде массивов в формате MsgPack."

#: ../doc/reference/reference_lua/msgpack.rst:18
msgid "Index"
msgstr "Указатель"

#: ../doc/reference/reference_lua/msgpack.rst:20
msgid "Below is a list of all ``msgpack`` functions and members."
msgstr "Ниже приведен перечень всех функций и элементов модуля ``msgpack``."

#: ../doc/reference/reference_lua/msgpack.rst:28
msgid "Name"
msgstr "Имя"

#: ../doc/reference/reference_lua/msgpack.rst:28
msgid "Use"
msgstr "Назначение"

#: ../doc/reference/reference_lua/msgpack.rst:30
msgid ":ref:`msgpack.encode() <msgpack-encode>`"
msgstr ":ref:`msgpack.encode() <msgpack-encode>`"

#: ../doc/reference/reference_lua/msgpack.rst:30
msgid "Convert a Lua object to an MsgPack string"
msgstr "Конвертация Lua-объекта в MsgPack-строку"

#: ../doc/reference/reference_lua/msgpack.rst:33
msgid ":ref:`msgpack.decode() <msgpack-decode>`"
msgstr ":ref:`msgpack.decode() <msgpack-decode>`"

#: ../doc/reference/reference_lua/msgpack.rst:33
#: ../doc/reference/reference_lua/msgpack.rst:36
msgid "Convert a MsgPack string to a Lua object"
msgstr "Конвертация MsgPack-строки в Lua-объект"

#: ../doc/reference/reference_lua/msgpack.rst:36
msgid ":ref:`msgpack.decode_unchecked() <msgpack-decode_unchecked>`"
msgstr ":ref:`msgpack.decode_unchecked() <msgpack-decode_unchecked>`"

#: ../doc/reference/reference_lua/msgpack.rst:39
msgid ":ref:`msgpack.NULL <msgpack-null>`"
msgstr ":ref:`msgpack.NULL <msgpack-null>`"

#: ../doc/reference/reference_lua/msgpack.rst:39
msgid "Analog of Lua's \"nil\""
msgstr "Аналог \"nil\" в языке Lua "

#: ../doc/reference/reference_lua/msgpack.rst:42
msgid ":ref:`msgpack.decode_array_header <msgpack-decode_array_header>`"
msgstr ":ref:`msgpack.decode_array_header <msgpack-decode_array_header>`"

#: ../doc/reference/reference_lua/msgpack.rst:42
msgid "Skip array header in a MsgPack string"
msgstr ""

#: ../doc/reference/reference_lua/msgpack.rst:45
#, fuzzy
msgid ":ref:`msgpack.decode_map_header <msgpack-decode_map_header>`"
msgstr ":ref:`msgpack.decode_unchecked() <msgpack-decode_unchecked>`"

#: ../doc/reference/reference_lua/msgpack.rst:45
msgid "Skip map header in a MsgPack string"
msgstr ""

#: ../doc/reference/reference_lua/msgpack.rst:48
msgid ":ref:`msgpack.cfg <msgpack-cfg>`"
msgstr ":ref:`msgpack.cfg <msgpack-cfg>`"

#: ../doc/reference/reference_lua/msgpack.rst:48
msgid "Change configuration"
msgstr "Изменение конфигурации"

#: ../doc/reference/reference_lua/msgpack.rst:58
msgid "Convert a Lua object to a MsgPack string."
msgstr "Конвертация Lua-объекта в MsgPack-строку."

#: ../doc/reference/reference_lua/msgpack.rst:0
msgid "Parameters"
msgstr "Параметры"

#: ../doc/reference/reference_lua/msgpack.rst:60
msgid "either a scalar value or a Lua table value."
msgstr "скалярное значение или значение из Lua-таблицы."

#: ../doc/reference/reference_lua/msgpack.rst:0
msgid "return"
msgstr "возвращает"

#: ../doc/reference/reference_lua/msgpack.rst:61
msgid "the original value reformatted as a MsgPack string."
msgstr "оригинальное значение, преобразованное в MsgPack-строку."

#: ../doc/reference/reference_lua/msgpack.rst:0
msgid "rtype"
msgstr "тип возвращаемого значения"

#: ../doc/reference/reference_lua/msgpack.rst:62
msgid "string"
msgstr "строка"

#: ../doc/reference/reference_lua/msgpack.rst:68
msgid "Convert a MsgPack string to a Lua object."
msgstr "Конвертация MsgPack-строки в Lua-объект."

#: ../doc/reference/reference_lua/msgpack.rst:70
#: ../doc/reference/reference_lua/msgpack.rst:98
msgid "a string formatted as MsgPack."
msgstr "строка в формате MsgPack."

#: ../doc/reference/reference_lua/msgpack.rst:71
msgid "where to start, minimum = 1, maximum = string length, default = 1."
msgstr ""
"откуда начинать, минимальное значение = 1, максимальное = длина строки, по "
"умолчанию = 1."

#: ../doc/reference/reference_lua/msgpack.rst:76
msgid ""
"(if ``msgpack_string`` is in valid MsgPack format) the original contents of "
"``msgpack_string``, formatted as a Lua table, (otherwise) a scalar value, "
"such as a string or a number;"
msgstr ""
"(если ``msgpack_string`` в правильном MsgPack-формате) содержимое "
"``msgpack_string`` в формате Lua-таблицы, (в противном случае) скалярное "
"значение, строка или число;"

#: ../doc/reference/reference_lua/msgpack.rst:79
msgid ""
"\"next_start_position\". If ``decode`` stops after parsing as far as byte N "
"in ``msgpack_string``, then \"next_start_position\" will equal N + 1, and "
"``decode(msgpack_string, next_start_position)`` will continue parsing from "
"where the previous ``decode`` stopped, plus 1. Normally ``decode`` parses "
"all of ``msgpack_string``, so \"next_start_position\" will equal ``string."
"len(msgpack_string)`` + 1."
msgstr ""
"\"next_start_position\". Если расшифровка ``decode`` останавливается после "
"разбора байта N в ``msgpack_string``, то \"next_start_position\" = N + 1, а "
"``decode(msgpack_string, next_start_position)`` продолжит разбор с места "
"остановки предыдущего ``decode`` плюс 1. Как правило, ``decode`` разбирает "
"всю строку ``msgpack_string``, поэтому \"next_start_position\" будет "
"равняться ``string.len(msgpack_string)`` + 1."

#: ../doc/reference/reference_lua/msgpack.rst:86
msgid "table and number"
msgstr "таблица и число"

#: ../doc/reference/reference_lua/msgpack.rst:92
msgid ""
"Convert a MsgPack string to a Lua object. Because checking is skipped, "
"``decode_unchecked()`` can operate with string pointers to buffers which "
"``decode()`` cannot handle. For an example see the :ref:`buffer <buffer-"
"module>` module."
msgstr ""
"Конвертация MsgPack-строки в Lua-объект. Поскольку проверка не проводится, "
"``decode_unchecked()`` может работать с указателями строки в буфере в "
"отличие от ``decode()``. Пример см. в модуле :ref:`buffer <buffer-module>`."

#: ../doc/reference/reference_lua/msgpack.rst:102
msgid "the original contents formatted as a Lua table;"
msgstr "оригинальное содержание в формате Lua-таблицы;"

#: ../doc/reference/reference_lua/msgpack.rst:103
msgid "the number of bytes that were decoded."
msgstr "количество декодированных байтов."

#: ../doc/reference/reference_lua/msgpack.rst:105
msgid "lua object"
msgstr "Lua-объект."

#: ../doc/reference/reference_lua/msgpack.rst:111
msgid ""
"A value comparable to Lua \"nil\" which may be useful as a placeholder in a "
"tuple."
msgstr ""
"Значение, сопоставимое с нулевым значением \"nil\" в языке Lua, которое "
"можно использовать в качестве объекта-заполнителя в кортеже."

#: ../doc/reference/reference_lua/msgpack.rst:118
msgid ""
"Call the mp_decode_array function in the `MsgPuck <http://rtsisyk.github.io/"
"msgpuck/>`_ library and return the array size and a pointer to the first "
"array component. A subsequent call to ``msgpack_decode`` can decode the "
"component instead of the whole array."
msgstr ""

#: ../doc/reference/reference_lua/msgpack.rst:122
#: ../doc/reference/reference_lua/msgpack.rst:150
#, fuzzy
msgid "a pointer to a byte array formatted as MsgPack."
msgstr "строка в формате MsgPack."

#: ../doc/reference/reference_lua/msgpack.rst:123
msgid "a number greater than or equal to the string's length"
msgstr ""

#: ../doc/reference/reference_lua/msgpack.rst:127
#, fuzzy
msgid "the size of the array;"
msgstr "позиция последнего символа"

#: ../doc/reference/reference_lua/msgpack.rst:128
msgid "a pointer to after the array header."
msgstr ""

#: ../doc/reference/reference_lua/msgpack.rst:130
msgid ""
"-- Example of decode_array_header\n"
"-- Suppose we have the raw data '\\x93\\x01\\x02\\x03'.\n"
"-- \\x93 is MsgPack encoding for a header of a three-item array.\n"
"-- We want to skip it and decode the next three items.\n"
"msgpack=require('msgpack'); ffi=require('ffi')\n"
"x,y=msgpack.decode_array_header(ffi.cast('char*','\\x93\\x01\\x02\\x03'),4)\n"
"a=msgpack.decode(y,1);b=msgpack.decode(y+1,1);c=msgpack.decode(y+2,1);\n"
"a,b,c\n"
"-- The result will be: 1,2,3."
msgstr ""

#: ../doc/reference/reference_lua/msgpack.rst:146
msgid ""
"Call the mp_decode_map function in the `MsgPuck <http://rtsisyk.github.io/"
"msgpuck/>`_ library and return the map size and a pointer to the first map "
"component. A subsequent call to ``msgpack_decode`` can decode the component "
"instead of the whole map."
msgstr ""

#: ../doc/reference/reference_lua/msgpack.rst:151
msgid "a number greater than or equal to the byte array's length"
msgstr ""

#: ../doc/reference/reference_lua/msgpack.rst:155
#, fuzzy
msgid "the size of the map;"
msgstr "копия таблицы"

#: ../doc/reference/reference_lua/msgpack.rst:156
msgid "a pointer to after the map header."
msgstr ""

#: ../doc/reference/reference_lua/msgpack.rst:158
msgid ""
"-- Example of decode_map_header\n"
"-- Suppose we have the raw data '\\x81\\xa2\\x41\\x41\\xc3'.\n"
"-- \\x81 is MsgPack encoding for a header of a one-item map.\n"
"-- We want to skip it and decode the next map item.\n"
"msgpack=require('msgpack'); ffi=require('ffi')\n"
"x,y=msgpack.decode_map_header(ffi."
"cast('char*','\\x81\\xa2\\x41\\x41\\xc3'),5)\n"
"a=msgpack.decode(y,3);b=msgpack.decode(y+3,1)\n"
"x,a,b\n"
"-- The result will be: 1,\"AA\", true."
msgstr ""

#: ../doc/reference/reference_lua/msgpack.rst:172
msgid "Example"
msgstr "Пример"

#: ../doc/reference/reference_lua/msgpack.rst:174
msgid ""
"tarantool> msgpack = require('msgpack')\n"
"---\n"
"...\n"
"tarantool> y = msgpack.encode({'a',1,'b',2})\n"
"---\n"
"...\n"
"tarantool> z = msgpack.decode(y)\n"
"---\n"
"...\n"
"tarantool> z[1], z[2], z[3], z[4]\n"
"---\n"
"- a\n"
"- 1\n"
"- b\n"
"- 2\n"
"...\n"
"tarantool> box.space.tester:insert{20, msgpack.NULL, 20}\n"
"---\n"
"- [20, null, 20]\n"
"..."
msgstr ""
"tarantool> msgpack = require('msgpack')\n"
"---\n"
"...\n"
"tarantool> y = msgpack.encode({'a',1,'b',2})\n"
"---\n"
"...\n"
"tarantool> z = msgpack.decode(y)\n"
"---\n"
"...\n"
"tarantool> z[1], z[2], z[3], z[4]\n"
"---\n"
"- a\n"
"- 1\n"
"- b\n"
"- 2\n"
"...\n"
"tarantool> box.space.tester:insert{20, msgpack.NULL, 20}\n"
"---\n"
"- [20, null, 20]\n"
"..."

#: ../doc/reference/reference_lua/msgpack.rst:199
msgid "The MsgPack output structure can be specified with ``__serialize``:"
msgstr "Структуру MsgPack-вывода можно указать с помощью ``__serialize``:"

#: ../doc/reference/reference_lua/msgpack.rst:201
msgid "``__serialize = \"seq\" or \"sequence\"`` for an array"
msgstr "``__serialize = \"seq\" или \"sequence\"`` для массива"

#: ../doc/reference/reference_lua/msgpack.rst:202
msgid "``__serialize = \"map\" or \"mapping\"`` for a map"
msgstr "``__serialize = \"map\" или \"mapping\"`` для ассоциативного массива"

#: ../doc/reference/reference_lua/msgpack.rst:204
msgid ""
"Serializing 'A' and 'B' with different ``__serialize`` values causes "
"different results. To show this, here is a routine which encodes `{'A','B'}` "
"both as an array and as a map, then displays each result in hexadecimal."
msgstr ""
"Сериализация 'A' и' B' различными значениями ``__serialize`` приводит к "
"различным результатам. Чтобы показать различия, ниже приведена процедура "
"кодирования `{'A','B'}` в массив и в ассоциативный массив с выводом каждого "
"результата в виде шестнадцатеричного числа."

#: ../doc/reference/reference_lua/msgpack.rst:208
msgid ""
"function hexdump(bytes)\n"
"    local result = ''\n"
"    for i = 1, #bytes do\n"
"        result = result .. string.format(\"%x\", string.byte(bytes, i)) .. ' "
"'\n"
"    end\n"
"    return result\n"
"end\n"
"\n"
"msgpack = require('msgpack')\n"
"m1 = msgpack.encode(setmetatable({'A', 'B'}, {\n"
"                             __serialize = \"seq\"\n"
"                          }))\n"
"m2 = msgpack.encode(setmetatable({'A', 'B'}, {\n"
"                             __serialize = \"map\"\n"
"                          }))\n"
"print('array encoding: ', hexdump(m1))\n"
"print('map encoding: ', hexdump(m2))"
msgstr ""
"function hexdump(bytes)\n"
"    local result = ''\n"
"    for i = 1, #bytes do\n"
"        result = result .. string.format(\"%x\", string.byte(bytes, i)) .. ' "
"'\n"
"    end\n"
"    return result\n"
"end\n"
"\n"
"msgpack = require('msgpack')\n"
"m1 = msgpack.encode(setmetatable({'A', 'B'}, {\n"
"                             __serialize = \"seq\"\n"
"                          }))\n"
"m2 = msgpack.encode(setmetatable({'A', 'B'}, {\n"
"                             __serialize = \"map\"\n"
"                          }))\n"
"print('array encoding: ', hexdump(m1))\n"
"print('map encoding: ', hexdump(m2))"

#: ../doc/reference/reference_lua/msgpack.rst:228
msgid "**Result:**"
msgstr "**Результат:**"

#: ../doc/reference/reference_lua/msgpack.rst:267
msgid ""
"**array** encoding: 92 a1 41 a1 42\n"
"**map** encoding:   82 01 a1 41 02 a1 42"
msgstr ""
"**array** encoding: 92 a1 41 a1 42\n"
"**map** encoding:   82 01 a1 41 02 a1 42"

#: ../doc/reference/reference_lua/msgpack.rst:236
msgid "The MsgPack Specification_ page explains that the first encoding means:"
msgstr ""
"На странице спецификации MsgPack по ссылке Specification_ объясняется, что "
"значение первого результата кодирования:"

#: ../doc/reference/reference_lua/msgpack.rst:275
msgid "fixarray(2), fixstr(1), \"A\", fixstr(1), \"B\""
msgstr "fixarray(2), fixstr(1), \"A\", fixstr(1), \"B\""

#: ../doc/reference/reference_lua/msgpack.rst:243
msgid "and the second encoding means:"
msgstr "а значение второго результата кодирования:"

#: ../doc/reference/reference_lua/msgpack.rst:282
msgid "fixmap(2), key(1), fixstr(1), \"A\", key(2), fixstr(2), \"B\""
msgstr "fixmap(2), key(1), fixstr(1), \"A\", key(2), fixstr(2), \"B\""

#: ../doc/reference/reference_lua/msgpack.rst:250
msgid ""
"Here are examples for all the common types, with the Lua-table "
"representation on the left, with the MsgPack format name and encoding on the "
"right."
msgstr ""
"Ниже приведены примеры всех стандартных типов: слева отображение в Lua-"
"таблице, а справа -- имя и кодировка в формате MsgPack."

#: ../doc/reference/reference_lua/msgpack.rst:258
msgid "**Common Types and MsgPack Encodings**"
msgstr "**Стандартные типы в MsgPack-кодировке**"

#: ../doc/reference/reference_lua/msgpack.rst:266
msgid "{}"
msgstr "{}"

#: ../doc/reference/reference_lua/msgpack.rst:266
msgid "'fixmap' if metatable is 'map' = 80 otherwise 'fixarray' = 90"
msgstr ""
"'fixmap' = 80, если метатаблица -- ассоциативный массив 'map', в противном "
"случае, 'fixarray' = 90"

#: ../doc/reference/reference_lua/msgpack.rst:269
msgid "'a'"
msgstr "'a'"

#: ../doc/reference/reference_lua/msgpack.rst:269
msgid "'fixstr' = a1 61"
msgstr "'fixstr' = a1 61"

#: ../doc/reference/reference_lua/msgpack.rst:271
msgid "false"
msgstr "false"

#: ../doc/reference/reference_lua/msgpack.rst:271
msgid "'false' = c2"
msgstr "'false' = c2"

#: ../doc/reference/reference_lua/msgpack.rst:273
msgid "true"
msgstr "true"

#: ../doc/reference/reference_lua/msgpack.rst:273
msgid "'true' = c3"
msgstr "'true' = c3"

#: ../doc/reference/reference_lua/msgpack.rst:275
msgid "127"
msgstr "127"

#: ../doc/reference/reference_lua/msgpack.rst:275
msgid "'positive fixint' = 7f"
msgstr "'positive fixint' = 7f"

#: ../doc/reference/reference_lua/msgpack.rst:277
msgid "65535"
msgstr "65535"

#: ../doc/reference/reference_lua/msgpack.rst:277
msgid "'uint 16' = cd ff ff"
msgstr "'uint 16' = cd ff ff"

#: ../doc/reference/reference_lua/msgpack.rst:279
msgid "4294967295"
msgstr "4294967295"

#: ../doc/reference/reference_lua/msgpack.rst:279
msgid "'uint 32' = ce ff ff ff ff"
msgstr "'uint 32' = ce ff ff ff ff"

#: ../doc/reference/reference_lua/msgpack.rst:281
msgid "nil"
msgstr "nil"

#: ../doc/reference/reference_lua/msgpack.rst:281
msgid "'nil' = c0"
msgstr "'nil' = c0"

#: ../doc/reference/reference_lua/msgpack.rst:283
msgid "msgpack.NULL"
msgstr "msgpack.NULL"

#: ../doc/reference/reference_lua/msgpack.rst:283
msgid "same as nil"
msgstr "то же, что и nil"

#: ../doc/reference/reference_lua/msgpack.rst:285
msgid "[0] = 5"
msgstr "[0] = 5"

#: ../doc/reference/reference_lua/msgpack.rst:285
msgid ""
"'fixmap(1)' + 'positive fixint' (for the key) + 'positive fixint' (for the "
"value) = 81 00 05"
msgstr ""
"'fixmap(1)' + 'positive fixint' (для ключа) + 'positive fixint' (для "
"значения) = 81 00 05"

#: ../doc/reference/reference_lua/msgpack.rst:288
msgid "[0] = nil"
msgstr "[0] = nil"

#: ../doc/reference/reference_lua/msgpack.rst:288
msgid "'fixmap(0)' = 80 -- nil is not stored when it is a missing map value"
msgstr ""
"'fixmap(0)' = 80 -- nil не хранится, если это отсутствующее значение "
"ассоциативного массива"

#: ../doc/reference/reference_lua/msgpack.rst:291
msgid "1.5"
msgstr "1,5"

#: ../doc/reference/reference_lua/msgpack.rst:291
msgid "'float 64' = cb 3f f8 00 00 00 00 00 00"
msgstr "'float 64' = cb 3f f8 00 00 00 00 00 00"

#: ../doc/reference/reference_lua/msgpack.rst:298
msgid ""
"Some MsgPack configuration settings can be changed, in the same way that "
"they can be changed for json. See :ref:`Module JSON <json-module_cfg>` for a "
"list of some configuration settings. (The same configuration settings exist "
"for json, for MsgPack, and for  :ref:`YAML <yaml-module>`.)"
msgstr ""
"Некоторые параметры конфигурации MsgPack для кодировки можно изменить так "
"же, как и для JSON. Список некоторых настроек см. в :ref:`Модуле JSON <json-"
"module_cfg>`. (Такие параметры конфигурации применяются для формата JSON, "
"для :ref:`MsgPack <msgpack-module>` и для :ref:`YAML <yaml-module>`.)"

#: ../doc/reference/reference_lua/msgpack.rst:303
msgid ""
"For example, if ``msgpack.cfg.encode_invalid_numbers = true`` (the default), "
"then nan and inf are legal values. If that is not desirable, then ensure "
"that ``msgpack.encode()`` will not accept them, by saying ``msgpack."
"cfg{encode_invalid_numbers = false}``, thus:"
msgstr ""
"Например, если ``msgpack.cfg.encode_invalid_numbers = true`` (по умолчанию), "
"то допускаются значения nan и inf. Если это нежелательно, следует убедиться, "
"что ``msgpack.encode()`` не примет такие значения, выполнив ``msgpack."
"cfg{encode_invalid_numbers = false}``. Таким образом:"

#: ../doc/reference/reference_lua/msgpack.rst:308
msgid ""
" tarantool> msgpack = require('msgpack'); msgpack.cfg{encode_invalid_numbers "
"= true}\n"
" ---\n"
" ...\n"
" tarantool> msgpack.decode(msgpack.encode{1, 0 / 0, 1 / 0, false})\n"
" ---\n"
" - [1, -nan, inf, false]\n"
" - 22\n"
" ...\n"
" tarantool> msgpack.cfg{encode_invalid_numbers = false}\n"
"---\n"
"...\n"
" tarantool> msgpack.decode(msgpack.encode{1, 0 / 0, 1 / 0, false})\n"
" ---\n"
" - error: ... number must not be NaN or Inf'\n"
"..."
msgstr ""
" tarantool> msgpack = require('msgpack'); msgpack.cfg{encode_invalid_numbers "
"= true}\n"
" ---\n"
" ...\n"
" tarantool> msgpack.decode(msgpack.encode{1, 0 / 0, 1 / 0, false})\n"
" ---\n"
" - [1, -nan, inf, false]\n"
" - 22\n"
" ...\n"
" tarantool> msgpack.cfg{encode_invalid_numbers = false}\n"
"---\n"
"...\n"
" tarantool> msgpack.decode(msgpack.encode{1, 0 / 0, 1 / 0, false})\n"
" ---\n"
" - error: ... number must not be NaN or Inf'\n"
"..."
