# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-04 10:02+0000\n"
"PO-Revision-Date: 2019-12-06 16:16+0300\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
"Generated-By: Babel 2.7.0\n"

#: ../doc/reference/reference_lua/json.rst:5
msgid "Module `json`"
msgstr "Модуль `json`"

#: ../doc/reference/reference_lua/json.rst:9
msgid "Overview"
msgstr "Общие сведения"

#: ../doc/reference/reference_lua/json.rst:11
msgid ""
"The ``json`` module provides JSON manipulation routines. It is based on the "
"`Lua-CJSON module by Mark Pulford <http://www.kyne.com.au/~mark/software/lua-"
"cjson.php>`_. For a complete manual on Lua-CJSON please read `the official "
"documentation <http://www.kyne.com.au/~mark/software/lua-cjson-manual."
"html>`_."
msgstr ""
"Модуль ``json`` определяет процедуры работы с форматом JSON. Он создан на "
"основе `модуля Lua-CJSON от Mark Pulford <http://www.kyne.com.au/~mark/"
"software/lua-cjson.php>`_. Полное руководство по Lua-CJSON включено в "
"`официальную документацию <http://www.kyne.com.au/~mark/software/lua-cjson-"
"manual.html>`_."

#: ../doc/reference/reference_lua/json.rst:18
msgid "Index"
msgstr "Указатель"

#: ../doc/reference/reference_lua/json.rst:20
msgid "Below is a list of all ``json`` functions and members."
msgstr "Ниже приведен перечень всех функций и элементов модуля ``json``."

#: ../doc/reference/reference_lua/json.rst:28
msgid "Name"
msgstr "Имя"

#: ../doc/reference/reference_lua/json.rst:28
msgid "Use"
msgstr "Назначение"

#: ../doc/reference/reference_lua/json.rst:30
msgid ":ref:`json.encode() <json-encode>`"
msgstr ":ref:`json.encode() <json-encode>`"

#: ../doc/reference/reference_lua/json.rst:30
msgid "Convert a Lua object to a JSON string"
msgstr "Конвертация Lua-объекта в JSON-строку"

#: ../doc/reference/reference_lua/json.rst:33
msgid ":ref:`json.decode() <json-decode>`"
msgstr ":ref:`json.decode() <json-decode>`"

#: ../doc/reference/reference_lua/json.rst:33
msgid "Convert a JSON string to a Lua object"
msgstr "Конвертация JSON-строки в Lua-объект"

#: ../doc/reference/reference_lua/json.rst:36
msgid ":ref:`json.NULL <json-null>`"
msgstr ":ref:`json.NULL <json-null>`"

#: ../doc/reference/reference_lua/json.rst:36
msgid "Analog of Lua's \"nil\""
msgstr "Аналог \"nil\" в языке Lua "

#: ../doc/reference/reference_lua/json.rst:39
msgid ":ref:`json.cfg() <json-module_cfg>`"
msgstr ":ref:`json.cfg() <json-module_cfg>`"

#: ../doc/reference/reference_lua/json.rst:39
msgid "Set global flags"
msgstr "Определение глобальных флагов"

#: ../doc/reference/reference_lua/json.rst:49
msgid "Convert a Lua object to a JSON string."
msgstr "Конвертация Lua-объекта в JSON-строку."

#: ../doc/reference/reference_lua/json.rst:0
msgid "Parameters"
msgstr "Параметры"

#: ../doc/reference/reference_lua/json.rst:51
msgid "either a scalar value or a Lua table value."
msgstr "скалярное значение или значение из Lua-таблицы."

#: ../doc/reference/reference_lua/json.rst:52
#: ../doc/reference/reference_lua/json.rst:91
msgid "see :ref:`json.cfg <json-module_cfg>`"
msgstr "see :ref:`json.cfg <json-module_cfg>`"

#: ../doc/reference/reference_lua/json.rst:0
msgid "return"
msgstr "возвращает"

#: ../doc/reference/reference_lua/json.rst:53
msgid "the original value reformatted as a JSON string."
msgstr "оригинальное значение, преобразованное в JSON-строку."

#: ../doc/reference/reference_lua/json.rst:0
msgid "rtype"
msgstr "тип возвращаемого значения"

#: ../doc/reference/reference_lua/json.rst:54
msgid "string"
msgstr "строка"

#: ../doc/reference/reference_lua/json.rst:56
#: ../doc/reference/reference_lua/json.rst:95
#: ../doc/reference/reference_lua/json.rst:126
msgid "**Example:**"
msgstr "**Пример:**"

#: ../doc/reference/reference_lua/json.rst:58
msgid ""
"tarantool> json=require('json')\n"
"---\n"
"...\n"
"tarantool> json.encode(123)\n"
"---\n"
"- '123'\n"
"...\n"
"tarantool> json.encode({123})\n"
"---\n"
"- '[123]'\n"
"...\n"
"tarantool> json.encode({123, 234, 345})\n"
"---\n"
"- '[123,234,345]'\n"
"...\n"
"tarantool> json.encode({abc = 234, cde = 345})\n"
"---\n"
"- '{\"cde\":345,\"abc\":234}'\n"
"...\n"
"tarantool> json.encode({hello = {'world'}})\n"
"---\n"
"- '{\"hello\":[\"world\"]}'\n"
"..."
msgstr ""
"tarantool> json=require('json')\n"
"---\n"
"...\n"
"tarantool> json.encode(123)\n"
"---\n"
"- '123'\n"
"...\n"
"tarantool> json.encode({123})\n"
"---\n"
"- '[123]'\n"
"...\n"
"tarantool> json.encode({123, 234, 345})\n"
"---\n"
"- '[123,234,345]'\n"
"...\n"
"tarantool> json.encode({abc = 234, cde = 345})\n"
"---\n"
"- '{\"cde\":345,\"abc\":234}'\n"
"...\n"
"tarantool> json.encode({hello = {'world'}})\n"
"---\n"
"- '{\"hello\":[\"world\"]}'\n"
"..."

#: ../doc/reference/reference_lua/json.rst:88
msgid "Convert a JSON string to a Lua object."
msgstr "Конвертация JSON-строки в Lua-объект."

#: ../doc/reference/reference_lua/json.rst:90
msgid "a string formatted as JSON."
msgstr "строка в формате JSON."

#: ../doc/reference/reference_lua/json.rst:92
msgid "the original contents formatted as a Lua table."
msgstr "оригинальное содержание в формате Lua-таблицы."

#: ../doc/reference/reference_lua/json.rst:93
msgid "table"
msgstr "таблица"

#: ../doc/reference/reference_lua/json.rst:97
msgid ""
"tarantool> json = require('json')\n"
"---\n"
"...\n"
"tarantool> json.decode('123')\n"
"---\n"
"- 123\n"
"...\n"
"tarantool> json.decode('[123, \"hello\"]')\n"
"---\n"
"- [123, 'hello']\n"
"...\n"
"tarantool> json.decode('{\"hello\": \"world\"}').hello\n"
"---\n"
"- world\n"
"..."
msgstr ""
"tarantool> json = require('json')\n"
"---\n"
"...\n"
"tarantool> json.decode('123')\n"
"---\n"
"- 123\n"
"...\n"
"tarantool> json.decode('[123, \"hello\"]')\n"
"---\n"
"- [123, 'hello']\n"
"...\n"
"tarantool> json.decode('{\"hello\": \"world\"}').hello\n"
"---\n"
"- world\n"
"..."

#: ../doc/reference/reference_lua/json.rst:115
msgid ""
"See the tutorial :ref:`Sum a JSON field for all tuples <c_lua_tutorial-"
"sum_a_json_field>` to see how ``json.decode()`` can fit in an application."
msgstr ""
"Чтобы увидеть применение ``json.decode()`` в приложении, см. практическое "
"задание :ref:`Подсчет суммы по JSON-полям во всех кортежах <c_lua_tutorial-"
"sum_a_json_field>`."

#: ../doc/reference/reference_lua/json.rst:123
msgid ""
"A value comparable to Lua \"nil\" which may be useful as a placeholder in a "
"tuple."
msgstr ""
"Значение, сопоставимое с нулевым значением \"nil\" в языке Lua, которое "
"можно использовать в качестве объекта-заполнителя в кортеже."

#: ../doc/reference/reference_lua/json.rst:128
msgid ""
"-- When nil is assigned to a Lua-table field, the field is null\n"
"tarantool> {nil, 'a', 'b'}\n"
"---\n"
"- - null\n"
"  - a\n"
"  - b\n"
"...\n"
"-- When json.NULL is assigned to a Lua-table field, the field is json.NULL\n"
"tarantool> {json.NULL, 'a', 'b'}\n"
"---\n"
"- - null\n"
"  - a\n"
"  - b\n"
"...\n"
"-- When json.NULL is assigned to a JSON field, the field is null\n"
"tarantool> json.encode({field2 = json.NULL, field1 = 'a', field3 = 'c'})\n"
"---\n"
"- '{\"field2\":null,\"field1\":\"a\",\"field3\":\"c\"}'\n"
"..."
msgstr ""
"-- Когда полю Lua-таблицы присваивается nil, это поле -- null\n"
"tarantool> {nil, 'a', 'b'}\n"
"---\n"
"- - null\n"
"  - a\n"
"  - b\n"
"...\n"
"-- Когда полю Lua-таблицы присваивается json.NULL, это поле --  json.NULL\n"
"tarantool> {json.NULL, 'a', 'b'}\n"
"---\n"
"- - null\n"
"  - a\n"
"  - b\n"
"...\n"
"-- Когда JSON-полю присваивается json.NULL, это поле -- null\n"
"tarantool> json.encode({field2 = json.NULL, field1 = 'a', field3 = 'c'})\n"
"---\n"
"- '{\"field2\":null,\"field1\":\"a\",\"field3\":\"c\"}'\n"
"..."

#: ../doc/reference/reference_lua/json.rst:150
msgid "The JSON output structure can be specified with ``__serialize``:"
msgstr "Структуру JSON-вывода можно указать с помощью ``__serialize``:"

#: ../doc/reference/reference_lua/json.rst:152
msgid "``__serialize=\"seq\"`` for an array"
msgstr "``__serialize=\"seq\"`` для массива"

#: ../doc/reference/reference_lua/json.rst:153
msgid "``__serialize=\"map\"`` for a map"
msgstr "``__serialize=\"map\"`` для ассоциативного массива"

#: ../doc/reference/reference_lua/json.rst:155
msgid ""
"Serializing 'A' and 'B' with different ``__serialize`` values causes "
"different results:"
msgstr ""
"Сериализация 'A' и' B' различными значениями ``__serialize`` приводит к "
"различным результатам:"

#: ../doc/reference/reference_lua/json.rst:158
msgid ""
"tarantool> json.encode(setmetatable({'A', 'B'}, { __serialize=\"seq\"}))\n"
"---\n"
"- '[\"A\",\"B\"]'\n"
"...\n"
"tarantool> json.encode(setmetatable({'A', 'B'}, { __serialize=\"map\"}))\n"
"---\n"
"- '{\"1\":\"A\",\"2\":\"B\"}'\n"
"...\n"
"tarantool> json.encode({setmetatable({f1 = 'A', f2 = 'B'}, { __serialize="
"\"map\"})})\n"
"---\n"
"- '[{\"f2\":\"B\",\"f1\":\"A\"}]'\n"
"...\n"
"tarantool> json.encode({setmetatable({f1 = 'A', f2 = 'B'}, { __serialize="
"\"seq\"})})\n"
"---\n"
"- '[[]]'\n"
"..."
msgstr ""
"tarantool> json.encode(setmetatable({'A', 'B'}, { __serialize=\"seq\"}))\n"
"---\n"
"- '[\"A\",\"B\"]'\n"
"...\n"
"tarantool> json.encode(setmetatable({'A', 'B'}, { __serialize=\"map\"}))\n"
"---\n"
"- '{\"1\":\"A\",\"2\":\"B\"}'\n"
"...\n"
"tarantool> json.encode({setmetatable({f1 = 'A', f2 = 'B'}, { __serialize="
"\"map\"})})\n"
"---\n"
"- '[{\"f2\":\"B\",\"f1\":\"A\"}]'\n"
"...\n"
"tarantool> json.encode({setmetatable({f1 = 'A', f2 = 'B'}, { __serialize="
"\"seq\"})})\n"
"---\n"
"- '[[]]'\n"
"..."

#: ../doc/reference/reference_lua/json.rst:181
msgid ""
"Set values affecting behavior of :ref:`json.encode <json-encode>` and :ref:"
"`json.decode <json-decode>`."
msgstr ""
"Определяет значения, которые влияют на поведение :ref:`json.encode <json-"
"encode>` и :ref:`json.decode <json-decode>`."

#: ../doc/reference/reference_lua/json.rst:184
msgid ""
"The values are all either integers or boolean ``true``/``false`` values."
msgstr ""
"Задаются либо все целочисленные значения, либо все логические значения "
"``true``/``false`` (правда/ложь)."

#: ../doc/reference/reference_lua/json.rst:186
msgid ""
"``cfg.encode_deep_as_nil`` (default is false) -- see :ref:`below <json-"
"module.cfg_encode_deep_as_nil>`"
msgstr ""
"``cfg.encode_deep_as_nil`` ((по умолчанию, false) -- см. :ref:`ниже <json-"
"module.cfg_encode_deep_as_nil>`"

#: ../doc/reference/reference_lua/json.rst:187
msgid ""
"``cfg.encode_invalid_as_nil`` (default is false) -- use ``null`` for all "
"unrecognizable types"
msgstr ""
"``cfg.encode_invalid_as_nil`` (по умолчанию, false) -- использовать ``null`` "
"для всех нераспознаваемых типов"

#: ../doc/reference/reference_lua/json.rst:189
msgid "``cfg.encode_invalid_numbers`` (default is true) -- allow nan and inf"
msgstr ""
"``cfg.encode_invalid_numbers`` (по умолчанию, true) -- разрешить nan и inf"

#: ../doc/reference/reference_lua/json.rst:190
msgid "``cfg.encode_load_metatables`` (default is false) -- load metatables"
msgstr ""
"``cfg.encode_load_metatables`` (по умолчанию, false) -- загрузить метатаблицы"

#: ../doc/reference/reference_lua/json.rst:191
msgid ""
"``cfg.encode_max_depth`` (default is 32) -- maximum nesting depth in a "
"structure"
msgstr ""
"``cfg.encode_max_depth`` (по умолчанию, 32) -- максимальная глубина "
"вложенности в структуре"

#: ../doc/reference/reference_lua/json.rst:192
msgid ""
"``cfg.encode_number_precision`` (default is 14) -- maximum post-decimal "
"digits"
msgstr ""
"``cfg.encode_number_precision`` (по умолчанию, 14) -- максимальное "
"количество цифр в дробной части"

#: ../doc/reference/reference_lua/json.rst:193
msgid ""
"``cfg.encode_sparse_convert`` (default is true) -- handle excessively sparse "
"arrays as maps"
msgstr ""
"``cfg.encode_sparse_convert`` (по умолчанию, true) -- обрабатывать излишне "
"разреженные массивы как ассоциативные массивы"

#: ../doc/reference/reference_lua/json.rst:194
msgid ""
"``cfg.encode_sparse_ratio`` (default is 2) -- how sparse an array can be"
msgstr ""
"``cfg.encode_sparse_ratio`` (по умолчанию, 2) -- допустимая разреженность "
"массива"

#: ../doc/reference/reference_lua/json.rst:195
msgid ""
"``cfg.encode_sparse_safe`` (default is 10) -- how much can safely be sparse"
msgstr ""
"``cfg.encode_sparse_safe`` (по умолчанию, 10) -- безопасная разреженность "
"массивы"

#: ../doc/reference/reference_lua/json.rst:196
msgid ""
"``cfg.encode_use_tostring`` (default is false) -- use ``tostring`` for "
"unrecognizable types"
msgstr ""
"``cfg.encode_use_tostring`` (по умолчанию, false) -- использовать "
"``tostring`` для нераспознаваемых типов"

#: ../doc/reference/reference_lua/json.rst:198
msgid "``cfg.decode_invalid_numbers`` (default is true) -- allow nan and inf"
msgstr ""
"``cfg.decode_invalid_numbers`` (по умолчанию, true) -- разрешить nan и inf"

#: ../doc/reference/reference_lua/json.rst:199
#, fuzzy
msgid "``cfg.decode_load_metatables`` (default is false) -- load metatables"
msgstr ""
"``cfg.encode_load_metatables`` (по умолчанию, false) -- загрузить метатаблицы"

#: ../doc/reference/reference_lua/json.rst:200
msgid ""
"``cfg.decode_max_depth`` (default is 32) -- maximum nesting depth in a "
"structure"
msgstr ""
"``cfg.decode_max_depth`` (по умолчанию, 32) -- максимальная глубина "
"вложенности в структуре"

#: ../doc/reference/reference_lua/json.rst:201
msgid ""
"``cfg.decode_save_metatables`` (default is true) -- like "
"``encode_load_metatables``"
msgstr ""
"``cfg.decode_save_metatables`` (по умолчанию, true) -- как "
"``encode_load_metatables``"

#: ../doc/reference/reference_lua/json.rst:202
#, fuzzy
msgid ""
"``cfg.decode_sparse_convert`` (default is true) -- like "
"``encode_sparse_convert``"
msgstr ""
"``cfg.decode_save_metatables`` (по умолчанию, true) -- как "
"``encode_load_metatables``"

#: ../doc/reference/reference_lua/json.rst:203
#, fuzzy
msgid ""
"``cfg.decode_use_tostring`` (default is false) -- use ``tostring`` for "
"unrecognizable types"
msgstr ""
"``cfg.encode_use_tostring`` (по умолчанию, false) -- использовать "
"``tostring`` для нераспознаваемых типов"

#: ../doc/reference/reference_lua/json.rst:206
msgid ""
"For example, the following code will encode 0/0 as nan (\"not a number\") "
"and 1/0 as inf (\"infinity\"), rather than returning nil or an error message:"
msgstr ""
"Например, следующий код интерпретирует 0/0 как nan (\"не является числом\"), "
"а 1/0 -- как inf (\"бесконечность\"), вместо того, чтобы вернуть nil или "
"ошибку:"

#: ../doc/reference/reference_lua/json.rst:209
msgid ""
"json = require('json')\n"
"json.cfg{encode_invalid_numbers = true}\n"
"x = 0/0\n"
"y = 1/0\n"
"json.encode({1, x, y, 2})"
msgstr ""
"json = require('json')\n"
"json.cfg{encode_invalid_numbers = true}\n"
"x = 0/0\n"
"y = 1/0\n"
"json.encode({1, x, y, 2})"

#: ../doc/reference/reference_lua/json.rst:217
msgid "The result of the ``json.encode()`` request will look like this:"
msgstr "Результат запроса ``json.encode()`` будет следующим:"

#: ../doc/reference/reference_lua/json.rst:219
msgid ""
"tarantool> json.encode({1, x, y, 2})\n"
"---\n"
"- '[1,nan,inf,2]\n"
"..."
msgstr ""
"tarantool> json.encode({1, x, y, 2})\n"
"---\n"
"- '[1,nan,inf,2]\n"
"..."

#: ../doc/reference/reference_lua/json.rst:226
msgid ""
"To achieve the same effect for only one call to ``json.encode()`` without "
"changing the configuration persistently, one could say ``json.encode({1, x, "
"y, 2}, {encode_invalid_numbers = true})``."
msgstr ""
"Чтобы получить такой же эффект для одиночного вызова ``json.encode()`` без "
"постоянного изменения конфигурации, можно вызвать ``json.encode({1, x, y, "
"2}, {encode_invalid_numbers = true})``."

#: ../doc/reference/reference_lua/json.rst:230
msgid ""
"The same configuration settings exist for json, for :ref:`MsgPack <msgpack-"
"module>`, and for :ref:`YAML <yaml-module>`."
msgstr ""
"Такие параметры конфигурации применяются для формата JSON, для :ref:`MsgPack "
"<msgpack-module>` и для :ref:`YAML <yaml-module>`."

#: ../doc/reference/reference_lua/json.rst:237
msgid ""
"**Behavior change:** Before Tarantool version 1.10.4, if a nested structure "
"was deeper than ``cfg.encode_max_depth``, the deeper levels were cropped "
"(encoded as nil)."
msgstr ""
"**Поведение изменилось:** До версии 1.10.4 Tarantool'а, если глубина "
"вложения структуры была больше, чем ``cfg.encode_max_depth``, более глубокие "
"уровни обрезаются (кодируются как nil)."

#: ../doc/reference/reference_lua/json.rst:241
msgid ""
"Now, the result is an error suggesting that ``cfg.encode_max_depth`` is not "
"deep enough. To return to the old behavior, say ``cfg.encode_deep_as_nil = "
"true``."
msgstr ""
"Теперь результатом станет ошибка с указанием недостаточной глубины ``cfg."
"encode_max_depth``. Чтобы вернуть старое поведение системы, выполните ``cfg."
"encode_deep_as_nil = true``."

#: ../doc/reference/reference_lua/json.rst:245
msgid "This option is ignored for ``YAML``."
msgstr "Этот параметр не учитывается для ``YAML``."
