# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-03 19:10+0000\n"
"PO-Revision-Date: 2019-12-06 16:11+0300\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"Generated-By: Babel 2.7.0\n"
"X-Generator: Poedit 2.2.4\n"

#: ../doc/book/box/authentication.rst:5
msgid "Access control"
msgstr "Управление доступом"

#: ../doc/book/box/authentication.rst:7
msgid ""
"Understanding security details is primarily an issue for administrators. "
"However, ordinary users should at least skim this section to get an idea of "
"how Tarantool makes it possible for administrators to prevent unauthorized "
"access to the database and to certain functions."
msgstr ""
"В основном администраторы занимаются вопросами настроек безопасности. Однако "
"обычные пользователи должны хотя бы бегло прочитать этот раздел, чтобы "
"понять, как Tarantool позволяет администраторам не допустить "
"неавторизованный доступ к базе данных и некоторым функциям."

#: ../doc/book/box/authentication.rst:12
msgid "Briefly:"
msgstr "Вкратце:"

#: ../doc/book/box/authentication.rst:14
msgid ""
"There is a method to guarantee with password checks that users really are "
"who they say they are (“authentication”)."
msgstr ""
"Существует метод, который с помощью паролей проверяет, что пользователи "
"являются теми, за кого себя выдают (“аутентификация”)."

#: ../doc/book/box/authentication.rst:17
msgid ""
"There is a :ref:`_user <box_space-user>` system space, where usernames and "
"password-hashes are stored."
msgstr ""
"Существует системный спейс :ref:`_user <box_space-user>`, где хранятся имена "
"пользователей и хеши паролей."

#: ../doc/book/box/authentication.rst:20
msgid ""
"There are functions for saying that certain users are allowed to do certain "
"things (“privileges”)."
msgstr ""
"Существуют функции, чтобы дать определенным пользователям право совершать "
"определенные действия (“права”)."

#: ../doc/book/box/authentication.rst:23
msgid ""
"There is a :ref:`_priv <box_space-priv>` system space, where privileges are "
"stored. Whenever a user tries to do an operation, there is a check whether "
"the user has the privilege to do the operation (“access control”)."
msgstr ""
"Существует системный спейс :ref:`_priv <box_space-priv>`, где хранятся "
"права. Когда пользователь пытается выполнить операцию, проводится проверка "
"на наличие у него прав на выполнение такой операции (“управление доступом”)."

#: ../doc/book/box/authentication.rst:27
msgid "Details follow."
msgstr "Подробная информация приводится ниже."

#: ../doc/book/box/authentication.rst:33
msgid "Users"
msgstr "Пользователи"

#: ../doc/book/box/authentication.rst:35
msgid ""
"There is a **current user** for any program working with Tarantool, local or "
"remote. If a remote connection is using a :ref:`binary port <admin-"
"security>`, the current user, by default, is '**guest**'. If the connection "
"is using an :ref:`admin-console port <admin-security>`, the current user is "
"'**admin**'. When executing a :ref:`Lua initialization script <index-"
"init_label>`, the current user is also ‘**admin**’."
msgstr ""
"Для любой локальной или удаленной программы, работающей с Tarantool'ом, есть "
"**текущий пользователь**. Если удаленное соединение использует :ref:"
"`бинарный порт <admin-security>`, то текущим пользователем, по умолчанию, "
"будет '**guest**' (гость). Если соединение использует :ref:`порт для "
"административной консоли <admin-security>`, текущим пользователем будет "
"'**admin**' (администратор). При выполнении :ref:`скрипта инициализации на "
"Lua <index-init_label>`, текущим пользователем также будет ‘**admin**’."

#: ../doc/book/box/authentication.rst:44
msgid ""
"The current user name can be found with :ref:`box.session.user() "
"<box_session-user>`."
msgstr ""
"Имя текущего пользователя можно узнать с помощью :ref:`box.session.user() "
"<box_session-user>`."

#: ../doc/book/box/authentication.rst:46
msgid "The current user can be changed:"
msgstr "Текущего пользователя можно изменить:"

#: ../doc/book/box/authentication.rst:48
msgid ""
"For a binary port connection -- with the :ref:`AUTH protocol command "
"<box_protocol-iproto_protocol>`, supported by most clients;"
msgstr ""
"Для соединения по бинарному порту -- с помощью :ref:`команды протокола AUTH "
"<box_protocol-iproto_protocol>`, которая поддерживается большинством "
"клиентов;"

#: ../doc/book/box/authentication.rst:52
msgid ""
"For an admin-console connection and in a Lua initialization script -- with :"
"ref:`box.session.su <box_session-su>`;"
msgstr ""
"Для соединения по порту для административной консоли и при выполнении "
"скрипта инициализации на Lua -- с помощью :ref:`box.session.su <box_session-"
"su>`;"

#: ../doc/book/box/authentication.rst:55
msgid ""
"For a binary-port connection invoking a stored function with the CALL "
"command -- if the :ref:`SETUID <box_schema-func_create>` property is enabled "
"for the function, Tarantool temporarily replaces the current user with the "
"function’s creator, with all the creator's privileges, during function "
"execution."
msgstr ""
"Для соединения по бинарному порту, которое вызывает хранимую функцию с "
"помощью команды CALL -- если для функции включена настройка :ref:`SETUID "
"<box_schema-func_create>`, Tarantool временно заменит текущего пользователя "
"на создателя функции со всеми правами создателя во время выполнения функции."

#: ../doc/book/box/authentication.rst:64
msgid "Passwords"
msgstr "Пароли"

#: ../doc/book/box/authentication.rst:66
msgid ""
"Each user (except 'guest') may have a **password**. The password is any "
"alphanumeric string."
msgstr ""
"У каждого пользователя (за исключением гостя 'guest') может быть **пароль**. "
"Паролем является любая буквенно-цифровая строка."

#: ../doc/book/box/authentication.rst:69
msgid ""
"Tarantool passwords are stored in the :ref:`_user <box_space-user>` system "
"space with a `cryptographic hash function <https://en.wikipedia.org/wiki/"
"Cryptographic_hash_function>`_ so that, if the password is ‘x’, the stored "
"hash-password is a long string like ‘lL3OvhkIPOKh+Vn9Avlkx69M/Ck=‘. When a "
"client connects to a Tarantool instance, the instance sends a random `salt "
"value <https://en.wikipedia.org/wiki/Salt_%28cryptography%29>`_ which the "
"client must mix with the hashed-password before sending to the instance. "
"Thus the original value ‘x’ is never stored anywhere except in the user’s "
"head, and the hashed value is never passed down a network wire except when "
"mixed with a random salt."
msgstr ""
"Пароли Tarantool'а хранятся в системном спейсе :ref:`_user <box_space-user>` "
"с `криптографической хеш-функцией <https://ru.wikipedia.org/wiki/%D0%9A"
"%D1%80%D0%B8%D0%BF%D1%82%D0%BE"
"%D0%B3%D1%80%D0%B0%D1%84%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_"
"%D1%85%D0%B5%D1%88-%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F>`_, так что "
"если паролем является ‘x’, хранится хеш-пароль в виде длинной строки, "
"например ‘lL3OvhkIPOKh+Vn9Avlkx69M/Ck=‘. Когда клиент подключается к "
"экземпляру Tarantool'а, экземпляр отправляет случайное `значение соль "
"<https://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D0%BB%D1%8C_(%D0%BA"
"%D1%80%D0%B8%D0%BF%D1%82%D0%BE%D0%B3%D1%80%D0%B0%D1%84%D0%B8%D1%8F)>`_, "
"которое клиент должен сложить вместе с хеш-паролем перед отправкой на "
"экземпляр. Таким образом, изначальное значение ‘x’ никогда не хранится "
"нигде, кроме как в голове самого пользователя, а хешированное значение "
"никогда не передается по сети, кроме как в смешанном с солью виде."

#: ../doc/book/box/authentication.rst:83
msgid ""
"For more details of the password hashing algorithm (e.g. for the purpose of "
"writing a new client application), read the `scramble.h <https://github.com/"
"tarantool/tarantool/blob/1.9/src/scramble.h>`_ header file."
msgstr ""
"Для получения дополнительной информации об алгоритме хеширования паролей "
"(например, для написания нового клиентского приложения), прочтите файл "
"заголовка `scramble.h <https://github.com/tarantool/tarantool/blob/1.9/ src/"
"scramble.h>`_."

#: ../doc/book/box/authentication.rst:88
msgid ""
"This system prevents malicious onlookers from finding passwords by snooping "
"in the log files or snooping on the wire. It is the same system that `MySQL "
"introduced several years ago <http://dev.mysql.com/doc/refman/5.7/en/"
"password-hashing.html>`_, which has proved adequate for medium-security "
"installations. Nevertheless, administrators should warn users that no system "
"is foolproof against determined long-term attacks, so passwords should be "
"guarded and changed occasionally. Administrators should also advise users to "
"choose long unobvious passwords, but it is ultimately up to the users to "
"choose or change their own passwords."
msgstr ""
"Система не дает злоумышленнику определить пароли путем просмотра файлов "
"журнала или слежения за активностью. Это та же система, `несколько лет назад "
"внедренная в MySQL <http://dev.mysql.com/doc/refman/5.7/en/password-hashing."
"html>`_, которой оказалось достаточно для объектов со средней степенью "
"безопасности. Тем не менее, администраторы должны предупреждать "
"пользователей, что никакая система не защищена полностью от постоянных "
"длительных атак, поэтому пароли следует охранять и периодически изменять. "
"Администраторы также должны рекомендовать пользователям выбирать длинные "
"неочевидные пароли, но сами пользователи выбирают свои пароли и изменяют их."

#: ../doc/book/box/authentication.rst:98
msgid ""
"There are two functions for managing passwords in Tarantool: :ref:`box."
"schema.user.passwd() <box_schema-user_passwd>` for changing a user's "
"password and :ref:`box.schema.user.password() <box_schema-user_password>` "
"for getting a hash of a user's password."
msgstr ""
"Для управления паролями в Tarantool'е есть две функции: :ref:`box.schema."
"user.passwd() <box_schema-user_passwd>` для изменения пароля пользователя и :"
"ref:`box.schema.user.password() <box_schema-user_password>` для получения "
"хеша пароля пользователя."

#: ../doc/book/box/authentication.rst:107
msgid "Owners and privileges"
msgstr "Владельцы и права"

#: ../doc/book/box/authentication.rst:109
msgid ""
"Tarantool has one database. It may be called \"box.schema\" or \"universe\". "
"The database contains database objects, including spaces, indexes, users, "
"roles, sequences, and functions."
msgstr ""
"В Tarantool'е одна база данных. Она может называться \"box.schema\" или "
"\"universe\". База данных содержит объекты базы данных, включая спейсы, "
"индексы, пользователей, роли, последовательности и функции."

#: ../doc/book/box/authentication.rst:113
msgid ""
"The **owner** of a database object is the user who created it. The owner of "
"the database itself, and the owner of objects that are created initially "
"(the system spaces and the default users) is '**admin**'."
msgstr ""
"**Владелец** объекта базы данных -- это пользователь, который создал его. "
"Владельцем самой базы данных и объектов, которые изначально были созданы "
"(системные спейсы и пользователи по умолчанию) является '**admin**'."

#: ../doc/book/box/authentication.rst:118
#, fuzzy
msgid ""
"Owners automatically have **privileges** for what they create. They can "
"share these privileges with other users or with roles, using :ref:`box."
"schema.user.grant <box_schema-user_grant>` requests. The following "
"privileges can be granted:"
msgstr ""
"У владельцев автоматически есть **права** на то, что они создают. Владельцы "
"могут поделиться этими правами с другими пользователями или ролями с помощью "
"запросов **box.schema.user.grant**. Можно предоставить следующие права:"

#: ../doc/book/box/authentication.rst:123
msgid "'read', e.g. allow select from a space"
msgstr "'read' (чтение), например, разрешить выборку из спейса"

#: ../doc/book/box/authentication.rst:124
msgid "'write', e.g. allow update on a space"
msgstr "'write' (запись), например, разрешить обновление спейса"

#: ../doc/book/box/authentication.rst:125
msgid ""
"'execute', e.g. allow call of a function, or (less commonly) allow use of a "
"role"
msgstr ""
"'execute' (выполнение), например, разрешить вызов функции, или (реже) "
"разрешить использование роли"

#: ../doc/book/box/authentication.rst:126
msgid ""
"'create', e.g. allow :ref:`box.schema.space.create <box_schema-"
"space_create>` (access to certain system spaces is also necessary)"
msgstr ""
"'create' (создание), например, разрешить выполнение :ref:`box.schema.space."
"create <box_schema-space_create>` (также необходим доступ к определенным "
"системным спейсам)"

#: ../doc/book/box/authentication.rst:129
msgid ""
"'alter', e.g. allow :ref:`box.space.x.index.y:alter <box_index-alter>` "
"(access to certain system spaces is also necessary)"
msgstr ""
"'alter' (изменение), например, разрешить выполнение :ref:`box.space.x.index."
"y:alter <box_index-alter>` (также необходим доступ к определенным системным "
"спейсам"

#: ../doc/book/box/authentication.rst:132
msgid ""
"'drop', e.g. allow :ref:`box.sequence.x:drop <box_schema-sequence_drop>` "
"(currently this can be granted but has no effect)"
msgstr ""
"'drop' (удаление), например, разрешить выполнение :ref:`box.sequence.x:drop "
"<box_schema-sequence_drop>` (сейчас можно настроить такие права, но они не "
"действуют)"

#: ../doc/book/box/authentication.rst:135
msgid ""
"'usage', e.g. whether any action is allowable regardless of other privileges "
"(sometimes revoking 'usage' is a convenient way to block a user temporarily "
"without dropping the user)"
msgstr ""
"'usage' (использование), например, допустимо ли любое действие, несмотря на "
"другие права (иногда удобно отменить право на использование, чтобы временно "
"заблокировать пользователя, не удаляя ег"

#: ../doc/book/box/authentication.rst:138
msgid "'session', e.g. whether the user can 'connect'."
msgstr ""
"'session' (сессия), например, может ли пользователь выполнить подключение "
"'connect'."

#: ../doc/book/box/authentication.rst:140
msgid ""
"To **create** objects, users need the 'create' privilege and at least 'read' "
"and 'write' privileges on the system space with a similar name (for example, "
"on the :ref:`_space <box_space-space>` if the user needs to create spaces)."
msgstr ""
"Чтобы **создавать** объекты, у пользователей должны быть права на создание "
"'create' и хотя бы права на чтение 'read' и запись 'write' в системный спейс "
"с похожим именем (например, на спейс :ref:`_space <box_space-space>`, если "
"пользователю необходимо создавать спейсы."

#: ../doc/book/box/authentication.rst:145
msgid ""
"To **access** objects, users need an appropriate privilege on the object "
"(for example, the 'execute' privilege on function F if the users need to "
"execute function F). See below some :ref:`examples for granting specific "
"privileges <authentication-owners_privileges-examples-specific>` that a "
"grantor -- that is, 'admin' or the object creator -- can make."
msgstr ""
"Чтобы **получать доступ** к объектам, у пользователей должны быть "
"соответствующие права на объект (например, права на выполнение 'execute' на "
"функцию F, если пользователям необходимо выполнить функцию F). См. ниже "
"некоторые :ref:`примеры предоставления определенных прав <authentication-"
"owners_privileges-examples-specific>`, которые может выдать 'admin' или "
"создатель объекта."

#: ../doc/book/box/authentication.rst:151
msgid ""
"To **drop** an object, users must be the object's creator or be 'admin'. As "
"the owner of the entire database, 'admin' can drop any object including "
"other users."
msgstr ""
"Чтобы **удалить** объект, пользователь должен быть создателем объекта или "
"'admin'. Как владелец всей базы данных, 'admin' может удалить любой объект, "
"в том числе других пользователей."

#: ../doc/book/box/authentication.rst:155
msgid ""
"To grant privileges to a user, the object owner says :ref:`grant() "
"<box_schema-user_grant>`. To revoke privileges from a user, the object owner "
"says :ref:`revoke() <box_schema-user_revoke>`. In either case, there are up "
"to five parameters:"
msgstr ""
"Чтобы предоставить права пользователю, владелец объекта выполняет команду :"
"ref:`grant() <box_schema-user_grant>`. Чтобы отменить права пользователя, "
"владелец объекта выполняет команду :ref:`revoke() <box_schema-user_revoke>`. "
"В любом случае можно использовать до пяти параметров:"

#: ../doc/book/box/authentication.rst:159
msgid "(user-name, privilege, object-type [, object-name [, options]])"
msgstr "(user-name, privilege, object-type [, object-name [, options]])"

#: ../doc/book/box/authentication.rst:163
msgid ""
"``user-name`` is the user (or role) that will receive or lose the privilege;"
msgstr ""
"``user-name`` -- это пользователь (или роль), который получит или потеряет "
"права;"

#: ../doc/book/box/authentication.rst:164
msgid ""
"``privilege`` is any of 'read', 'write', 'execute', 'create', 'alter', "
"'drop', 'usage', or 'session' (or a comma-separated list);"
msgstr ""
"``privilege`` -- это тип прав: 'read', 'write', 'execute', 'create', "
"'alter', 'drop', 'usage' или 'session' (или список прав, разделенных "
"запятыми);"

#: ../doc/book/box/authentication.rst:166
msgid ""
"``object-type`` is any of 'space', 'index', 'sequence', 'function', role-"
"name, or 'universe';"
msgstr ""
"``object-type`` -- это любой тип объекта: 'space' (спейс), 'index' (индекс), "
"'sequence' (последовательность), 'function' (функция), имя роли или "
"'universe';"

#: ../doc/book/box/authentication.rst:168
msgid ""
"``object-name`` is what the privilege is for (omitted if ``object-type`` is "
"'universe');"
msgstr ""
"``object-name`` -- это то, на что распространяются права (не указывается, "
"если ``object-type`` = 'universe');"

#: ../doc/book/box/authentication.rst:170
msgid ""
"``options`` is a list inside braces for example ``{if_not_exists=true|false}"
"`` (usually omitted because the default is acceptable)."
msgstr ""
"``options`` -- это список параметров, приведенный в скобках, например, "
"``{if_not_exists=true|false}`` (как правило, не указывается, поскольку "
"допускаются значения по умолчанию)."

#: ../doc/book/box/authentication.rst:173
msgid ""
"Every update of user privileges is reflected immediately in the existing "
"sessions and objects, e.g. functions."
msgstr ""

#: ../doc/book/box/authentication.rst:176
msgid "**Example for granting many privileges at once**"
msgstr "**Пример предоставления нескольких типов прав одновременно**"

#: ../doc/book/box/authentication.rst:178
msgid ""
"In this example user 'admin' grants many privileges on many objects to user "
"'U', with a single request."
msgstr ""
"В данном примере пользователь 'admin' выдает много типов прав на множество "
"объектов пользователю 'U' в едином запросе."

#: ../doc/book/box/authentication.rst:181
msgid "box.schema.user.grant('U','read,write,execute,create,drop','universe')"
msgstr "box.schema.user.grant('U','read,write,execute,create,drop','universe')"

#: ../doc/book/box/authentication.rst:187
msgid "**Examples for granting privileges for specific operations**"
msgstr "**Примеры предоставления прав на определенные действия**"

#: ../doc/book/box/authentication.rst:189
msgid ""
"In these examples the object's creator grants precisely the minimal "
"privileges necessary for particular operations, to user 'U'."
msgstr ""
"В данных примерах создатель объекта выдает пользователю 'U' минимально "
"необходимые права на определенные действия."

#: ../doc/book/box/authentication.rst:193
msgid ""
"-- So that 'U' can create spaces:\n"
"  box.schema.user.grant('U','create','universe')\n"
"  box.schema.user.grant('U','write', 'space', '_schema')\n"
"  box.schema.user.grant('U','write', 'space', '_space')\n"
"-- So that 'U' can  create indexes (assuming 'U' created the space)\n"
"  box.schema.user.grant('U','read', 'space', '_space')\n"
"  box.schema.user.grant('U','read,write', 'space', '_index')\n"
"-- So that 'U' can  create indexes on space T (assuming 'U' did not create "
"space T)\n"
"  box.schema.user.grant('U','create','space','T')\n"
"  box.schema.user.grant('U','read', 'space', '_space')\n"
"  box.schema.user.grant('U','write', 'space', '_index')\n"
"-- So that 'U' can  alter indexes on space T (assuming 'U' did not create "
"the index)\n"
"  box.schema.user.grant('U','alter','space','T')\n"
"  box.schema.user.grant('U','read','space','_space')\n"
"  box.schema.user.grant('U','read','space','_index')\n"
"  box.schema.user.grant('U','read','space','_space_sequence')\n"
"  box.schema.user.grant('U','write','space','_index')\n"
"-- So that 'U' can create users or roles:\n"
"  box.schema.user.grant('U','create','universe')\n"
"  box.schema.user.grant('U','read,write', 'space', '_user')\n"
"  box.schema.user.grant('U','write','space', '_priv')\n"
"-- So that 'U' can create sequences:\n"
"  box.schema.user.grant('U','create','universe')\n"
"  box.schema.user.grant('U','read,write','space','_sequence')\n"
"-- So that 'U' can create functions:\n"
"  box.schema.user.grant('U','create','universe')\n"
"  box.schema.user.grant('U','read,write','space','_func')\n"
"-- So that 'U' can grant access on objects that 'U' created\n"
"  box.schema.user.grant('U','read','space','_user')\n"
"-- So that 'U' can select or get from a space named 'T'\n"
"  box.schema.user.grant('U','read','space','T')\n"
"-- So that 'U' can update or insert or delete or truncate a space named 'T'\n"
"  box.schema.user.grant('U','write','space','T')\n"
"-- So that 'U' can execute a function named 'F'\n"
"  box.schema.user.grant('U','execute','function','F')\n"
"-- So that 'U' can use the \"S:next()\" function with a sequence named S\n"
"  box.schema.user.grant('U','read,write','sequence','S')\n"
"-- So that 'U' can use the \"S:set()\" or \"S:reset() function with a "
"sequence named S\n"
"  box.schema.user.grant('U','write','sequence','S')"
msgstr ""
"-- Чтобы 'U' мог создавать спейсы:\n"
"   box.schema.user.grant('U','create','universe')\n"
"   box.schema.user.grant('U','write', 'space', '_schema')\n"
"   box.schema.user.grant('U','write', 'space', '_space')\n"
"-- Чтобы 'U' мог создавать индексы (подразумевая, что 'U' создал спейс)\n"
"   box.schema.user.grant('U','read', 'space', '_space')\n"
"   box.schema.user.grant('U','read,write', 'space', '_index')\n"
"-- Чтобы 'U' мог создавать индексы в спейсы T (подразумевая, что 'U' не "
"создал спейс T)\n"
"   box.schema.user.grant('U','create','space','T')\n"
"   box.schema.user.grant('U','read', 'space', '_space')\n"
"   box.schema.user.grant('U','write', 'space', '_index')\n"
"-- Чтобы 'U' мог изменять индексы в спейсе T (подразумевая, что 'U' не "
"создал индекс)\n"
"   box.schema.user.grant('U','alter','space','T')\n"
"   box.schema.user.grant('U','read','space','_space')\n"
"   box.schema.user.grant('U','read','space','_index')\n"
"   box.schema.user.grant('U','read','space','_space_sequence')\n"
"   box.schema.user.grant('U','write','space','_index')\n"
"-- Чтобы 'U' мог создавать пользователей или роли:\n"
"   box.schema.user.grant('U','create','universe')\n"
"   box.schema.user.grant('U','read,write', 'space', '_user')\n"
"   box.schema.user.grant('U','write','space', '_priv')\n"
"-- Чтобы 'U' мог создавать последовательности:\n"
"   box.schema.user.grant('U','create','universe')\n"
"   box.schema.user.grant('U','read,write','space','_sequence')\n"
"-- Чтобы 'U' мог создавать функции:\n"
"   box.schema.user.grant('U','create','universe')\n"
"   box.schema.user.grant('U','read,write','space','_func')\n"
"-- Чтобы 'U' мог выдавать права на созданные им объекты:\n"
"   box.schema.user.grant('U','read','space','_user')\n"
"-- Чтобы 'U' мог производить выборку или получать данные из спейса под "
"названием 'T'\n"
"   box.schema.user.grant('U','read','space','T')\n"
"-- Чтобы 'U' мог производить обновление, вставку, удаление или очистку "
"спейса под названием 'T'\n"
"   box.schema.user.grant('U','write','space','T')\n"
"-- Чтобы 'U' мог выполнять функцию под названием 'F'\n"
"   box.schema.user.grant('U','execute','function','F')\n"
"-- Чтобы 'U' мог использовать функцию \"S:next()\" для последовательности "
"под названием S\n"
"   box.schema.user.grant('U','read,write','sequence','S')\n"
"-- Чтобы 'U' мог использовать функцию \"S:set()\" или \"S:reset()\" для "
"последовательности под названием S\n"
"  box.schema.user.grant('U','write','sequence','S')"

#: ../doc/book/box/authentication.rst:235
msgid "**Example for creating users and objects then granting privileges**"
msgstr "**Пример создания пользователей и объектов и последующей выдачи прав**"

#: ../doc/book/box/authentication.rst:237
msgid ""
"Here we create a Lua function that will be executed under the user id of its "
"creator, even if called by another user."
msgstr ""
"Здесь создадим Lua-функциб, которая будет выполняться от ID пользователя, "
"который является ее создателем, даже если она вызывается другим "
"пользователем."

#: ../doc/book/box/authentication.rst:240
msgid ""
"First, we create two spaces ('u' and 'i') and grant a no-password user "
"('internal') full access to them. Then we define a function "
"('read_and_modify') and the no-password user becomes this function's "
"creator. Finally, we grant another user ('public_user') access to execute "
"Lua functions created by the no-password user."
msgstr ""
"Для начала создадим два спейса ('u' и 'i') и дадим полный доступ к ним "
"пользователю без пароля ('internal'). Затем определим функцию "
"('read_and_modify'), и пользователь без пароля становится создателем "
"функции. Наконец, дадим другому пользователю ('public_user') доступ на "
"выполнение Lua-функций, созданных пользователем без пароля."

#: ../doc/book/box/authentication.rst:245
msgid ""
"box.schema.space.create('u')\n"
"box.schema.space.create('i')\n"
"box.space.u:create_index('pk')\n"
"box.space.i:create_index('pk')\n"
"\n"
"box.schema.user.create('internal')\n"
"\n"
"box.schema.user.grant('internal', 'read,write', 'space', 'u')\n"
"box.schema.user.grant('internal', 'read,write', 'space', 'i')\n"
"box.schema.user.grant('internal', 'create', 'universe')\n"
"box.schema.user.grant('internal', 'read,write', 'space', '_func')\n"
"\n"
"function read_and_modify(key)\n"
"  local u = box.space.u\n"
"  local i = box.space.i\n"
"  local fiber = require('fiber')\n"
"  local t = u:get{key}\n"
"  if t ~= nil then\n"
"    u:put{key, box.session.uid()}\n"
"    i:put{key, fiber.time()}\n"
"  end\n"
"end\n"
"\n"
"box.session.su('internal')\n"
"box.schema.func.create('read_and_modify', {setuid= true})\n"
"box.session.su('admin')\n"
"box.schema.user.create('public_user', {password = 'secret'})\n"
"box.schema.user.grant('public_user', 'execute', 'function', "
"'read_and_modify')"
msgstr ""
"box.schema.space.create('u')\n"
"box.schema.space.create('i')\n"
"box.space.u:create_index('pk')\n"
"box.space.i:create_index('pk')\n"
"\n"
"box.schema.user.create('internal')\n"
"\n"
"box.schema.user.grant('internal', 'read,write', 'space', 'u')\n"
"box.schema.user.grant('internal', 'read,write', 'space', 'i')\n"
"box.schema.user.grant('internal', 'create', 'universe')\n"
"box.schema.user.grant('internal', 'read,write', 'space', '_func')\n"
"\n"
"function read_and_modify(key)\n"
"  local u = box.space.u\n"
"  local i = box.space.i\n"
"  local fiber = require('fiber')\n"
"  local t = u:get{key}\n"
"  if t ~= nil then\n"
"    u:put{key, box.session.uid()}\n"
"    i:put{key, fiber.time()}\n"
"  end\n"
"end\n"
"\n"
"box.session.su('internal')\n"
"box.schema.func.create('read_and_modify', {setuid= true})\n"
"box.session.su('admin')\n"
"box.schema.user.create('public_user', {password = 'secret'})\n"
"box.schema.user.grant('public_user', 'execute', 'function', "
"'read_and_modify')"

#: ../doc/book/box/authentication.rst:280
msgid "Roles"
msgstr "Роли"

#: ../doc/book/box/authentication.rst:282
msgid ""
"A **role** is a container for privileges which can be granted to regular "
"users. Instead of granting or revoking individual privileges, you can put "
"all the privileges in a role and then grant or revoke the role."
msgstr ""
"**Роль** представляет собой контейнер для прав, которые можно предоставить "
"обычным пользователям. Вместо того, чтобы предоставлять или отменять "
"индивидуальные права, можно поместить все права в роль, а затем назначить "
"или отменить роль."

#: ../doc/book/box/authentication.rst:286
msgid ""
"Role information is stored in the :ref:`_user <box_space-user>` space, but "
"the third field in the tuple -- the type field -- is ‘role’ rather than "
"‘user’."
msgstr ""
"Информация о роли хранится в спейсе :ref:`_user <box_space-user>`, но третье "
"поле кортежа -- поле типа -- это ‘роль’, а не ‘пользователь’."

#: ../doc/book/box/authentication.rst:289
msgid ""
"An important feature in role management is that roles can be **nested**. For "
"example, role R1 can be granted a privilege \"role R2\", so users with the "
"role R1 will subsequently get all privileges from both roles R1 and R2. In "
"other words, a user gets all the privileges that are granted to a user’s "
"roles, directly or indirectly."
msgstr ""
"В управлении доступом на основе ролей один из главных моментов -- это то, "
"что роли могут быть **вложенными**. Например, роли R1 можно предоставить "
"право типа \"роль R2\", то есть пользователи с ролью R1 тогда получат все "
"права роли R1 и роли R2. Другими словами, пользователь получает все права, "
"которые предоставляются ролям пользователя напрямую и опосредованно."

#: ../doc/book/box/authentication.rst:295
msgid ""
"There are actually two ways to grant or revoke a role: :samp:`box.schema."
"user.grant-or-revoke({user-name-or-role-name},'execute', 'role',{role-"
"name}...)` or :samp:`box.schema.user.grant-or-revoke({user-name-or-role-"
"name},{role-name}...)`. The second way is preferable."
msgstr ""
"Фактически есть два способа предоставить или отменить роль: :samp:`box."
"schema.user.grant-or-revoke({имя-пользователя-или-имя-роли},'execute', "
"'role',{имя-роли}...)` или :samp:`box.schema.user.grant-or-revoke({имя-"
"пользователя-или-имя-роли},{имя-роли}...)`. Рекомендуется использовать "
"второй способ."

#: ../doc/book/box/authentication.rst:301
msgid "The 'usage' and 'session' privileges cannot be granted to roles."
msgstr "Права типов 'usage' и 'session' нельзя предоставить для роли."

#: ../doc/book/box/authentication.rst:303
msgid "**Example**"
msgstr "**Пример**"

#: ../doc/book/box/authentication.rst:305
msgid ""
"-- This example will work for a user with many privileges, such as 'admin'\n"
"-- or a user with the pre-defined 'super' role\n"
"-- Create space T with a primary index\n"
"box.schema.space.create('T')\n"
"box.space.T:create_index('primary', {})\n"
"-- Create user U1 so that later we can change the current user to U1\n"
"box.schema.user.create('U1')\n"
"-- Create two roles, R1 and R2\n"
"box.schema.role.create('R1')\n"
"box.schema.role.create('R2')\n"
"-- Grant role R2 to role R1 and role R1 to user U1 (order doesn't matter)\n"
"-- There are two ways to grant a role; here we use the shorter way\n"
"box.schema.role.grant('R1', 'R2')\n"
"box.schema.user.grant('U1', 'R1')\n"
"-- Grant read/write privileges for space T to role R2\n"
"-- (but not to role R1 and not to user U1)\n"
"box.schema.role.grant('R2', 'read,write', 'space', 'T')\n"
"-- Change the current user to user U1\n"
"box.session.su('U1')\n"
"-- An insertion to space T will now succeed because, due to nested roles,\n"
"-- user U1 has write privilege on space T\n"
"box.space.T:insert{1}"
msgstr ""
"-- Этот пример сработает для пользователя со множеством прав, например, "
"'admin'\n"
"-- или для пользователя с заданной ролью 'super'\n"
"-- Создать спейс T с первичным индексом\n"
"box.schema.space.create('T')\n"
"box.space.T:create_index('primary', {})\n"
"-- Создать пользователя U1, чтобы затем можно было заменить текущего "
"пользователя на U1\n"
"box.schema.user.create('U1')\n"
"-- Создать две роли, R1 и R2\n"
"box.schema.role.create('R1')\n"
"box.schema.role.create('R2')\n"
"-- Предоставить роль R2 для роли R1, а роль R1 пользователю U1 (порядок не "
"имеет значения)\n"
"-- Есть два способа предоставить роль, здесь используется более короткий "
"способ\n"
"box.schema.role.grant('R1', 'R2')\n"
"box.schema.user.grant('U1', 'R1')\n"
"-- Предоставить права на чтение/запись на спейс T для роли R2\n"
"-- (но не для роли R1 и не пользователю U1)\n"
"box.schema.role.grant('R2', 'read,write', 'space', 'T')\n"
"-- Изменить текущего пользователя на пользователя U1\n"
"box.session.su('U1')\n"
"-- Теперь вставка в спейс T сработает, потому что благодаря вложенным "
"ролям,\n"
"-- у пользователя U1 есть права на запись в спейс T\n"
"box.space.T:insert{1}"

#: ../doc/book/box/authentication.rst:330
msgid ""
"For more detail see :ref:`box.schema.user.grant() <box_schema-user_grant>` "
"and :ref:`box.schema.role.grant() <box_schema-role_grant>` in the built-in "
"modules reference."
msgstr ""
"Более подробную информацию см. в справочнике по встроенным модулям: :ref:"
"`box.schema.user.grant() <box_schema-user_grant>` и :ref:`box.schema.role."
"grant() <box_schema-role_grant>`."

#: ../doc/book/box/authentication.rst:339
msgid "Sessions and security"
msgstr "Сессии и безопасность"

#: ../doc/book/box/authentication.rst:341
msgid "A **session** is the state of a connection to Tarantool. It contains:"
msgstr "**Сессия** -- это состояние подключения к Tarantool'у. Она содержит:"

#: ../doc/book/box/authentication.rst:343
msgid "an integer id identifying the connection,"
msgstr "идентификатор в виде целого числа, определяющий соединение,"

#: ../doc/book/box/authentication.rst:344
msgid ""
"the :ref:`current user <authentication-users>` associated with the "
"connection,"
msgstr ""
":ref:`текущий пользователь <authentication-users>`, использующий соединение,"

#: ../doc/book/box/authentication.rst:345
msgid "text description of the connected peer, and"
msgstr "текстовое описание подключенного узла и"

#: ../doc/book/box/authentication.rst:346
msgid "session local state, such as Lua variables and functions."
msgstr "локальное состояние сессии, например, переменные и функции на Lua."

#: ../doc/book/box/authentication.rst:348
msgid ""
"In Tarantool, a single session can execute multiple concurrent transactions. "
"Each transaction is identified by a unique integer id, which can be queried "
"at start of the transaction using :ref:`box.session.sync() <box_session-"
"sync>`."
msgstr ""
"В Tarantool'е отдельная сессия может выполнять несколько транзакций "
"одновременно. Каждая транзакция определяется по уникальному идентификатору в "
"виде целого числа, который можно запросить в начале транзакции с помощью :"
"ref:`box.session.sync() <box_session-sync>`."

#: ../doc/book/box/authentication.rst:354
msgid ""
"To track all connects and disconnects, you can use :ref:`connection and "
"authentication triggers <triggers>`."
msgstr ""
"Чтобы отследить все подключения и отключения, можно использовать :ref:"
"`триггеры соединений и аутентификации <triggers>`."
