# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-04 10:02+0000\n"
"PO-Revision-Date: 2019-12-20 21:24+0300\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
"Generated-By: Babel 2.7.0\n"

#: ../doc/book/admin/daemon_supervision.rst:5
msgid "Daemon supervision"
msgstr "Контроль за фоновыми программами"

#: ../doc/book/admin/daemon_supervision.rst:11
msgid "Server signals"
msgstr "Сигналы от сервера"

#: ../doc/book/admin/daemon_supervision.rst:13
msgid ""
"Tarantool processes these signals during the event loop in the transaction "
"processor thread:"
msgstr ""
"Во время событийного цикла в потоке обработки транзакций Tarantool "
"обрабатывает следующие сигналы:"

#: ../doc/book/admin/daemon_supervision.rst:22
msgid "Signal"
msgstr "Сигнал"

#: ../doc/book/admin/daemon_supervision.rst:22
msgid "Effect"
msgstr "Эффект"

#: ../doc/book/admin/daemon_supervision.rst:24
msgid "SIGHUP"
msgstr "SIGHUP"

#: ../doc/book/admin/daemon_supervision.rst:24
msgid ""
"May cause log file rotation. See the :ref:`example <cfg_logging-"
"logging_example>` in reference on Tarantool logging parameters."
msgstr ""
"Может привести к ротации журналов, см. :ref:`пример <cfg_logging-"
"logging_example>` в справочнике по параметрам журналирования Tarantool'а."

#: ../doc/book/admin/daemon_supervision.rst:28
msgid "SIGUSR1"
msgstr "SIGUSR1"

#: ../doc/book/admin/daemon_supervision.rst:28
msgid ""
"May cause a database checkpoint. See :ref:`box.snapshot <box-snapshot>`."
msgstr ""
"Может привести к созданию снимка состояния базы данных, см. описание "
"функции :ref:`box.snapshot <box-snapshot>`."

#: ../doc/book/admin/daemon_supervision.rst:31
msgid "SIGTERM"
msgstr "SIGTERM"

#: ../doc/book/admin/daemon_supervision.rst:31
msgid "May cause graceful shutdown (information will be saved first)."
msgstr ""
"Может привести к корректному завершению работы (с предварительным "
"сохранением всех данных)."

#: ../doc/book/admin/daemon_supervision.rst:34
msgid "SIGINT (also known as keyboard interrupt)"
msgstr "SIGINT (или \"прерывание от клавиатуры\")"

#: ../doc/book/admin/daemon_supervision.rst:34
msgid "May cause graceful shutdown."
msgstr "Может привести к корректному завершению работы."

#: ../doc/book/admin/daemon_supervision.rst:38
msgid "SIGKILL"
msgstr "SIGKILL"

#: ../doc/book/admin/daemon_supervision.rst:38
msgid "Causes an immediate shutdown."
msgstr "Приводит к аварийному завершению работы."

#: ../doc/book/admin/daemon_supervision.rst:41
msgid ""
"Other signals will result in behavior defined by the operating system. "
"Signals other than SIGKILL may be ignored, especially if Tarantool is "
"executing a long-running procedure which prevents return to the event loop "
"in the transaction processor thread."
msgstr ""
"Остальные сигналы приводят к заданному операционной системой поведению. Все "
"сигналы, за исключением SIGKILL, можно игнорировать, особенно если Tarantool "
"выполняет длительную процедуру и не может вернуться в событийный цикл в "
"потоке обработки транзакций."

#: ../doc/book/admin/daemon_supervision.rst:50
msgid "Automatic instance restart"
msgstr "Автоматическая перезагрузка экземпляра"

#: ../doc/book/admin/daemon_supervision.rst:52
msgid ""
"On ``systemd``-enabled platforms, ``systemd`` automatically restarts all "
"Tarantool instances in case of failure. To demonstrate it, let’s try to "
"destroy an instance:"
msgstr ""
"На платформах, где доступна утилита ``systemd``, ``systemd`` автоматически "
"перезагружает все экземпляры Tarantool'а при сбое. Чтобы продемонстрировать "
"это, отключим один из экземпляров:"

#: ../doc/book/admin/daemon_supervision.rst:56
msgid ""
"$ systemctl status tarantool@my_app|grep PID\n"
"Main PID: 5885 (tarantool)\n"
"$ tarantoolctl enter my_app\n"
"/bin/tarantoolctl: Found my_app.lua in /etc/tarantool/instances.available\n"
"/bin/tarantoolctl: Connecting to /var/run/tarantool/my_app.control\n"
"/bin/tarantoolctl: connected to unix/:/var/run/tarantool/my_app.control\n"
"unix/:/var/run/tarantool/my_app.control> os.exit(-1)\n"
"/bin/tarantoolctl: unix/:/var/run/tarantool/my_app.control: Remote host "
"closed connection"
msgstr ""
"$ systemctl status tarantool@my_app|grep PID\n"
"Main PID: 5885 (tarantool)\n"
"$ tarantoolctl enter my_app\n"
"/bin/tarantoolctl: Found my_app.lua in /etc/tarantool/instances.available\n"
"/bin/tarantoolctl: Connecting to /var/run/tarantool/my_app.control\n"
"/bin/tarantoolctl: connected to unix/:/var/run/tarantool/my_app.control\n"
"unix/:/var/run/tarantool/my_app.control> os.exit(-1)\n"
"/bin/tarantoolctl: unix/:/var/run/tarantool/my_app.control: Remote host "
"closed connection"

#: ../doc/book/admin/daemon_supervision.rst:67
msgid "Now let’s make sure that ``systemd`` has restarted the instance:"
msgstr "А теперь убедимся, что ``systemd`` перезапустила его:"

#: ../doc/book/admin/daemon_supervision.rst:69
msgid ""
"$ systemctl status tarantool@my_app|grep PID\n"
"Main PID: 5914 (tarantool)"
msgstr ""
"$ systemctl status tarantool@my_app|grep PID\n"
"Main PID: 5914 (tarantool)"

#: ../doc/book/admin/daemon_supervision.rst:74
msgid "Finally, let’s check the boot logs:"
msgstr "И под конец проверим содержимое журнала загрузки:"

#: ../doc/book/admin/daemon_supervision.rst:76
msgid ""
"$ journalctl -u tarantool@my_app -n 8\n"
"-- Logs begin at Fri 2016-01-08 12:21:53 MSK, end at Thu 2016-01-21 21:09:45 "
"MSK. --\n"
"Jan 21 21:09:45 localhost.localdomain systemd[1]: tarantool@my_app.service: "
"Unit entered failed state.\n"
"Jan 21 21:09:45 localhost.localdomain systemd[1]: tarantool@my_app.service: "
"Failed with result 'exit-code'.\n"
"Jan 21 21:09:45 localhost.localdomain systemd[1]: tarantool@my_app.service: "
"Service hold-off time over, scheduling restart.\n"
"Jan 21 21:09:45 localhost.localdomain systemd[1]: Stopped Tarantool Database "
"Server.\n"
"Jan 21 21:09:45 localhost.localdomain systemd[1]: Starting Tarantool "
"Database Server...\n"
"Jan 21 21:09:45 localhost.localdomain tarantoolctl[5910]: /usr/bin/"
"tarantoolctl: Found my_app.lua in /etc/tarantool/instances.available\n"
"Jan 21 21:09:45 localhost.localdomain tarantoolctl[5910]: /usr/bin/"
"tarantoolctl: Starting instance...\n"
"Jan 21 21:09:45 localhost.localdomain systemd[1]: Started Tarantool Database "
"Server."
msgstr ""
"$ journalctl -u tarantool@my_app -n 8\n"
"-- Записи начинаются в пятницу 08.01.2016 12:21:53 MSK, заканчиваются в "
"четверг 21.01.2016 2016-01-21 21:09:45 MSK. --\n"
"Jan 21 21:09:45 localhost.localdomain systemd[1]: tarantool@my_app.service: "
"Unit entered failed state.\n"
"Jan 21 21:09:45 localhost.localdomain systemd[1]: tarantool@my_app.service: "
"Failed with result 'exit-code'.\n"
"Jan 21 21:09:45 localhost.localdomain systemd[1]: tarantool@my_app.service: "
"Service hold-off time over, scheduling restart.\n"
"Jan 21 21:09:45 localhost.localdomain systemd[1]: Stopped Tarantool Database "
"Server.\n"
"Jan 21 21:09:45 localhost.localdomain systemd[1]: Starting Tarantool "
"Database Server...\n"
"Jan 21 21:09:45 localhost.localdomain tarantoolctl[5910]: /usr/bin/"
"tarantoolctl: Found my_app.lua in /etc/tarantool/instances.available\n"
"Jan 21 21:09:45 localhost.localdomain tarantoolctl[5910]: /usr/bin/"
"tarantoolctl: Starting instance...\n"
"Jan 21 21:09:45 localhost.localdomain systemd[1]: Started Tarantool Database "
"Server."

#: ../doc/book/admin/daemon_supervision.rst:93
msgid "Core dumps"
msgstr "Создание дампов памяти"

#: ../doc/book/admin/daemon_supervision.rst:95
msgid ""
"Tarantool makes a core dump if it receives any of the following signals: "
"SIGSEGV, SIGFPE, SIGABRT or SIGQUIT. This is automatic if Tarantool crashes."
msgstr ""
"Tarantool создает дамп памяти при получении одного из следующих сигналов: "
"SIGSEGV, SIGFPE, SIGABRT или SIGQUIT. При сбое Tarantool'а дамп создается "
"автоматически."

#: ../doc/book/admin/daemon_supervision.rst:98
msgid ""
"On ``systemd``-enabled platforms, ``coredumpctl`` automatically saves core "
"dumps and stack traces in case of a crash. Here is a general \"how to\" for "
"how to enable core dumps on a Unix system:"
msgstr ""
"На платформах, где доступна утилита ``systemd``, ``coredumpctl`` "
"автоматически сохраняет дампы памяти и трассировку стека при аварийном "
"завершении Tarantool-сервера. Вот как включить создание дампов памяти в Unix-"
"системе:"

#: ../doc/book/admin/daemon_supervision.rst:102
msgid ""
"Ensure session limits are configured to enable core dumps, i.e. say ``ulimit "
"-c unlimited``. Check  \"man 5 core\" for other reasons why a core dump may "
"not be produced."
msgstr ""
"Убедитесь, что лимиты для сессии установлены таким образом, чтобы можно было "
"создавать дампы памяти, -- выполните команду ``ulimit -c unlimited``.  Также "
"проверьте \"man 5 core\" на другие причины, по которым дамп памяти  может не "
"создаваться."

#: ../doc/book/admin/daemon_supervision.rst:106
msgid ""
"Set a directory for writing core dumps to, and make sure that the directory "
"is writable. On Linux, the directory path is set in a kernel parameter "
"configurable via ``/proc/sys/kernel/core_pattern``."
msgstr ""
"Создайте директорию для записи дампов памяти и убедитесь, что в эту "
"директорию действительно можно производить запись. На Linux путь до "
"директории задается в параметре ядра, который настраивается через ``/proc/"
"sys/kernel/core_pattern``."

#: ../doc/book/admin/daemon_supervision.rst:110
msgid ""
"Make sure that core dumps include stack trace information. If you use a "
"binary Tarantool distribution, this is automatic. If you build Tarantool "
"from source, you will not get detailed information if you pass ``-"
"DCMAKE_BUILD_TYPE=Release`` to CMake."
msgstr ""
"Убедитесь, что дампы памяти включают трассировку стека. При использовании  "
"бинарного дистрибутива Tarantool'а эта информация включается автоматически. "
"При сборке Tarantool'а из исходников, если передать CMake флаг ``-"
"DCMAKE_BUILD_TYPE=Release``, вы не получите подробной информации."

#: ../doc/book/admin/daemon_supervision.rst:115
msgid ""
"To simulate a crash, you can execute an illegal command against a Tarantool "
"instance:"
msgstr ""
"Для симуляции сбоя можно попытаться выполнить нелегальную команду на "
"работающем экземпляре Tarantool'а:"

#: ../doc/book/admin/daemon_supervision.rst:118
msgid ""
"$ # !!! please never do this on a production system !!!\n"
"$ tarantoolctl enter my_app\n"
"unix/:/var/run/tarantool/my_app.control> require('ffi').cast('char *', 0)[0] "
"= 48\n"
"/bin/tarantoolctl: unix/:/var/run/tarantool/my_app.control: Remote host "
"closed connection"
msgstr ""
"$ # !!! пожалуйста, никогда не делайте этого на боевом сервере !!!\n"
"$ tarantoolctl enter my_app\n"
"unix/:/var/run/tarantool/my_app.control> require('ffi').cast('char *', 0)[0] "
"= 48\n"
"/bin/tarantoolctl: unix/:/var/run/tarantool/my_app.control: Remote host "
"closed connection"

#: ../doc/book/admin/daemon_supervision.rst:125
msgid ""
"Alternatively, if you know the process ID of the instance (here we refer to "
"it as $PID), you can abort a Tarantool instance by running ``gdb`` debugger:"
msgstr ""
"Есть другой способ: если вы знаете PID экземпляра ($PID в нашем примере),  "
"можно остановить этот экземпляр, запустив отладчик ``gdb``:"

#: ../doc/book/admin/daemon_supervision.rst:128
msgid "$ gdb -batch -ex \"generate-core-file\" -p $PID"
msgstr "$ gdb -batch -ex \"generate-core-file\" -p $PID"

#: ../doc/book/admin/daemon_supervision.rst:132
msgid "or manually sending a SIGABRT signal:"
msgstr "или послав вручную сигнал SIGABRT:"

#: ../doc/book/admin/daemon_supervision.rst:134
msgid "$ kill -SIGABRT $PID"
msgstr "$ kill -SIGABRT $PID"

#: ../doc/book/admin/daemon_supervision.rst:140
msgid "To find out the process id of the instance ($PID), you can:"
msgstr "Чтобы узнать PID экземпляра, можно:"

#: ../doc/book/admin/daemon_supervision.rst:142
msgid ""
"look it up in the instance's :ref:`box.info.pid <box_introspection-"
"box_info>`,"
msgstr ""
"посмотреть его с помощью :ref:`box.info.pid <box_introspection-box_info>`,"

#: ../doc/book/admin/daemon_supervision.rst:144
msgid "find it with ``ps -A | grep tarantool``, or"
msgstr "использовать команду ``ps -A | grep tarantool``, или"

#: ../doc/book/admin/daemon_supervision.rst:146
msgid "say ``systemctl status tarantool@my_app|grep PID``."
msgstr "выполнить ``systemctl status tarantool@my_app|grep PID``."

#: ../doc/book/admin/daemon_supervision.rst:148
msgid ""
"On a ``systemd-enabled`` system, to see the latest crashes of the Tarantool "
"daemon, say:"
msgstr ""
"Чтобы посмотреть на последние сбои Tarantool-демона на платформах, где "
"доступна утилита ``systemd``, выполните команду:"

#: ../doc/book/admin/daemon_supervision.rst:151
msgid ""
"$ coredumpctl list /usr/bin/tarantool\n"
"MTIME                            PID   UID   GID SIG PRESENT EXE\n"
"Sat 2016-01-23 15:21:24 MSK   20681  1000  1000   6   /usr/bin/tarantool\n"
"Sat 2016-01-23 15:51:56 MSK   21035   995   992   6   /usr/bin/tarantool"
msgstr ""
"$ coredumpctl list /usr/bin/tarantool\n"
"MTIME                            PID   UID   GID SIG PRESENT EXE\n"
"Sat 2016-01-23 15:21:24 MSK   20681  1000  1000   6   /usr/bin/tarantool\n"
"Sat 2016-01-23 15:51:56 MSK   21035   995   992   6   /usr/bin/tarantool"

#: ../doc/book/admin/daemon_supervision.rst:158
msgid "To save a core dump into a file, say:"
msgstr "Чтобы сохранить дамп памяти в файл, выполните команду:"

#: ../doc/book/admin/daemon_supervision.rst:160
msgid "$ coredumpctl -o filename.core info <pid>"
msgstr "$ coredumpctl -o filename.core info <pid>"

#: ../doc/book/admin/daemon_supervision.rst:168
msgid "Stack traces"
msgstr "Трассировка стека"

#: ../doc/book/admin/daemon_supervision.rst:170
msgid ""
"Since Tarantool stores tuples in memory, core files may be large. For "
"investigation, you normally don't need the whole file, but only a \"stack "
"trace\" or \"backtrace\"."
msgstr ""
"Так как Tarantool хранит кортежи в памяти, файлы с дампами памяти могут быть "
"довольно большими. Чтобы найти проблему, обычно целый файл не нужен -- "
"достаточно только \"трассировки стека\" или \"обратной трассировки\"."

#: ../doc/book/admin/daemon_supervision.rst:174
msgid "To save a stack trace into a file, say:"
msgstr "Чтобы сохранить трассировку стека в файл, выполните команду:"

#: ../doc/book/admin/daemon_supervision.rst:176
msgid ""
"$ gdb -se \"tarantool\" -ex \"bt full\" -ex \"thread apply all bt\" --batch -"
"c core> /tmp/tarantool_trace.txt"
msgstr ""
"$ gdb -se \"tarantool\" -ex \"bt full\" -ex \"thread apply all bt\" --batch -"
"c core> /tmp/tarantool_trace.txt"

#: ../doc/book/admin/daemon_supervision.rst:180
msgid "where:"
msgstr "где:"

#: ../doc/book/admin/daemon_supervision.rst:182
msgid "\"tarantool\" is the path to the Tarantool executable,"
msgstr "\"tarantool\" -- это путь до исполняемого файла Tarantool'а,"

#: ../doc/book/admin/daemon_supervision.rst:183
msgid "\"core\" is the path to the core file, and"
msgstr "\"core\" -- это путь до файла с дампом памяти, и"

#: ../doc/book/admin/daemon_supervision.rst:184
msgid ""
"\"/tmp/tarantool_trace.txt\" is a sample path to a file for saving the stack "
"trace."
msgstr ""
"\"/tmp/tarantool_trace.txt\" -- это пример пути до файла, в который "
"сохраняется трассировка стека."

#: ../doc/book/admin/daemon_supervision.rst:188
msgid ""
"Occasionally, you may find that the trace file contains output without debug "
"symbols – the lines will contain ”??” instead of names. If this happens, "
"check the instructions on these Tarantool wiki pages: `How to debug core "
"dump of stripped tarantool <https://github.com/tarantool/tarantool/wiki/How-"
"to-debug-core-dump-of-stripped-tarantool>`_ and `How to debug core from "
"different OS <https://github.com/tarantool/tarantool/wiki/How-to-debug-core-"
"from-different-OS>`_."
msgstr ""
"Иногда может оказаться, что файл с трассировкой стека не содержит отладочных "
"символов -- в таких строках вместо имени будет стоять ”??”. Если это "
"произошло, ознакомьтесь с инструкциями на этих двух wiki-страницах "
"Tarantool'а: `How to debug core dump of stripped tarantool  <https://github."
"com/tarantool/tarantool/wiki/How-to-debug-core-dump-of- stripped-"
"tarantool>`_ и `How to debug core from different OS <https://github.com/"
"tarantool/tarantool/wiki/How-to-debug-core-from- different-OS>`_."

#: ../doc/book/admin/daemon_supervision.rst:195
msgid "To see the stack trace and other useful information in console, say:"
msgstr ""
"Чтобы получить трассировку стека и прочую полезную информацию в консоли, "
"выполните команду:"

#: ../doc/book/admin/daemon_supervision.rst:197
msgid ""
"$ coredumpctl info 21035\n"
"          PID: 21035 (tarantool)\n"
"          UID: 995 (tarantool)\n"
"          GID: 992 (tarantool)\n"
"       Signal: 6 (ABRT)\n"
"    Timestamp: Sat 2016-01-23 15:51:42 MSK (4h 36min ago)\n"
" Command Line: tarantool my_app.lua <running>\n"
"   Executable: /usr/bin/tarantool\n"
"Control Group: /system.slice/system-tarantool.slice/tarantool@my_app."
"service\n"
"         Unit: tarantool@my_app.service\n"
"        Slice: system-tarantool.slice\n"
"      Boot ID: 7c686e2ef4dc4e3ea59122757e3067e2\n"
"   Machine ID: a4a878729c654c7093dc6693f6a8e5ee\n"
"     Hostname: localhost.localdomain\n"
"      Message: Process 21035 (tarantool) of user 995 dumped core.\n"
"\n"
"               Stack trace of thread 21035:\n"
"               #0  0x00007f84993aa618 raise (libc.so.6)\n"
"               #1  0x00007f84993ac21a abort (libc.so.6)\n"
"               #2  0x0000560d0a9e9233 _ZL12sig_fatal_cbi (tarantool)\n"
"               #3  0x00007f849a211220 __restore_rt (libpthread.so.0)\n"
"               #4  0x0000560d0aaa5d9d lj_cconv_ct_ct (tarantool)\n"
"               #5  0x0000560d0aaa687f lj_cconv_ct_tv (tarantool)\n"
"               #6  0x0000560d0aaabe33 lj_cf_ffi_meta___newindex (tarantool)\n"
"               #7  0x0000560d0aaae2f7 lj_BC_FUNCC (tarantool)\n"
"               #8  0x0000560d0aa9aabd lua_pcall (tarantool)\n"
"               #9  0x0000560d0aa71400 lbox_call (tarantool)\n"
"               #10 0x0000560d0aa6ce36 lua_fiber_run_f (tarantool)\n"
"               #11 0x0000560d0a9e8d0c "
"_ZL16fiber_cxx_invokePFiP13__va_list_tagES0_ (tarantool)\n"
"               #12 0x0000560d0aa7b255 fiber_loop (tarantool)\n"
"               #13 0x0000560d0ab38ed1 coro_init (tarantool)\n"
"               ..."
msgstr ""
"$ coredumpctl info 21035\n"
"          PID: 21035 (tarantool)\n"
"          UID: 995 (tarantool)\n"
"          GID: 992 (tarantool)\n"
"       Signal: 6 (ABRT)\n"
"    Timestamp: Sat 2016-01-23 15:51:42 MSK (4h 36min ago)\n"
" Command Line: tarantool my_app.lua <running>\n"
"   Executable: /usr/bin/tarantool\n"
"Control Group: /system.slice/system-tarantool.slice/tarantool@my_app."
"service\n"
"         Unit: tarantool@my_app.service\n"
"        Slice: system-tarantool.slice\n"
"      Boot ID: 7c686e2ef4dc4e3ea59122757e3067e2\n"
"   Machine ID: a4a878729c654c7093dc6693f6a8e5ee\n"
"     Hostname: localhost.localdomain\n"
"      Message: Process 21035 (tarantool) of user 995 dumped core.\n"
"\n"
"               Stack trace of thread 21035:\n"
"               #0  0x00007f84993aa618 raise (libc.so.6)\n"
"               #1  0x00007f84993ac21a abort (libc.so.6)\n"
"               #2  0x0000560d0a9e9233 _ZL12sig_fatal_cbi (tarantool)\n"
"               #3  0x00007f849a211220 __restore_rt (libpthread.so.0)\n"
"               #4  0x0000560d0aaa5d9d lj_cconv_ct_ct (tarantool)\n"
"               #5  0x0000560d0aaa687f lj_cconv_ct_tv (tarantool)\n"
"               #6  0x0000560d0aaabe33 lj_cf_ffi_meta___newindex (tarantool)\n"
"               #7  0x0000560d0aaae2f7 lj_BC_FUNCC (tarantool)\n"
"               #8  0x0000560d0aa9aabd lua_pcall (tarantool)\n"
"               #9  0x0000560d0aa71400 lbox_call (tarantool)\n"
"               #10 0x0000560d0aa6ce36 lua_fiber_run_f (tarantool)\n"
"               #11 0x0000560d0a9e8d0c "
"_ZL16fiber_cxx_invokePFiP13__va_list_tagES0_ (tarantool)\n"
"               #12 0x0000560d0aa7b255 fiber_loop (tarantool)\n"
"               #13 0x0000560d0ab38ed1 coro_init (tarantool)\n"
"               ..."

#: ../doc/book/admin/daemon_supervision.rst:236
msgid "Debugger"
msgstr "Отладчик"

#: ../doc/book/admin/daemon_supervision.rst:238
msgid "To start ``gdb`` debugger on the core dump, say:"
msgstr "Для запуска отладчика ``gdb``, выполните команду:"

#: ../doc/book/admin/daemon_supervision.rst:240
msgid "$ coredumpctl gdb <pid>"
msgstr "$ coredumpctl gdb <pid>"

#: ../doc/book/admin/daemon_supervision.rst:244
msgid ""
"It is highly recommended to install ``tarantool-debuginfo`` package to "
"improve ``gdb`` experience, for example:"
msgstr ""
"Мы очень рекомендуем установить пакет ``tarantool-debuginfo``, чтобы сделать "
"отладку средствами ``gdb`` более эффективной. Например:"

#: ../doc/book/admin/daemon_supervision.rst:247
msgid "$ dnf debuginfo-install tarantool"
msgstr "$ dnf debuginfo-install tarantool"

#: ../doc/book/admin/daemon_supervision.rst:251
msgid ""
"``gdb`` also provides information about the debuginfo packages you need to "
"install:"
msgstr ""
"С помощью ``gdb`` можно узнать, какие еще ``debuginfo``-пакеты нужно "
"установить:"

#: ../doc/book/admin/daemon_supervision.rst:254
msgid ""
"$ gdb -p <pid>\n"
"...\n"
"Missing separate debuginfos, use: dnf debuginfo-install\n"
"glibc-2.22.90-26.fc24.x86_64 krb5-libs-1.14-12.fc24.x86_64\n"
"libgcc-5.3.1-3.fc24.x86_64 libgomp-5.3.1-3.fc24.x86_64\n"
"libselinux-2.4-6.fc24.x86_64 libstdc++-5.3.1-3.fc24.x86_64\n"
"libyaml-0.1.6-7.fc23.x86_64 ncurses-libs-6.0-1.20150810.fc24.x86_64\n"
"openssl-libs-1.0.2e-3.fc24.x86_64"
msgstr ""
"$ gdb -p <pid>\n"
"...\n"
"Missing separate debuginfos, use: dnf debuginfo-install\n"
"glibc-2.22.90-26.fc24.x86_64 krb5-libs-1.14-12.fc24.x86_64\n"
"libgcc-5.3.1-3.fc24.x86_64 libgomp-5.3.1-3.fc24.x86_64\n"
"libselinux-2.4-6.fc24.x86_64 libstdc++-5.3.1-3.fc24.x86_64\n"
"libyaml-0.1.6-7.fc23.x86_64 ncurses-libs-6.0-1.20150810.fc24.x86_64\n"
"openssl-libs-1.0.2e-3.fc24.x86_64"

#: ../doc/book/admin/daemon_supervision.rst:265
msgid ""
"Symbolic names are present in stack traces even if you don’t have "
"``tarantool-debuginfo`` package installed."
msgstr ""
"В трассировке стека присутствуют символические имена, даже если у вас не "
"установлен пакет ``tarantool-debuginfo``."
