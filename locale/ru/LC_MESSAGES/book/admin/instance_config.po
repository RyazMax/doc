# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-04 10:02+0000\n"
"PO-Revision-Date: 2019-12-20 21:24+0300\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
"Generated-By: Babel 2.7.0\n"

#: ../doc/book/admin/instance_config.rst:5
msgid "Instance configuration"
msgstr "Настройка экземпляров Tarantool’а"

#: ../doc/book/admin/instance_config.rst:7
msgid "For each Tarantool instance, you need two files:"
msgstr "Для каждого экземпляра Tarantool’а понадобится два файла:"

#: ../doc/book/admin/instance_config.rst:9
msgid ""
"[Optional] An :ref:`application file <app_server-launching_app>` with "
"instance-specific logic. Put this file into the ``/usr/share/tarantool/`` "
"directory."
msgstr ""
"[Необязательный] :ref:`Файл приложения <app_server-launching_app>`, "
"содержащий логику данного экземпляра. Поместите его в папку ``/usr/share/"
"tarantool/``."

#: ../doc/book/admin/instance_config.rst:13
msgid ""
"For example, ``/usr/share/tarantool/my_app.lua`` (here we implement it as a :"
"ref:`Lua module <app_server-modules>` that bootstraps the database and "
"exports ``start()`` function for API calls):"
msgstr ""
"Например, ``/usr/share/tarantool/my_app.lua`` (здесь мы реализуем его как  :"
"ref:`Lua-модуль <app_server-modules>`, который запускает базу данных и "
"экспортирует функцию ``start()`` для API -вызовов):"

#: ../doc/book/admin/instance_config.rst:17
msgid ""
"local function start()\n"
"    box.schema.space.create(\"somedata\")\n"
"    box.space.somedata:create_index(\"primary\")\n"
"    <...>\n"
"end\n"
"\n"
"return {\n"
"  start = start;\n"
"}"
msgstr ""
"local function start()\n"
"    box.schema.space.create(\"somedata\")\n"
"    box.space.somedata:create_index(\"primary\")\n"
"    <...>\n"
"end\n"
"\n"
"return {\n"
"  start = start;\n"
"}"

#: ../doc/book/admin/instance_config.rst:29
msgid ""
"An :ref:`instance file <admin-instance_file>` with instance-specific "
"initialization logic and parameters. Put this file, or a symlink to it, into "
"the **instance directory** (see :ref:`instance_dir <admin-instance_dir>` "
"parameter in ``tarantoolctl`` configuration file)."
msgstr ""
":ref:`Файл экземпляра <admin-instance_file>`, содержащий логику и параметры "
"инициализации данного экземпляра. Поместите этот файл или символьную ссылку "
"на него в **директорию экземпляра** (см. параметр :ref:`instance_dir <admin-"
"instance_dir>` в конфигурационном файле ``tarantoolctl``)."

#: ../doc/book/admin/instance_config.rst:35
msgid ""
"For example, ``/etc/tarantool/instances.enabled/my_app.lua`` (here we load "
"``my_app.lua`` module and make a call to ``start()`` function from that "
"module):"
msgstr ""
"Например, ``/etc/tarantool/instances.enabled/my_app.lua`` (здесь мы "
"загружаем модуль ``my_app.lua`` и вызываем из него функцию ``start()``):"

#: ../doc/book/admin/instance_config.rst:39
msgid ""
"#!/usr/bin/env tarantool\n"
"\n"
"box.cfg {\n"
"    listen = 3301;\n"
"}\n"
"\n"
"-- load my_app module and call start() function\n"
"-- with some app options controlled by sysadmins\n"
"local m = require('my_app').start({...})"
msgstr ""
"#!/usr/bin/env tarantool\n"
"\n"
"box.cfg {\n"
"    listen = 3301;\n"
"}\n"
"\n"
"-- загрузить модуль my_app и вызвать функцию start()\n"
"-- некоторые опции приложения под контролем сисадминов\n"
"local m = require('my_app').start({...})"

#: ../doc/book/admin/instance_config.rst:55
msgid "Instance file"
msgstr "Файл экземпляра"

#: ../doc/book/admin/instance_config.rst:57
msgid ""
"After this short introduction, you may wonder what an instance file is, what "
"it is for, and how ``tarantoolctl`` uses it. After all, Tarantool is an "
"application server, so why not start the application stored in ``/usr/share/"
"tarantool`` directly?"
msgstr ""
"После столь краткого предисловия может возникнуть вопрос: что из себя "
"представляет файл экземпляра, для чего он нужен и как ``tarantoolctl`` "
"использует его? Если Tarantool -- это сервер приложений, так почему бы не "
"запускать хранящееся в ``/usr/share/tarantool`` приложение напрямую?"

#: ../doc/book/admin/instance_config.rst:62
msgid ""
"A typical Tarantool application is not a script, but a daemon running in "
"background mode and processing requests, usually sent to it over a TCP/IP "
"socket. This daemon needs to be started automatically when the operating "
"system starts, and managed with the operating system standard tools for "
"service management -- such as ``systemd`` or ``init.d``. To serve this very "
"purpose, we created **instance files**."
msgstr ""
"Типичное приложение для Tarantool -- это не скрипт, а демон, запущенный в "
"фоновом режиме и обрабатывающий запросы, которые, как правило, посылаются  "
"через TCP/IP-сокет. Необходимо запускать этот демон со стартом операционной "
"системы и управлять им с помощью стандартных средств операционной системы "
"для управления сервисами -- таких как ``systemd`` или ``init.d``. С этой "
"целью и были созданы **файлы экземпляра**."

#: ../doc/book/admin/instance_config.rst:69
msgid ""
"You can have more than one instance file. For example, a single application "
"in ``/usr/share/tarantool`` can run in multiple instances, each of them "
"having its own instance file. Or you can have multiple applications in ``/"
"usr/share/tarantool`` -- again, each of them having its own instance file."
msgstr ""
"Файлов экземпляра может быть больше одного. Например, одно и то же "
"приложение в ``/usr/share/tarantool`` может быть запущено на нескольких "
"экземплярах Tarantool'а, у каждого из которых есть свой файл экземпляра. Или "
"в ``/usr/share/tarantool`` может быть несколько приложений, и на каждое из "
"них будет опять же приходиться свой файл экземпляра."

#: ../doc/book/admin/instance_config.rst:74
msgid ""
"An instance file is typically created by a system administrator. An "
"application file is often provided by a developer, in a Lua rock or an rpm/"
"deb package."
msgstr ""
"Обычно файл экземпляра создает системный администратор, а файл приложения  "
"предоставляет разработчик в Lua-модуле или rpm/deb-пакете."

#: ../doc/book/admin/instance_config.rst:77
msgid ""
"An instance file is designed to not differ in any way from a Lua "
"application. It must, however, configure the database, i.e. contain a call "
"to :ref:`box.cfg{} <box_introspection-box_cfg>` somewhere in it, because "
"it’s the only way to turn a Tarantool script into a background process, and "
"``tarantoolctl`` is a tool to manage background processes. Other than that, "
"an instance file may contain arbitrary Lua code, and, in theory, even "
"include the entire application business logic in it. We, however, do not "
"recommend this, since it clutters the instance file and leads to unnecessary "
"copy-paste when you need to run multiple instances of an application."
msgstr ""
"По своему устройству файл экземпляра ничем не отличается от Lua-приложения. "
"Однако с его помощью должна настраиваться база данных, поэтому в нем должен "
"содержаться вызов :ref:`box.cfg{} <box_introspection-box_cfg>`, потому что "
"это единственный способ превратить Tarantool-скрипт в фоновый процесс, а "
"``tarantoolctl`` -- это инструмент для управления фоновыми процессами. За "
"исключением этого вызова, файл экземпляра может содержать произвольный код "
"на Lua и, теоретически, даже всю бизнес-логику приложения. Однако мы не "
"рекомендуем  хранить весь код в файле экземпляра, потому что это приводит "
"как к замусориванию самого файла, так и к ненужному копированию кода при "
"необходимости запустить несколько экземпляров приложения."

#: ../doc/book/admin/instance_config.rst:91
msgid "`tarantoolctl` configuration file"
msgstr "Конфигурационный файл `tarantoolctl`"

#: ../doc/book/admin/instance_config.rst:93
msgid ""
"While instance files contain instance configuration, the ``tarantoolctl`` "
"configuration file contains the configuration that ``tarantoolctl`` uses to "
"override instance configuration. In other words, it contains system-wide "
"configuration defaults. If ``tarantoolctl`` fails to find this file with the "
"method described in section :ref:`Starting/stopping an instance <admin-"
"start_stop_instance>`, it uses default settings."
msgstr ""
"Файлы экземпляра содержат конфигурацию экземпляра, тогда как "
"конфигурационный файл ``tarantoolctl`` содержит конфигурацию, которую "
"``tarantoolctl`` использует, чтобы переопределять конфигурацию экземпляров. "
"Другими словами, он содержит общесистемную конфигурацию по умолчанию. Если "
"``tarantoolctl`` не сможет обнаружить этот файл, используя метод, описанный "
"в разделе :ref:`Запуск/остановка экземпляра <admin-start_stop_instance>`, "
"будут использованы настройки по умолчанию."

#: ../doc/book/admin/instance_config.rst:101
msgid ""
"Most of the parameters are similar to those used by :ref:`box.cfg{} "
"<box_introspection-box_cfg>`. Here are the default settings (possibly "
"installed in ``/etc/default/tarantool`` or ``/etc/sysconfig/tarantool`` as "
"part of Tarantool distribution -- see OS-specific default paths in :ref:"
"`Notes for operating systems <admin-os_notes>`):"
msgstr ""
"Большинство параметров схожи с теми, которые используются в :ref:`box.cfg{} "
"<box_introspection-box_cfg>`. Ниже даны настройки по умолчанию (могут быть "
"установлены в ``/etc/default/tarantool`` или ``/etc/sysconfig/tarantool`` "
"как часть дистрибутива Tarantool'а -- см. пути по умолчанию для разных ОС в :"
"ref:`Замечаниях по поводу некоторых операционных систем <admin-os_notes>`):"

#: ../doc/book/admin/instance_config.rst:107
msgid ""
"default_cfg = {\n"
"    pid_file  = \"/var/run/tarantool\",\n"
"    wal_dir   = \"/var/lib/tarantool\",\n"
"    memtx_dir = \"/var/lib/tarantool\",\n"
"    vinyl_dir = \"/var/lib/tarantool\",\n"
"    log       = \"/var/log/tarantool\",\n"
"    username  = \"tarantool\",\n"
"    language  = \"Lua\",\n"
"}\n"
"instance_dir = \"/etc/tarantool/instances.enabled\""
msgstr ""
"default_cfg = {\n"
"    pid_file  = \"/var/run/tarantool\",\n"
"    wal_dir   = \"/var/lib/tarantool\",\n"
"    memtx_dir = \"/var/lib/tarantool\",\n"
"    vinyl_dir = \"/var/lib/tarantool\",\n"
"    log       = \"/var/log/tarantool\",\n"
"    username  = \"tarantool\",\n"
"    language  = \"Lua\",\n"
"}\n"
"instance_dir = \"/etc/tarantool/instances.enabled\""

#: ../doc/book/admin/instance_config.rst:120
msgid "where:"
msgstr "где:"

#: ../doc/book/admin/instance_config.rst:0
msgid "``pid_file``"
msgstr "``pid_file``"

#: ../doc/book/admin/instance_config.rst:0
msgid ""
"Directory for the pid file and control-socket file; ``tarantoolctl`` will "
"add “/instance_name” to the directory name."
msgstr ""
"Директория, где хранятся pid-файл и socket-файл; ``tarantoolctl`` добавляет "
"“/имя_экземпляра” к имени директории."

#: ../doc/book/admin/instance_config.rst:0
msgid "``wal_dir``"
msgstr "``wal_dir``"

#: ../doc/book/admin/instance_config.rst:0
msgid ""
"Directory for write-ahead .xlog files; ``tarantoolctl`` will add \"/"
"instance_name\" to the directory name."
msgstr ""
"Директория, где хранятся .xlog-файлы; ``tarantoolctl`` добавляет “/"
"имя_экземпляра” к имени директории."

#: ../doc/book/admin/instance_config.rst:0
msgid "``memtx_dir``"
msgstr "``memtx_dir``"

#: ../doc/book/admin/instance_config.rst:0
msgid ""
"Directory for snapshot .snap files; ``tarantoolctl`` will add \"/"
"instance_name\" to the directory name."
msgstr ""
"Директория, где хранятся .snap-файлы; ``tarantoolctl`` добавляет “/"
"имя_экземпляра” к имени директории."

#: ../doc/book/admin/instance_config.rst:0
msgid "``vinyl_dir``"
msgstr "``vinyl_dir``"

#: ../doc/book/admin/instance_config.rst:0
msgid ""
"Directory for vinyl files; ``tarantoolctl`` will add \"/instance_name\" to "
"the directory name."
msgstr ""
"Директория, где хранятся vinyl-файлы; ``tarantoolctl`` добавляет “/"
"имя_экземпляра” к имени директории."

#: ../doc/book/admin/instance_config.rst:0
msgid "``log``"
msgstr "``log``"

#: ../doc/book/admin/instance_config.rst:0
msgid ""
"The place where the application log will go; ``tarantoolctl`` will add \"/"
"instance_name.log\" to the name."
msgstr ""
"Директория, где хранятся файлы журнала с сообщениями от Tarantool-"
"приложения; ``tarantoolctl`` добавляет “/имя_экземпляра” к имени директории."

#: ../doc/book/admin/instance_config.rst:0
msgid "``username``"
msgstr "``username``"

#: ../doc/book/admin/instance_config.rst:0
msgid ""
"The user that runs the Tarantool instance. This is the operating-system user "
"name rather than the Tarantool-client user name. Tarantool will change its "
"effective user to this user after becoming a daemon."
msgstr ""
"Пользователь, запускающий экземпляр Tarantool'а. Это пользователь "
"операционной системы, а не Tarantool-клиента. Став демоном, Tarantool сменит "
"своего пользователя на указанного."

#: ../doc/book/admin/instance_config.rst:0
msgid "``language``"
msgstr "``language``"

#: ../doc/book/admin/instance_config.rst:0
msgid ""
"The :ref:`interactive console <interactive_console>` language. Can be either "
"``Lua`` or ``SQL``."
msgstr ""

#: ../doc/book/admin/instance_config.rst:0
msgid "``instance_dir``"
msgstr "``instance_dir``"

#: ../doc/book/admin/instance_config.rst:0
msgid ""
"The directory where all instance files for this host are stored. Put "
"instance files in this directory, or create symbolic links."
msgstr ""
"Директория, где хранятся все файлы экземпляра для данного компьютера. "
"Поместите сюда файлы экземпляра или создайте символьные ссылки на них."

#: ../doc/book/admin/instance_config.rst:156
msgid ""
"The default instance directory depends on Tarantool's ``WITH_SYSVINIT`` "
"build option: when ON, it is ``/etc/tarantool/instances.enabled``, otherwise "
"(OFF or not set) it is ``/etc/tarantool/instances.available``. The latter "
"case is typical for Tarantool builds for Linux distros with ``systemd``."
msgstr ""
"Директория с экземплярами, которая используется по умолчанию, зависит от "
"параметра ``WITH_SYSVINIT`` сборки Tarantool'а: когда его значение \"ON\", "
"то ``/etc/tarantool/instances.enabled``, в противном случае (\"OFF\" или "
"значение не установлено), то ``/etc/tarantool/instances.available``. "
"Последний случай характерен для сборок Tarantool'а для дистрибутивов Linux с "
"``systemd``."

#: ../doc/book/admin/instance_config.rst:162
msgid "To check the build options, say ``tarantool --version``."
msgstr ""
"Для проверки параметров сборки выполните команду ``tarantool --version``."

#: ../doc/book/admin/instance_config.rst:164
#, fuzzy
msgid ""
"As a full-featured example, you can take `example.lua <https://github.com/"
"tarantool/tarantool/blob/2.1/extra/dist/example.lua>`_ script that ships "
"with Tarantool and defines all configuration options."
msgstr ""
"В качестве полноценного примера можно использовать скрипт `example.lua "
"<https://github.com/tarantool/tarantool/blob/1.10/extra/dist/example."
"lua>`_,  который поставляется вместе с Tarantool и задает все "
"конфигурационные параметры."
