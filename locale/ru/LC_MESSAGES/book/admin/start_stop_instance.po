# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-03 19:29+0000\n"
"PO-Revision-Date: 2019-12-20 21:24+0300\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
"Generated-By: Babel 2.7.0\n"

#: ../doc/book/admin/start_stop_instance.rst:5
msgid "Starting/stopping an instance"
msgstr "Запуск/остановка экземпляра"

#: ../doc/book/admin/start_stop_instance.rst:7
msgid ""
"While a Lua application is executed by Tarantool, an instance file is "
"executed by ``tarantoolctl`` which is a Tarantool script."
msgstr ""
"Lua-приложение выполняется Tarantool'ом, тогда как файл экземпляра "
"выполняется Tarantool-скриптом ``tarantoolctl``."

#: ../doc/book/admin/start_stop_instance.rst:10
msgid "Here is what ``tarantoolctl`` does when you issue the command:"
msgstr "Вот что делает ``tarantoolctl`` при вводе следующей команды:"

#: ../doc/book/admin/start_stop_instance.rst:12
msgid "$ tarantoolctl start <instance_name>"
msgstr "$ tarantoolctl start <имя_экземпляра>"

#: ../doc/book/admin/start_stop_instance.rst:16
msgid ""
"Read and parse the command line arguments. The last argument, in our case, "
"contains an instance name."
msgstr ""
"Считывает и разбирает аргументы командной строки. В нашем случае последний "
"аргумент содержит имя экземпляра."

#: ../doc/book/admin/start_stop_instance.rst:19
msgid ""
"Read and parse its own configuration file. This file contains "
"``tarantoolctl`` defaults, like the path to the directory where instances "
"should be searched for."
msgstr ""
"Считывает и разбирает собственный конфигурационный файл. Этот файл содержит "
"параметры ``tarantoolctl`` по умолчанию -- такие как путь до директории, в "
"которой располагаются экземпляры."

#: ../doc/book/admin/start_stop_instance.rst:23
msgid ""
"When ``tarantool`` is invoked by root, it looks for a configuration file in "
"``/etc/default/tarantool``. When ``tarantool`` is invoked by a local (non-"
"root) user, it looks for a configuration file first in the current directory "
"(``$PWD/.tarantoolctl``), and then in the current user's home directory (``"
"$HOME/.config/tarantool/tarantool``). If no configuration file is found "
"there, or in the ``/usr/local/etc/default/tarantool`` file, then "
"``tarantoolctl`` falls back to :ref:`built-in defaults <admin-"
"tarantoolctl_config_file>`."
msgstr ""
"Когда ``tarantoolctl`` вызывается с root-правами, он ищет конфигурационный "
"файл в ``/etc/default/tarantool``. Если вызов ``tarantool`` производит "
"локальный пользователь, сначала он ищет конфигурационный файл в текущей "
"директории (``$PWD/.tarantoolctl``), а затем в домашней директории текущего "
"пользователя (``$HOME/.config/tarantool/tarantool``). Если конфигурационный "
"файл не найден, ``tarantoolctl`` принимает :ref:`встроенные параметры по "
"умолчанию <admin-tarantoolctl_config_file>`."

#: ../doc/book/admin/start_stop_instance.rst:32
msgid ""
"Look up the instance file in the instance directory, for example ``/etc/"
"tarantool/instances.enabled``. To build the instance file path, "
"``tarantoolctl`` takes the instance name, prepends the instance directory "
"and appends \".lua\" extension to the instance file."
msgstr ""
"Ищет файл экземпляра в директории, где располагаются экземпляры, например, в "
"``/etc/tarantool/instances.enabled``. ``tarantoolctl`` строит путь до файла "
"экземпляра следующим образом: \"путь до директории с экземплярами\" + \"имя "
"экземпляра\" + \".lua\"."

#: ../doc/book/admin/start_stop_instance.rst:37
msgid ""
"Override :ref:`box.cfg{} <box_introspection-box_cfg>` function to pre-"
"process its parameters and ensure that instance paths are pointing to the "
"paths defined in the ``tarantoolctl`` configuration file. For example, if "
"the configuration file specifies that instance work directory must be in ``/"
"var/tarantool``, then the new implementation of ``box.cfg{}`` ensures that :"
"ref:`work_dir <cfg_basic-work_dir>` parameter in ``box.cfg{}`` is set to ``/"
"var/tarantool/<instance_name>``, regardless of what the path is set to in "
"the instance file itself."
msgstr ""
"Переопределяет функцию :ref:`box.cfg{} <box_introspection-box_cfg>`, чтобы "
"предобработать ее параметры и сделать так, чтобы пути к экземплярам  "
"указывали на пути, прописанные в конфигурационном файле ``tarantoolctl``. "
"Например, если в конфигурационном файле указано, что рабочей директорией "
"экземпляра является ``/var/tarantool``, то новая реализация ``box.cfg{}`` "
"сделает так, чтобы параметр :ref:`work_dir <cfg_basic-work_dir>` в ``box."
"cfg{}`` имел значение ``/var/tarantool/<имя_экземпляра>``, независимо от "
"того, какой путь указан в самом файле экземпляра."

#: ../doc/book/admin/start_stop_instance.rst:46
msgid ""
"Create a so-called \"instance control file\". This is a Unix socket with Lua "
"console attached to it. This file is used later by ``tarantoolctl`` to query "
"the instance state, send commands to the instance and so on."
msgstr ""
"Создает так называемый \"файл для управления экземпляром\". Это Unix-сокет с "
"прикрепленной к нему Lua-консолью. В дальнейшем ``tarantoolctl`` использует "
"этот файл для получения состояния экземпляра,  отправки команд и т.д."

#: ../doc/book/admin/start_stop_instance.rst:50
msgid ""
"Set the TARANTOOLCTL environment variable to 'true'. This allows the user to "
"know that the instance was started by ``tarantoolctl``."
msgstr ""
"Задает значение переменной окружения TARANTOOLCTL = 'true'. Это позволит "
"пользователю понять, что экземпляр был запущен ``tarantoolctl``."

#: ../doc/book/admin/start_stop_instance.rst:53
msgid "Finally, use Lua ``dofile`` command to execute the instance file."
msgstr ""
"Наконец, использует Lua-команду ``dofile`` для выполнения файла экземпляра."

#: ../doc/book/admin/start_stop_instance.rst:55
msgid ""
"If you start an instance using ``systemd`` tools, like this (the instance "
"name is ``my_app``):"
msgstr ""
"При запуске экземпляра с помощью инструментария ``systemd`` указанным ниже "
"способом (имя экземпляра -- ``my_app``):"

#: ../doc/book/admin/start_stop_instance.rst:58
msgid ""
"$ systemctl start tarantool@my_app\n"
"$ ps axuf|grep exampl[e]\n"
"taranto+  5350  1.3  0.3 1448872 7736 ?        Ssl  20:05   0:28 tarantool "
"my_app.lua <running>"
msgstr ""
"$ systemctl start tarantool@my_app\n"
"$ ps axuf|grep exampl[e]\n"
"taranto+  5350  1.3  0.3 1448872 7736 ?        Ssl  20:05   0:28 tarantool "
"my_app.lua <running>"

#: ../doc/book/admin/start_stop_instance.rst:64
msgid ""
"... this actually calls ``tarantoolctl`` like in case of ``tarantoolctl "
"start my_app``."
msgstr ""
"...на самом деле вызывается ``tarantoolctl`` -- так же, как и в случае "
"``tarantoolctl start my_app``."

#: ../doc/book/admin/start_stop_instance.rst:67
msgid ""
"To check the instance file for syntax errors prior to starting ``my_app`` "
"instance, say:"
msgstr ""
"Для проверки файла экземпляра на наличие синтаксических ошибок перед "
"запуском экземпляра ``my_app`` используйте команду:"

#: ../doc/book/admin/start_stop_instance.rst:70
msgid "$ tarantoolctl check my_app"
msgstr "$ tarantoolctl check my_app"

#: ../doc/book/admin/start_stop_instance.rst:74
msgid "To enable ``my_app`` instance for auto-load during system startup, say:"
msgstr ""
"Для включения автоматической загрузки экземпляра ``my_app`` при запуске всей "
"системы используйте команду:"

#: ../doc/book/admin/start_stop_instance.rst:76
msgid "$ systemctl enable tarantool@my_app"
msgstr "$ systemctl enable tarantool@my_app"

#: ../doc/book/admin/start_stop_instance.rst:80
msgid "To stop a running ``my_app`` instance, say:"
msgstr "Для остановки работающего экземпляра ``my_app`` используйте команду:"

#: ../doc/book/admin/start_stop_instance.rst:82
msgid ""
"$ tarantoolctl stop my_app\n"
"$ # - OR -\n"
"$ systemctl stop tarantool@my_app"
msgstr ""
"$ tarantoolctl stop my_app\n"
"$ # - ИЛИ -\n"
"$ systemctl stop tarantool@my_app"

#: ../doc/book/admin/start_stop_instance.rst:88
msgid "To restart (i.e. stop and start) a running ``my_app`` instance, say:"
msgstr ""
"Для перезапуска (т.е. остановки и запуска) работающего экземпляра ``my_app`` "
"используйте команду:"

#: ../doc/book/admin/start_stop_instance.rst:90
msgid ""
"$ tarantoolctl restart my_app\n"
"$ # - OR -\n"
"$ systemctl restart tarantool@my_app"
msgstr ""
"$ tarantoolctl restart my_app\n"
"$ # - ИЛИ -\n"
"$ systemctl restart tarantool@my_app"

#: ../doc/book/admin/start_stop_instance.rst:100
msgid "Running Tarantool locally"
msgstr "Локальный запуск Tarantool'а"

#: ../doc/book/admin/start_stop_instance.rst:102
msgid ""
"Sometimes you may need to run a Tarantool instance locally, e.g. for test "
"purposes. Let's configure a local instance, then start and monitor it with "
"``tarantoolctl``."
msgstr ""
"Иногда бывает необходимо запустить Tarantool локально -- например, для "
"тестирования. Давайте настроим локальный экземпляр, запустим его и будем "
"мониторить с помощью ``tarantoolctl``."

#: ../doc/book/admin/start_stop_instance.rst:106
msgid "First, we create a sandbox directory on the user's path:"
msgstr "Сперва создадим директорию-песочницу по следующему пути:"

#: ../doc/book/admin/start_stop_instance.rst:108
msgid "$ mkdir ~/tarantool_test"
msgstr "$ mkdir ~/tarantool_test"

#: ../doc/book/admin/start_stop_instance.rst:112
msgid ""
"... and set default ``tarantoolctl`` configuration in ``$HOME/.config/"
"tarantool/tarantool``. Let the file contents be:"
msgstr ""
"...и поместим конфигурационный файл с параметрами ``tarantoolctl`` по "
"умолчанию в ``$HOME/.config/tarantool/tarantool``. Содержимое файла будет "
"таким:"

#: ../doc/book/admin/start_stop_instance.rst:115
msgid ""
"default_cfg = {\n"
"    pid_file  = \"/home/user/tarantool_test/my_app.pid\",\n"
"    wal_dir   = \"/home/user/tarantool_test\",\n"
"    snap_dir  = \"/home/user/tarantool_test\",\n"
"    vinyl_dir = \"/home/user/tarantool_test\",\n"
"    log       = \"/home/user/tarantool_test/log\",\n"
"}\n"
"instance_dir = \"/home/user/tarantool_test\""
msgstr ""
"default_cfg = {\n"
"    pid_file  = \"/home/user/tarantool_test/my_app.pid\",\n"
"    wal_dir   = \"/home/user/tarantool_test\",\n"
"    snap_dir  = \"/home/user/tarantool_test\",\n"
"    vinyl_dir = \"/home/user/tarantool_test\",\n"
"    log       = \"/home/user/tarantool_test/log\",\n"
"}\n"
"instance_dir = \"/home/user/tarantool_test\""

#: ../doc/book/admin/start_stop_instance.rst:128
msgid "Specify a full path to the user's home directory instead of \"~/\"."
msgstr ""
"Указывайте полный путь к домашней директории пользователя вместо \"~/\"."

#: ../doc/book/admin/start_stop_instance.rst:130
msgid ""
"Omit ``username`` parameter. ``tarantoolctl`` normally doesn't have "
"permissions to switch current user when invoked by a local user. The "
"instance will be running under 'admin'."
msgstr ""
"Опустите параметр ``username``. Обычно, когда запуск производит локальный  "
"пользователь, у ``tarantoolctl`` нет разрешения на смену текущего "
"пользователя. Экземпляр будет работать с пользователем 'admin'."

#: ../doc/book/admin/start_stop_instance.rst:134
msgid ""
"Next, we create the instance file ``~/tarantool_test/my_app.lua``. Let the "
"file contents be:"
msgstr ""
"Далее создадим файл экземпляра ``~/tarantool_test/my_app.lua``. Содержимое "
"файла будет таким:"

#: ../doc/book/admin/start_stop_instance.rst:137
msgid ""
"box.cfg{listen = 3301}\n"
"box.schema.user.passwd('Gx5!')\n"
"box.schema.user.grant('guest','read,write,execute','universe')\n"
"fiber = require('fiber')\n"
"box.schema.space.create('tester')\n"
"box.space.tester:create_index('primary',{})\n"
"i = 0\n"
"while 0 == 0 do\n"
"    fiber.sleep(5)\n"
"    i = i + 1\n"
"    print('insert ' .. i)\n"
"    box.space.tester:insert{i, 'my_app tuple'}\n"
"end"
msgstr ""
"box.cfg{listen = 3301}\n"
"box.schema.user.passwd('Gx5!')\n"
"box.schema.user.grant('guest','read,write,execute','universe')\n"
"fiber = require('fiber')\n"
"box.schema.space.create('tester')\n"
"box.space.tester:create_index('primary',{})\n"
"i = 0\n"
"while 0 == 0 do\n"
"    fiber.sleep(5)\n"
"    i = i + 1\n"
"    print('insert ' .. i)\n"
"    box.space.tester:insert{i, 'my_app tuple'}\n"
"end"

#: ../doc/book/admin/start_stop_instance.rst:153
msgid ""
"Let’s verify our instance file by starting it without ``tarantoolctl`` first:"
msgstr ""
"Проверим наш файл экземпляра, сперва запустив его без ``tarantoolctl``:"

#: ../doc/book/admin/start_stop_instance.rst:155
msgid ""
"$ cd ~/tarantool_test\n"
"$ tarantool my_app.lua\n"
"2017-04-06 10:42:15.762 [54085] main/101/my_app.lua C> version 1.7.3-489-"
"gd86e36d5b\n"
"2017-04-06 10:42:15.763 [54085] main/101/my_app.lua C> log level 5\n"
"2017-04-06 10:42:15.764 [54085] main/101/my_app.lua I> mapping 268435456 "
"bytes for tuple arena...\n"
"2017-04-06 10:42:15.774 [54085] iproto/101/main I> binary: bound to "
"[::]:3301\n"
"2017-04-06 10:42:15.774 [54085] main/101/my_app.lua I> initializing an empty "
"data directory\n"
"2017-04-06 10:42:15.789 [54085] snapshot/101/main I> saving snapshot "
"`./00000000000000000000.snap.inprogress'\n"
"2017-04-06 10:42:15.790 [54085] snapshot/101/main I> done\n"
"2017-04-06 10:42:15.791 [54085] main/101/my_app.lua I> vinyl checkpoint "
"done\n"
"2017-04-06 10:42:15.791 [54085] main/101/my_app.lua I> ready to accept "
"requests\n"
"insert 1\n"
"insert 2\n"
"insert 3\n"
"<...>"
msgstr ""
"$ cd ~/tarantool_test\n"
"$ tarantool my_app.lua\n"
"2017-04-06 10:42:15.762 [54085] main/101/my_app.lua C> version 1.7.3-489-"
"gd86e36d5b\n"
"2017-04-06 10:42:15.763 [54085] main/101/my_app.lua C> log level 5\n"
"2017-04-06 10:42:15.764 [54085] main/101/my_app.lua I> mapping 268435456 "
"bytes for tuple arena...\n"
"2017-04-06 10:42:15.774 [54085] iproto/101/main I> binary: bound to "
"[::]:3301\n"
"2017-04-06 10:42:15.774 [54085] main/101/my_app.lua I> initializing an empty "
"data directory\n"
"2017-04-06 10:42:15.789 [54085] snapshot/101/main I> saving snapshot "
"`./00000000000000000000.snap.inprogress'\n"
"2017-04-06 10:42:15.790 [54085] snapshot/101/main I> done\n"
"2017-04-06 10:42:15.791 [54085] main/101/my_app.lua I> vinyl checkpoint "
"done\n"
"2017-04-06 10:42:15.791 [54085] main/101/my_app.lua I> ready to accept "
"requests\n"
"insert 1\n"
"insert 2\n"
"insert 3\n"
"<...>"

#: ../doc/book/admin/start_stop_instance.rst:173
msgid "Now we tell ``tarantoolctl`` to start the Tarantool instance:"
msgstr "Запустим экземпляр Tarantool'а с помощью ``tarantoolctl``:"

#: ../doc/book/admin/start_stop_instance.rst:175
msgid "$ tarantoolctl start my_app"
msgstr "$ tarantoolctl start my_app"

#: ../doc/book/admin/start_stop_instance.rst:179
msgid "Expect to see messages indicating that the instance has started. Then:"
msgstr ""
"В консоли должны появиться сообщения о том, что экземпляр запущен. Затем "
"выполним следующую команду:"

#: ../doc/book/admin/start_stop_instance.rst:181
msgid "$ ls -l ~/tarantool_test/my_app"
msgstr "$ ls -l ~/tarantool_test/my_app"

#: ../doc/book/admin/start_stop_instance.rst:185
msgid "Expect to see the .snap file and the .xlog file. Then:"
msgstr ""
"В консоли должны появиться .snap-файл и .xlog-файл. Затем выполним следующую "
"команду:"

#: ../doc/book/admin/start_stop_instance.rst:187
msgid "$ less ~/tarantool_test/log/my_app.log"
msgstr "$ less ~/tarantool_test/log/my_app.log"

#: ../doc/book/admin/start_stop_instance.rst:191
msgid ""
"Expect to see the contents of ``my_app``‘s log, including error messages, if "
"any. Then:"
msgstr ""
"В консоли должно отобразиться содержимое файла журнала для приложения "
"``my_app``, в том числе сообщения об ошибках, если они были. Затем выполним "
"серию команд:"

#: ../doc/book/admin/start_stop_instance.rst:194
msgid ""
"$ tarantoolctl enter my_app\n"
"tarantool> box.cfg{}\n"
"tarantool> console = require('console')\n"
"tarantool> console.connect('localhost:3301')\n"
"tarantool> box.space.tester:select({0}, {iterator = 'GE'})"
msgstr ""
"$ tarantoolctl enter my_app\n"
"tarantool> box.cfg{}\n"
"tarantool> console = require('console')\n"
"tarantool> console.connect('localhost:3301')\n"
"tarantool> box.space.tester:select({0}, {iterator = 'GE'})"

#: ../doc/book/admin/start_stop_instance.rst:202
msgid "Expect to see several tuples that ``my_app`` has created."
msgstr ""
"В консоли должны появиться несколько кортежей, которые создало приложение "
"``my_app``."

#: ../doc/book/admin/start_stop_instance.rst:204
msgid ""
"Stop now. A polite way to stop ``my_app`` is with ``tarantoolctl``, thus we "
"say:"
msgstr ""
"Теперь остановим приложение ``my_app``. Корректный способ остановки -- это "
"использовать``tarantoolctl``:"

#: ../doc/book/admin/start_stop_instance.rst:206
msgid "$ tarantoolctl stop my_app"
msgstr "$ tarantoolctl stop my_app"

#: ../doc/book/admin/start_stop_instance.rst:210
msgid "Finally, we make a cleanup."
msgstr "Последний шаг -- удаление тестовых данных."

#: ../doc/book/admin/start_stop_instance.rst:212
msgid "$ rm -R tarantool_test"
msgstr "$ rm -R tarantool_test"
