# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 2.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-04 10:02+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../doc/book/box/box_txn_management.rst:5
msgid "Functions for transaction management"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:9
msgid "Overview"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:11
msgid ""
"For general information and examples, see section :ref:`Transaction "
"control <atomic-atomic_execution>`."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:14
msgid "Observe the following rules when working with transactions:"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:16
msgid "Rule #1"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:19
msgid ""
"The requests in a transaction must be sent to a server as a single block."
" It is not enough to enclose them between begin and commit or rollback. "
"To ensure they are sent as a single block: put them in a function, or put"
" them all on one line, or use a delimiter so that multi-line requests are"
" handled together."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:25
msgid "Rule #2"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:28
msgid ""
"All database operations in a transaction should use the same storage "
"engine. It is not safe to access tuple sets that are defined with "
"``{engine='vinyl'}`` and also access tuple sets that are defined with "
"``{engine='memtx'}``, in the same transaction."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:33
msgid "Rule #3"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:36
msgid ""
"Requests which cause changes to the data definition -- create, alter, "
"drop, truncate -- are only allowed with Tarantool version 2.1 or later. "
"Data-definition requests which change an index or change a format, such "
"as :ref:`space_object:create_index() <box_schema-sequence_create_index>` "
"and :ref:`space_object:format() <box_space-format>`, are not allowed "
"inside transactions except as the first request after ``box.begin()``."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:48
msgid "Index"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:50
msgid "Below is a list of all functions for transaction management."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:60
msgid "Name"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:60
msgid "Use"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:62
msgid ":ref:`box.begin() <box-begin>`"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:62
msgid "Begin the transaction"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:65
msgid ":ref:`box.commit() <box-commit>`"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:65
msgid "End the transaction and save all changes"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:68
msgid ":ref:`box.rollback() <box-rollback>`"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:68
msgid "End the transaction and discard all changes"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:71
msgid ":ref:`box.savepoint() <box-savepoint>`"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:71
msgid "Get a savepoint descriptor"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:74
msgid ":ref:`box.rollback_to_savepoint() <box-rollback_to_savepoint>`"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:74
msgid "Do not end the transaction and discard all changes made after a savepoint"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:78
msgid ":ref:`box.atomic() <box-atomic>`"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:78
msgid "Execute a function, treating it as a transaction"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:81
msgid ":ref:`box.on_commit() <box-on_commit>`"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:81
msgid "Define a trigger that will be activated by box.commit"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:84
msgid ":ref:`box.on_rollback() <box-on_rollback>`"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:84
msgid "Define a trigger that will be activated by box.rollback"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:87
msgid ":ref:`box.is_in_txn() <box-is_in_txn>`"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:87
msgid "State whether a transaction is in progress"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:95
msgid ""
"Begin the transaction. Disable :ref:`implicit yields <atomic-implicit-"
"yields>` until the transaction ends. Signal that writes to the :ref"
":`write-ahead log <internals-wal>` will be deferred until the transaction"
" ends. In effect the fiber which executes ``box.begin()`` is starting an "
"\"active multi-request transaction\", blocking all other fibers."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:103
msgid ""
"**Possible errors:** error if this operation is not permitted because "
"there"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:103
msgid ""
"is already an active transaction. error if for some reason memory cannot "
"be allocated."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:110
msgid "End the transaction, and make all its data-change operations permanent."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:113
msgid ""
"**Possible errors:**  error and abort the transaction in case of a "
"conflict."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:113
msgid ""
"error if the operation fails to write to disk. error if for some reason "
"memory cannot be allocated."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:120
msgid ""
"End the transaction, but cancel all its data-change operations. An "
"explicit call to functions outside ``box.space`` that always yield, such "
"as :ref:`fiber.sleep() <fiber-sleep>` or :ref:`fiber.yield() <fiber-"
"yield>`, will have the same effect."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:129
msgid ""
"Return a descriptor of a savepoint (type = table), which can be used "
"later by :ref:`box.rollback_to_savepoint(savepoint) <box-"
"rollback_to_savepoint>`. Savepoints can only be created while a "
"transaction is active, and they are destroyed when a transaction ends."
msgstr ""

#: ../doc/book/box/box_txn_management.rst
msgid "return"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:134
msgid "savepoint table"
msgstr ""

#: ../doc/book/box/box_txn_management.rst
msgid "rtype"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:135
msgid "Lua object"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:137
#: ../doc/book/box/box_txn_management.rst:150
msgid "error if the savepoint cannot be set in absence of active transaction."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:140
msgid "**Possible errors:** error if for some reason memory cannot be allocated."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:146
msgid ""
"Do not end the transaction, but cancel all its data-change and "
":ref:`box.savepoint() <box-savepoint>` operations that were done after "
"the specified savepoint."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:153
msgid "**Possible errors:** error if the savepoint does not exist."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:155
msgid "**Example:**"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:157
msgid ""
"function f()\n"
"  box.begin()           -- start transaction\n"
"  box.space.t:insert{1} -- this will not be rolled back\n"
"  local s = box.savepoint()\n"
"  box.space.t:insert{2} -- this will be rolled back\n"
"  box.rollback_to_savepoint(s)\n"
"  box.commit()          -- end transaction\n"
"end"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:172
msgid ""
"Execute a function, acting as if the function starts with an implicit "
":ref:`box.begin() <box-begin>` and ends with an implicit "
":ref:`box.commit() <box-commit>` if successful, or ends with an implicit "
":ref:`box.rollback() <box-rollback>` if there is an error."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:177
msgid "the result of the function passed to ``atomic()`` as an argument."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:179
msgid "**Possible errors:** any error that :ref:`box.begin() <box-begin>` and"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:180
msgid ":ref:`box.commit() <box-commit>` can return."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:186
msgid ""
"Define a trigger for execution when a transaction ends due to an event "
"such as :ref:`box.commit <box-commit>`."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:189
msgid ""
"The trigger function may take an iterator parameter, as described in an "
"example for this section."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:192
msgid "The trigger function should not access any database spaces."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:194
msgid ""
"If the trigger execution fails and raises an error, the effect is severe "
"and should be avoided -- use Lua's ``pcall()`` mechanism around code that"
" might fail."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:198
msgid ""
"``box.on_commit()`` must be invoked within a transaction, and the trigger"
" ceases to exist when the transaction ends."
msgstr ""

#: ../doc/book/box/box_txn_management.rst
msgid "Parameters"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:201
msgid "function which will become the trigger function"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:203
msgid "existing trigger function which will be replaced by trigger-function"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:205
msgid "nil or function pointer"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:207
msgid ""
"If the parameters are ``(nil, old-trigger-function)``, then the old "
"trigger is deleted."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:210
msgid ""
"Details about trigger characteristics are in the :ref:`triggers "
"<triggers-box_triggers>` section."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:213
msgid "**Simple and useless example:** this will display 'commit happened':"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:215
msgid ""
"function f()\n"
"function f() print('commit happened') end\n"
"box.begin() box.on_commit(f) box.commit()"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:221
msgid ""
"But of course there is more to it: the function parameter can be an "
"ITERATOR."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:223
msgid ""
"The iterator goes through the effects of every request that changed a "
"space during the transaction."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:226
msgid "The iterator will have:"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:228
msgid "an ordinal request number,"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:229
msgid ""
"the old value of the tuple before the request (this will be nil for an "
"insert request),"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:231
msgid ""
"the new value of the tuple after the request (this will be nil for a "
"delete request),"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:233
msgid "and the id of the space."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:235
msgid ""
"**Less simple more useful example:** this will display the effects of two"
" replace requests:"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:238
msgid ""
"box.space.test:drop()\n"
"s = box.schema.space.create('test')\n"
"i = box.space.test:create_index('i')\n"
"function f(iterator)\n"
"  for request_number, old_tuple, new_tuple, space_id in iterator() do\n"
"    print('request_number ' .. tostring(request_number))\n"
"    print('  old_tuple ' .. tostring(old_tuple[1]) .. ' ' .. "
"old_tuple[2])\n"
"    print('  new_tuple ' .. tostring(new_tuple[1]) .. ' ' .. "
"new_tuple[2])\n"
"    print('  space_id ' .. tostring(space_id))\n"
"  end\n"
"end\n"
"s:insert{1,'-'}\n"
"box.begin() s:replace{1,'x'} s:replace{1,'y'} box.on_commit(f) "
"box.commit()"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:254
msgid "The result will look like this:"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:256
msgid ""
"tarantool> box.begin() s:replace{1,'x'} s:replace{1,'y'} box.on_commit(f)"
" box.commit()\n"
"request_number 1\n"
"  old_tuple 1 -\n"
"  new_tuple 1 x\n"
"  space_id 517\n"
"request_number 2\n"
"  old_tuple 1 x\n"
"  new_tuple 1 y\n"
"  space_id 517"
msgstr ""

#: ../doc/book/box/box_txn_management.rst:272
msgid ""
"Define a trigger for execution when a transaction ends due to an event "
"such as :ref:`box.rollback <box-rollback>`."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:275
msgid ""
"The parameters and warnings are exactly the same as for :ref:`box.on-"
"commit <box-on_commit>`."
msgstr ""

#: ../doc/book/box/box_txn_management.rst:282
msgid ""
"If a transaction is in progress (for example the user has called "
":ref:`box.begin <box-begin>` and has not yet called either "
":ref:`box.commit <box-commit>` or :ref:`box.rollback <box-rollback>`, "
"return ``true``. Otherwise return ``false``."
msgstr ""

