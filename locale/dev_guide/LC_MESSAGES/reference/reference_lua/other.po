# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-03 19:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../doc/reference/reference_lua/other.rst:3
msgid "Miscellaneous"
msgstr ""

#: ../doc/reference/reference_lua/other.rst:7
msgid "Index"
msgstr ""

#: ../doc/reference/reference_lua/other.rst:9
msgid "Below is a list of miscellaneous functions."
msgstr ""

#: ../doc/reference/reference_lua/other.rst:17
msgid "Name"
msgstr ""

#: ../doc/reference/reference_lua/other.rst:17
msgid "Use"
msgstr ""

#: ../doc/reference/reference_lua/other.rst:19
msgid ":ref:`tonumber64() <other-tonumber64>`"
msgstr ""

#: ../doc/reference/reference_lua/other.rst:19
msgid "Convert a string or a Lua number to a 64-bit integer"
msgstr ""

#: ../doc/reference/reference_lua/other.rst:22
msgid ":ref:`dostring() <other-dostring>`"
msgstr ""

#: ../doc/reference/reference_lua/other.rst:22
msgid "Parse and execute an arbitrary chunk of Lua code"
msgstr ""

#: ../doc/reference/reference_lua/other.rst:30
msgid ""
"Convert a string or a Lua number to a 64-bit integer. The input value can"
" be expressed in decimal, binary (for example 0b1010), or hexadecimal "
"(for example -0xffff). The result can be used in arithmetic, and the "
"arithmetic will be 64-bit integer arithmetic rather than floating-point "
"arithmetic. (Operations on an unconverted Lua number use floating-point "
"arithmetic.) The ``tonumber64()`` function is added by Tarantool; the "
"name is global."
msgstr ""

#: ../doc/reference/reference_lua/other.rst:38
#: ../doc/reference/reference_lua/other.rst:78
msgid "**Example:**"
msgstr ""

#: ../doc/reference/reference_lua/other.rst:40
msgid ""
"tarantool> type(123456789012345), type(tonumber64(123456789012345))\n"
"---\n"
"- number\n"
"- number\n"
"...\n"
"tarantool> i = tonumber64('1000000000')\n"
"---\n"
"...\n"
"tarantool> type(i), i / 2, i - 2, i * 2, i + 2, i % 2, i ^ 2\n"
"---\n"
"- number\n"
"- 500000000\n"
"- 999999998\n"
"- 2000000000\n"
"- 1000000002\n"
"- 0\n"
"- 1000000000000000000\n"
"..."
msgstr ""

#: ../doc/reference/reference_lua/other.rst:65
msgid ""
"Parse and execute an arbitrary chunk of Lua code. This function is mainly"
" useful to define and run Lua code without having to introduce changes to"
" the global Lua environment."
msgstr ""

#: ../doc/reference/reference_lua/other.rst
msgid "Parameters"
msgstr ""

#: ../doc/reference/reference_lua/other.rst:69
msgid "Lua code"
msgstr ""

#: ../doc/reference/reference_lua/other.rst:70
msgid ""
"zero or more scalar values which will be appended to, or substitute for, "
"items in the Lua chunk."
msgstr ""

#: ../doc/reference/reference_lua/other.rst
msgid "return"
msgstr ""

#: ../doc/reference/reference_lua/other.rst:73
msgid "whatever is returned by the Lua code chunk."
msgstr ""

#: ../doc/reference/reference_lua/other.rst:75
msgid ""
"Possible errors: If there is a compilation error, it is raised as a Lua "
"error."
msgstr ""

#: ../doc/reference/reference_lua/other.rst:80
msgid ""
"tarantool> dostring('abc')\n"
"---\n"
"error: '[string \"abc\"]:1: ''='' expected near ''<eof>'''\n"
"...\n"
"tarantool> dostring('return 1')\n"
"---\n"
"- 1\n"
"...\n"
"tarantool> dostring('return ...', 'hello', 'world')\n"
"---\n"
"- hello\n"
"- world\n"
"...\n"
"tarantool> dostring([[\n"
"         >   local f = function(key)\n"
"         >     local t = box.space.tester:select{key}\n"
"         >     if t ~= nil then\n"
"         >       return t[1]\n"
"         >     else\n"
"         >       return nil\n"
"         >     end\n"
"         >   end\n"
"         >   return f(...)]], 1)\n"
"---\n"
"- null\n"
"..."
msgstr ""

