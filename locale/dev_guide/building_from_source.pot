# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-03 19:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../doc/dev_guide/building_from_source.rst:5
msgid "Building from source"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:7
msgid "For downloading Tarantool source and building it, the platforms can differ and the preferences can differ. But strategically the steps are always the same."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:10
msgid "Get tools and libraries that will be necessary for building and testing."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:13
msgid "The absolutely necessary ones are:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:15
msgid "A program for downloading source repositories. |br| For all platforms, this is ``git``. It allows downloading the latest complete set of source files from the Tarantool repository on GitHub."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:19
msgid "A C/C++ compiler. |br| Ordinarily, this is ``gcc`` and ``g++`` version 4.6 or later. On Mac OS X, this is ``Clang`` version 3.2+."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:22
msgid "A program for managing the build process. |br| For all platforms, this is ``CMake`` version 2.8+."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:25
msgid "A build automation tool. |br| For all platforms this is ``GNU Make``."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:27
msgid "`ReadLine <http://www.gnu.org/software/readline/>`_ library, any version"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:28
msgid "`ncurses <https://www.gnu.org/software/ncurses/>`_ library, any version"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:29
msgid "`OpenSSL <https://www.openssl.org>`_ library, version 1.0.1+"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:30
msgid "`LibYAML <http://pyyaml.org/wiki/LibYAML>`_ library, version 0.1.4+"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:31
msgid "`ICU <http://site.icu-project.org/download>`_ library, recent version"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:32
msgid "`Autoconf <https://www.gnu.org/software/autoconf/>`_ library, any version"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:33
msgid "`Automake <https://www.gnu.org/software/automake/>`_ library, any version"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:34
msgid "`Libtool <https://www.gnu.org/software/libtool/>`_ library, any version"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:35
msgid "`Zlib-devel <https://www.zlib.net/>`_ library, any version"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:37
msgid "Python and modules. |br| Python interpreter is not necessary for building Tarantool itself, unless you intend to use the \"Run the test suite\" option in step 5. For all platforms, this is ``python`` version 2.7+ (but not 3.x). You need the following Python modules:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:42
msgid "`pyyaml <https://pypi.python.org/pypi/PyYAML>`_ version 3.10"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:43
msgid "`argparse <https://pypi.python.org/pypi/argparse>`_ version 1.1"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:44
msgid "`msgpack-python <https://pypi.python.org/pypi/msgpack-python>`_ version 0.4.6"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:45
msgid "`gevent <https://pypi.python.org/pypi/gevent>`_ version 1.1.2"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:46
msgid "`six <https://pypi.python.org/pypi/six>`_ version 1.8.0"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:48
msgid "To install all required dependencies, follow the instructions for your OS:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:50
msgid "For Debian/Ubuntu, say:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:52
msgid "$ apt install -y build-essential cmake make coreutils sed \\\n"
"      autoconf automake libtool zlib1g-dev \\\n"
"      libreadline-dev libncurses5-dev libyaml-dev libssl-dev \\\n"
"      libunwind-dev libicu-dev \\\n"
"      python python-pip python-setuptools python-dev \\\n"
"      python-msgpack python-yaml python-argparse python-six python-gevent"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:61
msgid "For RHEL/CentOS/Fedora, say:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:63
msgid "$ yum install -y gcc gcc-c++ cmake make coreutils sed \\\n"
"      autoconf automake libtool zlib-devel \\\n"
"      readline-devel ncurses-devel libyaml-devel openssl-devel \\\n"
"      libunwind-devel libicu-devel \\\n"
"      python python-pip python-setuptools python-devel \\\n"
"      python-msgpack python-yaml python-argparse python-six python-gevent"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:72
msgid "For Mac OS X (instructions below are for OS X El Capitan):"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:74
msgid "If you're using Homebrew as your package manager, say:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:76
msgid "$ brew install cmake make autoconf binutils zlib \\\n"
"       autoconf automake libtool \\\n"
"       readline ncurses libyaml openssl libunwind-headers icu4c \\\n"
"       && pip install python-daemon \\\n"
"       msgpack-python pyyaml configargparse six gevent"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:86
msgid "You can not install `zlib-devel <https://www.zlib.net/>`_  package this way."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:88
msgid "Alternatively, download Apple's default Xcode toolset:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:90
msgid "$ xcode-select --install\n"
"$ xcode-select -switch /Applications/Xcode.app/Contents/Developer"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:95
msgid "For FreeBSD (instructions below are for FreeBSD 10.1+ release), say:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:97
msgid "$ pkg install -y sudo git cmake gmake gcc coreutils \\\n"
"      autoconf automake libtool \\\n"
"      readline ncurses libyaml openssl libunwind icu \\\n"
"      python27 py27-pip py27-setuptools py27-daemon \\\n"
"      py27-msgpack py27-yaml py27-argparse py27-six py27-gevent"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:105
msgid "If some Python modules are not available in a repository, it is best to set up the modules by getting a tarball and doing the setup with ``python setup.py`` like this:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:109
msgid "$ # On some machines, this initial command may be necessary:\n"
"$ wget https://bootstrap.pypa.io/ez_setup.py -O - | sudo python\n"
"\n"
"$ # Python module for parsing YAML (pyYAML), for test suite:\n"
"$ # (If wget fails, check at http://pyyaml.org/wiki/PyYAML\n"
"$ # what the current version is.)\n"
"$ cd ~\n"
"$ wget http://pyyaml.org/download/pyyaml/PyYAML-3.10.tar.gz\n"
"$ tar -xzf PyYAML-3.10.tar.gz\n"
"$ cd PyYAML-3.10\n"
"$ sudo python setup.py install"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:123
msgid "Finally, use Python ``pip`` to bring in Python packages that may not be up-to-date in the distro repositories. (On CentOS 7, it will be necessary to install ``pip`` first, with :code:`sudo yum install epel-release` followed by :code:`sudo yum install python-pip`.)"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:129
msgid "$ pip install -r \\\n"
"      https://raw.githubusercontent.com/tarantool/test-run/master/requirements.txt \\\n"
"      --user"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:135
msgid "This step is only necessary once, the first time you do a download."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:137
msgid "Use ``git`` to download the latest Tarantool source code from the GitHub repository ``tarantool/tarantool``, branch 1.10, to a local directory named ``~/tarantool``, for example:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:141
msgid "$ git clone --recursive https://github.com/tarantool/tarantool.git -b 1.10 ~/tarantool"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:145
msgid "On rare occasions, the submodules need to be updated again with the command:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:148
msgid "cd ~/tarantool\n"
"$ git submodule update --init --recursive"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:153
msgid "Use CMake to initiate the build."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:155
msgid "$ cd ~/tarantool\n"
"$ make clean         # unnecessary, added for good luck\n"
"$ rm CMakeCache.txt  # unnecessary, added for good luck\n"
"$ cmake .            # start initiating with build type=Debug"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:162
msgid "On some platforms, it may be necessary to specify the C and C++ versions, for example:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:165
msgid "$ CC=gcc-4.8 CXX=g++-4.8 cmake ."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:169
msgid "The CMake option for specifying build type is :samp:`-DCMAKE_BUILD_TYPE={type}`, where :samp:`{type}` can be:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:172
msgid "``Debug`` -- used by project maintainers"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:173
msgid "``Release`` -- used only if the highest performance is required"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:174
msgid "``RelWithDebInfo`` -- used for production, also provides debugging capabilities"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:176
msgid "The CMake option for hinting that the result will be distributed is :code:`-DENABLE_DIST=ON`. If this option is on, then later ``make install`` will install ``tarantoolctl`` files in addition to ``tarantool`` files."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:180
msgid "Use ``make`` to complete the build."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:182
msgid "$ make"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:188
msgid "For FreeBSD, use ``gmake`` instead."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:190
msgid "This creates the 'tarantool' executable in the ``src/`` directory."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:194
msgid "If you encounter a ``curl`` or ``OpenSSL`` errors on this step try installing ``openssl111`` package of the specific ``1.1.1d`` version."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:197
msgid "Next, it's highly recommended to say ``make install`` to install Tarantool to the ``/usr/local`` directory and keep your system clean. However, it is possible to run the Tarantool executable without installation."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:201
msgid "Run the test suite."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:203
msgid "This step is optional. Tarantool's developers always run the test suite before they publish new versions. You should run the test suite too, if you make any changes in the code. Assuming you downloaded to ``~/tarantool``, the principal steps are:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:208
msgid "$ # make a subdirectory named `bin`\n"
"$ mkdir ~/tarantool/bin\n"
"\n"
"$ # link Python to bin (this may require superuser privileges)\n"
"$ ln /usr/bin/python ~/tarantool/bin/python\n"
"\n"
"$ # get to the test subdirectory\n"
"$ cd ~/tarantool/test\n"
"\n"
"$ # run tests using Python\n"
"$ PATH=~/tarantool/bin:$PATH ./test-run.py"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:222
msgid "The output should contain reassuring reports, for example:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:224
msgid "======================================================================\n"
"TEST                                            RESULT\n"
"------------------------------------------------------------\n"
"box/bad_trigger.test.py                         [ pass ]\n"
"box/call.test.py                                [ pass ]\n"
"box/iproto.test.py                              [ pass ]\n"
"box/xlog.test.py                                [ pass ]\n"
"box/admin.test.lua                              [ pass ]\n"
"box/auth_access.test.lua                        [ pass ]\n"
"... etc."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:237
msgid "To prevent later confusion, clean up what's in the ``bin`` subdirectory:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:239
msgid "$ rm ~/tarantool/bin/python\n"
"$ rmdir ~/tarantool/bin"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:244
msgid "Make RPM and Debian packages."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:246
msgid "This step is optional. It's only for people who want to redistribute Tarantool. We highly recommend to use official packages from the `tarantool.org <https://tarantool.org/download.html>`_ web-site. However, you can build RPM and Debian packages using `PackPack <https://github.com/packpack/packpack>`_ or using the ``dpkg-buildpackage`` or ``rpmbuild`` tools. Please consult ``dpkg`` or ``rpmbuild`` documentation for details."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:254
msgid "Verify your Tarantool installation."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:256
msgid "$ # if you installed tarantool locally after build\n"
"$ tarantool\n"
"$ # - OR -\n"
"$ # if you didn't install tarantool locally after build\n"
"$ ./src/tarantool"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:264
msgid "This starts Tarantool in the interactive mode."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:266
msgid "See also:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:268
msgid "`Tarantool README.md <https://github.com/tarantool/tarantool/blob/1.10/README.md>`_"
msgstr ""

