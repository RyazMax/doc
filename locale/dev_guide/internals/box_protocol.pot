# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 2.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-04 10:02+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../doc/dev_guide/internals/box_protocol.rst:7
msgid "Binary protocol"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:9
msgid "The binary protocol in Tarantool is a binary request/response protocol."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:15
msgid "Notation in diagrams"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:17
msgid "0    X\n"
"+----+\n"
"|    | - X + 1 bytes\n"
"+----+\n"
" TYPE - type of MsgPack value (if it is a MsgPack object)\n"
"\n"
"+====+\n"
"|    | - Variable size MsgPack object\n"
"+====+\n"
" TYPE - type of MsgPack value\n"
"\n"
"+~~~~+\n"
"|    | - Variable size MsgPack Array/Map\n"
"+~~~~+\n"
" TYPE - type of MsgPack value"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:36
msgid "MsgPack data types:"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:38
msgid "**MP_INT** - Integer"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:39
msgid "**MP_MAP** - Map"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:40
msgid "**MP_ARR** - Array"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:41
msgid "**MP_STRING** - String"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:42
msgid "**MP_FIXSTR** - Fixed size string"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:43
msgid "**MP_OBJECT** - Any MsgPack object"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:44
msgid "**MP_BIN** - MsgPack binary format"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:48
msgid "Encoding of Tarantool-specific data types"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:50
msgid "Some of the data types used in Tarantool are application-specific in terms of the MsgPack standard. For these data types, we use the following representation."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:56
msgid "Decimals"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:58
msgid "MsgPack EXT type ``MP_EXT`` together with the extension type ``MP_DECIMAL`` is used as a record header."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:61
msgid "MP_DECIMAL is 1."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:63
msgid "`MsgPack spec <https://github.com/msgpack/msgpack/blob/master/spec.md#ext-format-family>`_ defines two kinds of types:"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:66
msgid "``fixext 1/2/4/8/16`` types have fixed length so the length is not encoded explicitly;"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:67
msgid "``ext 8/16/32`` types require the data length to be encoded."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:69
msgid "``MP_EXP`` + optional ``length`` imply using one of these types."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:71
msgid "The decimal MsgPack representation looks like this:"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:73
msgid "+--------+-------------------+------------+===============+\n"
"| MP_EXT | length (optional) | MP_DECIMAL | PackedDecimal |\n"
"+--------+-------------------+------------+===============+"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:79
msgid "Here ``length`` is the length of ``PackedDecimal`` field, and it is of type ``MP_UINT``, when encoded explicitly (i.e. when the type is ``ext 8/16/32``)."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:82
msgid "``PackedDecimal`` has the following structure:"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:84
msgid " <--- length bytes -->\n"
"+-------+=============+\n"
"| scale |     BCD     |\n"
"+-------+=============+"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:91
msgid "Here ``scale`` is either ``MP_INT`` or ``MP_UINT``. |br| ``scale`` = -exponent (exponent negated!)"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:94
msgid "``BCD`` is a sequence of bytes representing decimal digits of the encoded number (each byte represents two decimal digits each encoded using 4 bits), so ``byte >> 4`` is the first digit and ``byte & 0x0f`` is the second digit. The leftmost digit in the array is the most significant. The rightmost digit in the array is the least significant."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:100
msgid "The first byte of the ``BCD`` array contains the first digit of the number, represented as follows:"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:103
msgid "|  4 bits           |  4 bits           |\n"
"   = 0x                = the 1st digit"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:108
msgid "The last byte of the ``BCD`` array contains the last digit of the number and the ``nibble``, represented as follows:"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:111
msgid "|  4 bits           |  4 bits           |\n"
"   = the last digit    = nibble"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:116
msgid "The ``nibble`` represents the number's sign:"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:118
msgid "``0x0a``, ``0x0c``, ``0x0e``, ``0x0f`` stand for plus,"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:119
msgid "``0x0b`` and ``0x0d`` stand for minus."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:121
msgid "**Examples**"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:123
msgid "The decimal ``-12.34`` will be encoded as ``0xd6,0x01,0x02,0x01,0x23,0x4d``:"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:125
msgid "|MP_EXT (fixext 4) | MP_DECIMAL | scale |  1   |  2,3 |  4 (minus) |\n"
"|       0xd6       |    0x01    | 0x02  | 0x01 | 0x23 | 0x4d       |"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:130
msgid "The decimal 0.000000000000000000000000000000000010 will be encoded as ``0xc7,0x03,0x01,0x24,0x01,0x0c``:"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:133
msgid "| MP_EXT (ext 8) | length | MP_DECIMAL | scale |  1   | 0 (plus) |\n"
"|      0xc7      |  0x03  |    0x01    | 0x24  | 0x01 | 0x0c     |"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:140
msgid "Greeting packet"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:142
msgid "TARANTOOL'S GREETING:\n"
"\n"
"0                                     63\n"
"+--------------------------------------+\n"
"|                                      |\n"
"| Tarantool Greeting (server version)  |\n"
"|               64 bytes               |\n"
"+---------------------+----------------+\n"
"|                     |                |\n"
"| BASE64 encoded SALT |      NULL      |\n"
"|      44 bytes       |                |\n"
"+---------------------+----------------+\n"
"64                  107              127"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:158
msgid "The server instance begins the dialogue by sending a fixed-size (128-byte) text greeting to the client. The greeting always contains two 64-byte lines of ASCII text, each line ending with a newline character (:code:`\\n`). The first line contains the instance version and protocol type. The second line contains up to 44 bytes of base64-encoded random string, to use in the authentication packet, and ends with up to 23 spaces."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:168
msgid "Unified packet structure"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:170
msgid "Once a greeting is read, the protocol becomes pure request/response and features a complete access to Tarantool functionality, including:"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:173
msgid "request multiplexing, e.g. ability to asynchronously issue multiple requests via the same connection"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:175
msgid "response format that supports zero-copy writes"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:177
msgid "The protocol uses `msgpack <http://msgpack.org>`_ for data structures and encoding."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:180
msgid "The protocol uses maps that contain some integer constants as keys. These constants are defined in `src/box/iproto_constants.h <https://github.com/tarantool/tarantool/blob/2.3/src/box/iproto_constants.h>`_. We list common constants here:"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:185
msgid "-- user keys\n"
"<iproto_sync>          ::= 0x01\n"
"<iproto_schema_id>     ::= 0x05  /* also known as schema_version */\n"
"<iproto_space_id>      ::= 0x10\n"
"<iproto_index_id>      ::= 0x11\n"
"<iproto_limit>         ::= 0x12\n"
"<iproto_offset>        ::= 0x13\n"
"<iproto_iterator>      ::= 0x14\n"
"<iproto_key>           ::= 0x20\n"
"<iproto_tuple>         ::= 0x21\n"
"<iproto_function_name> ::= 0x22\n"
"<iproto_username>      ::= 0x23\n"
"<iproto_expr>          ::= 0x27 /* also known as expression */\n"
"<iproto_ops>           ::= 0x28\n"
"<iproto_data>          ::= 0x30\n"
"<iproto_error>         ::= 0x31\n"
"<iproto_metadata>      ::= 0x32\n"
"<iproto_bind_metadata> ::= 0x33\n"
"<iproto_bind_count>    ::= 0x34\n"
"<iproto_sql_text>      ::= 0x40\n"
"<iproto_sql_bind>      ::= 0x41\n"
"<iproto_sql_info>      ::= 0x42\n"
"<iproto_stmt_id>       ::= 0x43\n"
"<iproto_replica_anon>  ::= 0x50"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:212
msgid "-- -- Value for <code> key in request can be:\n"
"-- User command codes\n"
"<iproto_select>         ::= 0x01\n"
"<iproto_insert>         ::= 0x02\n"
"<iproto_replace>        ::= 0x03\n"
"<iproto_update>         ::= 0x04\n"
"<iproto_delete>         ::= 0x05\n"
"<iproto_call_16>        ::= 0x06 /* as used in version 1.6 */\n"
"<iproto_auth>           ::= 0x07\n"
"<iproto_eval>           ::= 0x08\n"
"<iproto_upsert>         ::= 0x09\n"
"<iproto_call>           ::= 0x0a\n"
"<iproto_execute>        ::= 0x0b\n"
"<iproto_nop>            ::= 0x0c\n"
"<iproto_prepare>        ::= 0x0d\n"
"<iproto_type_stat_max>  ::= 0x0e\n"
"-- Admin command codes\n"
"-- (including codes for replica-set initialization and master election)\n"
"<iproto_ping>           ::= 0x40\n"
"<iproto_join>           ::= 0x41 /* i.e. replication join */\n"
"<iproto_subscribe>      ::= 0x42\n"
"<iproto_request_vote>   ::= 0x43\n"
"<iproto_fetch_snapshot> ::= 0x45\n"
"<iproto_register>       ::= 0x46\n"
"\n"
"-- -- Value for <code> key in response can be:\n"
"<iproto_ok>           ::= 0x00\n"
"<iproto_type_error>   ::= 0x8XXX /* where XXX is a value in errcode.h */"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:243
msgid "Both :code:`<header>` and :code:`<body>` are msgpack maps:"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:245
msgid "Request/Response:\n"
"\n"
"0        5\n"
"+--------+ +============+ +===================================+\n"
"| BODY + | |            | |                                   |\n"
"| HEADER | |   HEADER   | |               BODY                |\n"
"|  SIZE  | |            | |                                   |\n"
"+--------+ +============+ +===================================+\n"
"  MP_INT       MP_MAP                     MP_MAP"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:257
msgid "UNIFIED HEADER:\n"
"\n"
"+================+================+=====================+\n"
"|                |                |                     |\n"
"|   0x00: CODE   |   0x01: SYNC   |    0x05: SCHEMA_ID  |\n"
"| MP_INT: MP_INT | MP_INT: MP_INT |  MP_INT: MP_INT     |\n"
"|                |                |                     |\n"
"+================+================+=====================+\n"
"                          MP_MAP"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:269
msgid "They only differ in the allowed set of keys and values. The key defines the type of value that follows. If a body has no keys, the entire msgpack map for the body may be missing. Such is the case, for example, for a <ping> request. ``schema_id`` may be absent in the request's header, meaning that there will be no version checking, but it must be present in the response. If ``schema_id`` is sent in the header, then it will be checked."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:280
msgid "Authentication"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:282
msgid "When a client connects to the server instance, the instance responds with a 128-byte text greeting message. Part of the greeting is base-64 encoded session salt - a random string which can be used for authentication. The length of decoded salt (44 bytes) exceeds the amount necessary to sign the authentication message (first 20 bytes). An excess is reserved for future authentication schemas."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:289
msgid "PREPARE SCRAMBLE:\n"
"\n"
"    LEN(ENCODED_SALT) = 44;\n"
"    LEN(SCRAMBLE)     = 20;\n"
"\n"
"prepare 'chap-sha1' scramble:\n"
"\n"
"    salt = base64_decode(encoded_salt);\n"
"    step_1 = sha1(password);\n"
"    step_2 = sha1(step_1);\n"
"    step_3 = sha1(salt, step_2);\n"
"    scramble = xor(step_1, step_3);\n"
"    return scramble;\n"
"\n"
"AUTHORIZATION BODY: CODE = 0x07\n"
"\n"
"+==================+====================================+\n"
"|                  |        +-------------+-----------+ |\n"
"|  (KEY)           | (TUPLE)|  len == 9   | len == 20 | |\n"
"|   0x23:USERNAME  |   0x21:| \"chap-sha1\" |  SCRAMBLE | |\n"
"| MP_INT:MP_STRING | MP_INT:|  MP_STRING  |  MP_BIN   | |\n"
"|                  |        +-------------+-----------+ |\n"
"|                  |                   MP_ARRAY         |\n"
"+==================+====================================+\n"
"                        MP_MAP"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:317
msgid ":code:`<key>` holds the user name. :code:`<tuple>` must be an array of 2 fields: authentication mechanism (\"chap-sha1\" is the only supported mechanism right now) and password, encrypted according to the specified mechanism. Authentication in Tarantool is optional, if no authentication is performed, session user is 'guest'. The instance responds to authentication packet with a standard response with 0 tuples."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:325
msgid "Requests"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:327
msgid "SELECT: CODE - 0x01 Find tuples matching the search pattern"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:330
msgid "SELECT BODY:\n"
"\n"
"+==================+==================+==================+\n"
"|                  |                  |                  |\n"
"|   0x10: SPACE_ID |   0x11: INDEX_ID |   0x12: LIMIT    |\n"
"| MP_INT: MP_INT   | MP_INT: MP_INT   | MP_INT: MP_INT   |\n"
"|                  |                  |                  |\n"
"+==================+==================+==================+\n"
"|                  |                  |                  |\n"
"|   0x13: OFFSET   |   0x14: ITERATOR |   0x20: KEY      |\n"
"| MP_INT: MP_INT   | MP_INT: MP_INT   | MP_INT: MP_ARRAY |\n"
"|                  |                  |                  |\n"
"+==================+==================+==================+\n"
"                          MP_MAP"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:347
msgid "INSERT:  CODE - 0x02 Inserts tuple into the space, if no tuple with same unique keys exists. Otherwise throw *duplicate key* error."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:349
msgid "REPLACE: CODE - 0x03 Insert a tuple into the space or replace an existing one."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:352
msgid "INSERT/REPLACE BODY:\n"
"\n"
"+==================+==================+\n"
"|                  |                  |\n"
"|   0x10: SPACE_ID |   0x21: TUPLE    |\n"
"| MP_INT: MP_INT   | MP_INT: MP_ARRAY |\n"
"|                  |                  |\n"
"+==================+==================+\n"
"                 MP_MAP"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:365
msgid "UPDATE: CODE - 0x04 Update a tuple"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:368
msgid "UPDATE BODY:\n"
"\n"
"+==================+=======================+\n"
"|                  |                       |\n"
"|   0x10: SPACE_ID |   0x11: INDEX_ID      |\n"
"| MP_INT: MP_INT   | MP_INT: MP_INT        |\n"
"|                  |                       |\n"
"+==================+=======================+\n"
"|                  |          +~~~~~~~~~~+ |\n"
"|                  |          |          | |\n"
"|                  | (TUPLE)  |    OP    | |\n"
"|   0x20: KEY      |    0x21: |          | |\n"
"| MP_INT: MP_ARRAY |  MP_INT: +~~~~~~~~~~+ |\n"
"|                  |            MP_ARRAY   |\n"
"+==================+=======================+\n"
"                 MP_MAP"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:387
msgid "OP:\n"
"    Works only for integer fields:\n"
"    * Addition    OP = '+' . space[key][field_no] += argument\n"
"    * Subtraction OP = '-' . space[key][field_no] -= argument\n"
"    * Bitwise AND OP = '&' . space[key][field_no] &= argument\n"
"    * Bitwise XOR OP = '^' . space[key][field_no] ^= argument\n"
"    * Bitwise OR  OP = '|' . space[key][field_no] |= argument\n"
"    Works on any fields:\n"
"    * Delete      OP = '#'\n"
"      delete <argument> fields starting\n"
"      from <field_no> in the space[<key>]\n"
"\n"
"0           2\n"
"+-----------+==========+==========+\n"
"|           |          |          |\n"
"|    OP     | FIELD_NO | ARGUMENT |\n"
"| MP_FIXSTR |  MP_INT  |  MP_INT  |\n"
"|           |          |          |\n"
"+-----------+==========+==========+\n"
"              MP_ARRAY"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:410
msgid "Note that ``FIELD_NO`` is one based (starts from 1) unlike indices numbers which are usually zero based."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:412
msgid "    * Insert      OP = '!'\n"
"      insert <argument> before <field_no>\n"
"    * Assign      OP = '='\n"
"      assign <argument> to field <field_no>.\n"
"      will extend the tuple if <field_no> == <max_field_no> + 1\n"
"\n"
"0           2\n"
"+-----------+==========+===========+\n"
"|           |          |           |\n"
"|    OP     | FIELD_NO | ARGUMENT  |\n"
"| MP_FIXSTR |  MP_INT  | MP_OBJECT |\n"
"|           |          |           |\n"
"+-----------+==========+===========+\n"
"              MP_ARRAY\n"
"\n"
"    Works on string fields:\n"
"    * Splice      OP = ':'\n"
"      take the string from space[key][field_no] and\n"
"      substitute <offset> bytes from <position> with <argument>"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:434
msgid "0           2\n"
"+-----------+==========+==========+========+==========+\n"
"|           |          |          |        |          |\n"
"|    ':'    | FIELD_NO | POSITION | OFFSET | ARGUMENT |\n"
"| MP_FIXSTR |  MP_INT  |  MP_INT  | MP_INT |  MP_STR  |\n"
"|           |          |          |        |          |\n"
"+-----------+==========+==========+========+==========+\n"
"                         MP_ARRAY"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:446
msgid "It is an error to specify an argument of a type that differs from the expected type."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:448
msgid "DELETE: CODE - 0x05 Delete a tuple"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:451
msgid "DELETE BODY:\n"
"\n"
"+==================+==================+==================+\n"
"|                  |                  |                  |\n"
"|   0x10: SPACE_ID |   0x11: INDEX_ID |   0x20: KEY      |\n"
"| MP_INT: MP_INT   | MP_INT: MP_INT   | MP_INT: MP_ARRAY |\n"
"|                  |                  |                  |\n"
"+==================+==================+==================+\n"
"                          MP_MAP"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:464
msgid "CALL_16: CODE - 0x06 Call a stored function, returning an array of tuples. This is deprecated; CALL (0x0a) is recommended instead."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:467
msgid "CALL_16 BODY:\n"
"\n"
"+=======================+==================+\n"
"|                       |                  |\n"
"|   0x22: FUNCTION_NAME |   0x21: TUPLE    |\n"
"| MP_INT: MP_STRING     | MP_INT: MP_ARRAY |\n"
"|                       |                  |\n"
"+=======================+==================+\n"
"                    MP_MAP"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:481
msgid "EVAL: CODE - 0x08 Evaulate Lua expression"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:484
msgid "EVAL BODY:\n"
"\n"
"+=======================+==================+\n"
"|                       |                  |\n"
"|   0x27: EXPRESSION    |   0x21: TUPLE    |\n"
"| MP_INT: MP_STRING     | MP_INT: MP_ARRAY |\n"
"|                       |                  |\n"
"+=======================+==================+\n"
"                    MP_MAP"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:497
msgid "UPSERT: CODE - 0x09 Update tuple if it would be found elsewhere try to insert tuple. Always use primary index for key."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:500
msgid "UPSERT BODY:\n"
"\n"
"+==================+==================+==========================+\n"
"|                  |                  |             +~~~~~~~~~~+ |\n"
"|                  |                  |             |          | |\n"
"|   0x10: SPACE_ID |   0x21: TUPLE    |       (OPS) |    OP    | |\n"
"| MP_INT: MP_INT   | MP_INT: MP_ARRAY |       0x28: |          | |\n"
"|                  |                  |     MP_INT: +~~~~~~~~~~+ |\n"
"|                  |                  |               MP_ARRAY   |\n"
"+==================+==================+==========================+\n"
"                                MP_MAP\n"
"\n"
"Operations structure same as for UPDATE operation.\n"
"   0           2\n"
"+-----------+==========+==========+\n"
"|           |          |          |\n"
"|    OP     | FIELD_NO | ARGUMENT |\n"
"| MP_FIXSTR |  MP_INT  |  MP_INT  |\n"
"|           |          |          |\n"
"+-----------+==========+==========+\n"
"              MP_ARRAY\n"
"\n"
"Supported operations:\n"
"\n"
"'+' - add a value to a numeric field. If the filed is not numeric, it's\n"
"      changed to 0 first. If the field does not exist, the operation is\n"
"      skipped. There is no error in case of overflow either, the value\n"
"      simply wraps around in C style. The range of the integer is MsgPack:\n"
"      from -2^63 to 2^64-1\n"
"'-' - same as the previous, but subtract a value\n"
"'=' - assign a field to a value. The field must exist, if it does not exist,\n"
"      the operation is skipped.\n"
"'!' - insert a field. It's only possible to insert a field if this create no\n"
"      nil \"gaps\" between fields. E.g. it's possible to add a field between\n"
"      existing fields or as the last field of the tuple.\n"
"'#' - delete a field. If the field does not exist, the operation is skipped.\n"
"      It's not possible to change with update operations a part of the primary\n"
"      key (this is validated before performing upsert)."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:541
msgid "CALL: CODE - 0x0a Similar to CALL_16, but -- like EVAL, CALL returns a list of values, unconverted"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:544
msgid "CALL BODY:\n"
"\n"
"+=======================+==================+\n"
"|                       |                  |\n"
"|   0x22: FUNCTION_NAME |   0x21: TUPLE    |\n"
"| MP_INT: MP_STRING     | MP_INT: MP_ARRAY |\n"
"|                       |                  |\n"
"+=======================+==================+\n"
"                    MP_MAP"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:559
msgid "Response packet structure"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:561
msgid "We will show whole packets here:"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:563
msgid "OK:    LEN + HEADER + BODY\n"
"\n"
"0      5                                          OPTIONAL\n"
"+------++================+================++===================+\n"
"|      ||                |                ||                   |\n"
"| BODY ||   0x00: 0x00   |   0x01: SYNC   ||   0x30: DATA      |\n"
"|HEADER|| MP_INT: MP_INT | MP_INT: MP_INT || MP_INT: MP_OBJECT |\n"
"| SIZE ||                |                ||                   |\n"
"+------++================+================++===================+\n"
" MP_INT                MP_MAP                      MP_MAP"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:577
msgid "Set of tuples in the response :code:`<data>` expects a msgpack array of tuples as value EVAL command returns arbitrary `MP_ARRAY` with arbitrary MsgPack values."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:580
msgid "ERROR: LEN + HEADER + BODY\n"
"\n"
"0      5\n"
"+------++================+================++===================+\n"
"|      ||                |                ||                   |\n"
"| BODY ||   0x00: 0x8XXX |   0x01: SYNC   ||   0x31: ERROR     |\n"
"|HEADER|| MP_INT: MP_INT | MP_INT: MP_INT || MP_INT: MP_STRING |\n"
"| SIZE ||                |                ||                   |\n"
"+------++================+================++===================+\n"
" MP_INT                MP_MAP                      MP_MAP\n"
"\n"
"Where 0xXXX is ERRCODE."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:595
msgid "An error message is present in the response only if there is an error; :code:`<error>` expects as value a msgpack string."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:598
msgid "Convenience macros which define hexadecimal constants for return codes can be found in `src/box/errcode.h <https://github.com/tarantool/tarantool/blob/2.1/src/box/errcode.h>`_"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:604
msgid "Replication packet structure"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:606
msgid "-- replication keys\n"
"<server_id>    ::= 0x02\n"
"<lsn>          ::= 0x03\n"
"<timestamp>    ::= 0x04\n"
"<server_uuid>  ::= 0x24\n"
"<cluster_uuid> ::= 0x25\n"
"<vclock>       ::= 0x26"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:616
msgid "-- replication codes\n"
"<join>         ::= 0x41\n"
"<subscribe>    ::= 0x42"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:623
msgid "JOIN:\n"
"\n"
"In the beginning you must send initial JOIN\n"
"               HEADER                      BODY\n"
"+================+================++===================+\n"
"|                |                ||   SERVER_UUID     |\n"
"|   0x00: 0x41   |   0x01: SYNC   ||   0x24: UUID      |\n"
"| MP_INT: MP_INT | MP_INT: MP_INT || MP_INT: MP_STRING |\n"
"|                |                ||                   |\n"
"+================+================++===================+\n"
"               MP_MAP                     MP_MAP\n"
"\n"
"Then instance, which we connect to, will send last SNAP file by, simply,\n"
"creating a number of INSERTs (with additional LSN and ServerID)\n"
"(don't reply). Then it'll send a vclock's MP_MAP and close a socket.\n"
"\n"
"+================+================++============================+\n"
"|                |                ||        +~~~~~~~~~~~~~~~~~+ |\n"
"|                |                ||        |                 | |\n"
"|   0x00: 0x00   |   0x01: SYNC   ||   0x26:| SRV_ID: SRV_LSN | |\n"
"| MP_INT: MP_INT | MP_INT: MP_INT || MP_INT:| MP_INT: MP_INT  | |\n"
"|                |                ||        +~~~~~~~~~~~~~~~~~+ |\n"
"|                |                ||               MP_MAP       |\n"
"+================+================++============================+\n"
"               MP_MAP                      MP_MAP\n"
"\n"
"SUBSCRIBE:\n"
"\n"
"Then you must send SUBSCRIBE:\n"
"\n"
"                              HEADER\n"
"+===================+===================+\n"
"|                   |                   |\n"
"|     0x00: 0x42    |    0x01: SYNC     |\n"
"|   MP_INT: MP_INT  |  MP_INT: MP_INT   |\n"
"|                   |                   |\n"
"+===================+===================+\n"
"|    SERVER_UUID    |    CLUSTER_UUID   |\n"
"|   0x24: UUID      |   0x25: UUID      |\n"
"| MP_INT: MP_STRING | MP_INT: MP_STRING |\n"
"|                   |                   |\n"
"+===================+===================+\n"
"                 MP_MAP\n"
"\n"
"      BODY\n"
"+================+\n"
"|                |\n"
"|   0x26: VCLOCK |\n"
"| MP_INT: MP_INT |\n"
"|                |\n"
"+================+\n"
"      MP_MAP\n"
"\n"
"Then you must process every query that'll came through other masters.\n"
"Every request between masters will have Additional LSN and SERVER_ID."
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:683
msgid "XLOG / SNAP"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:685
msgid "XLOG and SNAP files have nearly the same format. The header looks like:"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:687
msgid "<type>\\n                  SNAP\\n or XLOG\\n\n"
"<version>\\n               currently 0.13\\n\n"
"Server: <server_uuid>\\n   where UUID is a 36-byte string\n"
"VClock: <vclock_map>\\n    e.g. {1: 0}\\n\n"
"\\n"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:695
msgid "After the file header come the data tuples. Tuples begin with a row marker ``0xd5ba0bab`` and the last tuple may be followed by an EOF marker ``0xd510aded``. Thus, between the file header and the EOF marker, there may be data tuples that have this form:"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:702
msgid "0            3 4                                         17\n"
"+-------------+========+============+===========+=========+\n"
"|             |        |            |           |         |\n"
"| 0xd5ba0bab  | LENGTH | CRC32 PREV | CRC32 CUR | PADDING |\n"
"|             |        |            |           |         |\n"
"+-------------+========+============+===========+=========+\n"
"  MP_FIXEXT2    MP_INT     MP_INT       MP_INT      ---\n"
"\n"
"+============+ +===================================+\n"
"|            | |                                   |\n"
"|   HEADER   | |                BODY               |\n"
"|            | |                                   |\n"
"+============+ +===================================+\n"
"    MP_MAP                     MP_MAP"
msgstr ""

#: ../doc/dev_guide/internals/box_protocol.rst:719
msgid "See the example in the following section."
msgstr ""

