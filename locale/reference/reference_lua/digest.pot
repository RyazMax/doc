# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-03 19:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../doc/reference/reference_lua/digest.rst:5
msgid "Module `digest`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:11
msgid "Overview"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:13
msgid "A \"digest\" is a value which is returned by a function (usually a `Cryptographic hash function`_), applied against a string. Tarantool's ``digest`` module supports several types of cryptographic hash functions (AES_, MD4_, MD5_, SHA-1_, SHA-2_, PBKDF2_) as well as a checksum function (CRC32_), two functions for base64_, and two non-cryptographic hash functions (guava_, murmur_). Some of the digest functionality is also present in the :ref:`crypto <crypto>`."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:22
msgid "Index"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:24
msgid "Below is a list of all ``digest`` functions."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:32
msgid "Name"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:32
msgid "Use"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:34
msgid ":ref:`digest.aes256cbc.encrypt() <digest-aes>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:34
msgid "Encrypt a string using AES"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:37
msgid ":ref:`digest.aes256cbc.decrypt() <digest-aes>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:37
msgid "Decrypt a string using AES"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:40
msgid ":ref:`digest.md4() <digest-md4>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:40
msgid "Get a digest made with MD4"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:43
msgid ":ref:`digest.md4_hex() <digest-md4_hex>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:43
msgid "Get a hexadecimal digest made with MD4"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:46
msgid ":ref:`digest.md5() <digest-md5>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:46
msgid "Get a digest made with MD5"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:49
msgid ":ref:`digest.md5_hex() <digest-md5_hex>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:49
msgid "Get a hexadecimal digest made with MD5"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:52
msgid ":ref:`digest.pbkdf2() <digest-pbkdf2>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:52
msgid "Get a digest made with PBKDF2"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:55
msgid ":ref:`digest.sha1() <digest-sha1>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:55
msgid "Get a digest made with SHA-1"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:58
msgid ":ref:`digest.sha1_hex() <digest-sha1_hex>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:58
msgid "Get a hexadecimal digest made with SHA-1"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:61
msgid ":ref:`digest.sha224() <digest-sha224>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:61
msgid "Get a 224-bit digest made with SHA-2"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:64
msgid ":ref:`digest.sha224_hex() <digest-sha224_hex>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:64
msgid "Get a 56-byte hexadecimal digest made with SHA-2"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:67
msgid ":ref:`digest.sha256() <digest-sha256>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:67
msgid "Get a 256-bit digest made with SHA-2"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:70
msgid ":ref:`digest.sha256_hex() <digest-sha256_hex>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:70
msgid "Get a 64-byte hexadecimal digest made with SHA-2"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:73
msgid ":ref:`digest.sha384() <digest-sha384>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:73
msgid "Get a 384-bit digest made with SHA-2"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:76
msgid ":ref:`digest.sha384_hex() <digest-sha384_hex>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:76
msgid "Get a 96-byte hexadecimal digest made with SHA-2"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:79
msgid ":ref:`digest.sha512() <digest-sha512>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:79
msgid "Get a 512-bit digest made with SHA-2"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:82
msgid ":ref:`digest.sha512_hex() <digest-sha512_hex>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:82
msgid "Get a 128-byte hexadecimal digest made with SHA-2"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:85
msgid ":ref:`digest.base64_encode() <digest-base64_encode>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:85
msgid "Encode a string to Base64"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:88
msgid ":ref:`digest.base64_decode() <digest-base64_decode>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:88
msgid "Decode a Base64-encoded string"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:91
msgid ":ref:`digest.urandom() <digest-urandom>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:91
msgid "Get an array of random bytes"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:94
msgid ":ref:`digest.crc32() <digest-crc32>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:94
msgid "Get a 32-bit checksum made with CRC32"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:97
msgid ":ref:`digest.crc32.new() <digest-crc32_new>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:97
msgid "Initiate incremental CRC32"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:100
msgid ":ref:`digest.guava() <digest-guava>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:100
msgid "Get a number made with a consistent hash"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:103
msgid ":ref:`digest.murmur() <digest-murmur>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:103
msgid "Get a digest made with MurmurHash"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:106
msgid ":ref:`digest.murmur.new() <digest-murmur_new>`"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:106
msgid "Initiate incremental MurmurHash"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:115
msgid "Returns 256-bit binary string = digest made with AES."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:121
msgid "Returns 128-bit binary string = digest made with MD4."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:127
msgid "Returns 32-byte string = hexadecimal of a digest calculated with md4."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:133
msgid "Returns 128-bit binary string = digest made with MD5."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:139
msgid "Returns 32-byte string = hexadecimal of a digest calculated with md5."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:145
msgid "Returns binary string = digest made with PBKDF2. |br| For effective encryption the ``iterations`` value should be at least several thousand. The ``digest-length`` value determines the length of the resulting binary string."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:154
msgid "Returns 160-bit binary string = digest made with SHA-1."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:160
msgid "Returns 40-byte string = hexadecimal of a digest calculated with sha1."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:166
msgid "Returns 224-bit binary string = digest made with SHA-2."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:172
msgid "Returns 56-byte string = hexadecimal of a digest calculated with sha224."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:178
msgid "Returns 256-bit binary string =  digest made with SHA-2."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:184
msgid "Returns 64-byte string = hexadecimal of a digest calculated with sha256."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:190
msgid "Returns 384-bit binary string =  digest made with SHA-2."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:196
msgid "Returns 96-byte string = hexadecimal of a digest calculated with sha384."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:202
msgid "Returns 512-bit binary tring = digest made with SHA-2."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:208
msgid "Returns 128-byte string = hexadecimal of a digest calculated with sha512."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:214
msgid "Returns base64 encoding from a regular string."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:216
msgid "The possible options are:"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:218
msgid "``nopad`` -- result must not include '=' for padding at the end,"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:219
msgid "``nowrap`` -- result must not include line feed for splitting lines after 72 characters,"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:221
msgid "``urlsafe`` -- result must not include '=' or line feed, and may contain '-' or '_' instead of '+' or '/' for positions 62 and 63 in the index table."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:225
msgid "Options may be ``true`` or ``false``, the default value is ``false``."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:227
msgid "For example:"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:229
msgid "digest.base64_encode(string_variable,{nopad=true})"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:237
msgid "Returns a regular string from a base64 encoding."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:243
msgid "Returns array of random bytes with length = integer."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:249
msgid "Returns 32-bit checksum made with CRC32."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:251
msgid "The ``crc32`` and ``crc32_update`` functions use the `Cyclic Redundancy Check`_ polynomial value: ``0x1EDC6F41`` / ``4812730177``. (Other settings are: input = reflected, output = reflected, initial value = 0xFFFFFFFF, final xor value = 0x0.) If it is necessary to be compatible with other checksum functions in other programming languages, ensure that the other functions use the same polynomial value."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:258
msgid "For example, in Python, install the ``crcmod`` package and say:"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:260
msgid ">>> import crcmod\n"
">>> fun = crcmod.mkCrcFun('4812730177')\n"
">>> fun('string')\n"
"3304160206L"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:267
msgid "In Perl, install the ``Digest::CRC`` module and run the following code:"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:269
msgid "use Digest::CRC;\n"
"$d = Digest::CRC->new(width => 32, poly => 0x1EDC6F41, init => 0xFFFFFFFF, refin => 1, refout => 1);\n"
"$d->add('string');\n"
"print $d->digest;"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:276
msgid "(the expected output is 3304160206)."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:282
msgid "Initiates incremental crc32. See :ref:`incremental methods <digest-incremental_digests>` notes."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:289
msgid "Returns a number made with consistent hash."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:291
msgid "The guava function uses the `Consistent Hashing`_ algorithm of the Google guava library. The first parameter should be a hash code; the second parameter should be the number of buckets; the returned value will be an integer between 0 and the number of buckets. For example,"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:296
msgid "tarantool> digest.guava(10863919174838991, 11)\n"
"---\n"
"- 8\n"
"..."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:307
msgid "Returns 32-bit binary string = digest made with MurmurHash."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:313
msgid "Initiates incremental MurmurHash. See :ref:`incremental methods <digest-incremental_digests>` notes. For example:"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:317
msgid "murmur.new({seed=0})"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:325
msgid "Incremental methods in the ``digest`` module"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:327
msgid "Suppose that a digest is done for a string 'A', then a new part 'B' is appended to the string, then a new digest is required. The new digest could be recomputed for the whole string 'AB', but it is faster to take what was computed before for 'A' and apply changes based on the new part 'B'. This is called multi-step or \"incremental\" digesting, which Tarantool supports with crc32 and with murmur..."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:333
msgid "digest = require('digest')\n"
"\n"
"-- print crc32 of 'AB', with one step, then incrementally\n"
"print(digest.crc32('AB'))\n"
"c = digest.crc32.new()\n"
"c:update('A')\n"
"c:update('B')\n"
"print(c:result())\n"
"\n"
"-- print murmur hash of 'AB', with one step, then incrementally\n"
"print(digest.murmur('AB'))\n"
"m = digest.murmur.new()\n"
"m:update('A')\n"
"m:update('B')\n"
"print(m:result())"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:353
msgid "Example"
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:355
msgid "In the following example, the user creates two functions, ``password_insert()`` which inserts a SHA-1_ digest of the word \"**^S^e^c^ret Wordpass**\" into a tuple set, and ``password_check()`` which requires input of a password."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:359
msgid "tarantool> digest = require('digest')\n"
"---\n"
"...\n"
"tarantool> function password_insert()\n"
"         >   box.space.tester:insert{1234, digest.sha1('^S^e^c^ret Wordpass')}\n"
"         >   return 'OK'\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> function password_check(password)\n"
"         >   local t = box.space.tester:select{12345}\n"
"         >   if digest.sha1(password) == t[2] then\n"
"         >     return 'Password is valid'\n"
"         >   else\n"
"         >     return 'Password is not valid'\n"
"         >   end\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> password_insert()\n"
"---\n"
"- 'OK'\n"
"..."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:385
msgid "If a later user calls the ``password_check()`` function and enters the wrong password, the result is an error."
msgstr ""

#: ../doc/reference/reference_lua/digest.rst:388
msgid "tarantool> password_check('Secret Password')\n"
"---\n"
"- 'Password is not valid'\n"
"..."
msgstr ""

