# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-03 19:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../doc/reference/reference_lua/json.rst:5
msgid "Module `json`"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:9
msgid "Overview"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:11
msgid "The ``json`` module provides JSON manipulation routines. It is based on the `Lua-CJSON module by Mark Pulford <http://www.kyne.com.au/~mark/software/lua-cjson.php>`_. For a complete manual on Lua-CJSON please read `the official documentation <http://www.kyne.com.au/~mark/software/lua-cjson-manual.html>`_."
msgstr ""

#: ../doc/reference/reference_lua/json.rst:18
msgid "Index"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:20
msgid "Below is a list of all ``json`` functions and members."
msgstr ""

#: ../doc/reference/reference_lua/json.rst:28
msgid "Name"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:28
msgid "Use"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:30
msgid ":ref:`json.encode() <json-encode>`"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:30
msgid "Convert a Lua object to a JSON string"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:33
msgid ":ref:`json.decode() <json-decode>`"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:33
msgid "Convert a JSON string to a Lua object"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:36
msgid ":ref:`json.NULL <json-null>`"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:36
msgid "Analog of Lua's \"nil\""
msgstr ""

#: ../doc/reference/reference_lua/json.rst:39
msgid ":ref:`json.cfg() <json-module_cfg>`"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:39
msgid "Set global flags"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:49
msgid "Convert a Lua object to a JSON string."
msgstr ""

#: ../doc/reference/reference_lua/json.rst:0
#: ../doc/reference/reference_lua/json.rst:0
msgid "Parameters"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:51
msgid "either a scalar value or a Lua table value."
msgstr ""

#: ../doc/reference/reference_lua/json.rst:52
#: ../doc/reference/reference_lua/json.rst:91
msgid "see :ref:`json.cfg <json-module_cfg>`"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:0
#: ../doc/reference/reference_lua/json.rst:0
msgid "return"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:53
msgid "the original value reformatted as a JSON string."
msgstr ""

#: ../doc/reference/reference_lua/json.rst:0
#: ../doc/reference/reference_lua/json.rst:0
msgid "rtype"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:54
msgid "string"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:56
#: ../doc/reference/reference_lua/json.rst:95
#: ../doc/reference/reference_lua/json.rst:126
msgid "**Example:**"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:58
msgid "tarantool> json=require('json')\n"
"---\n"
"...\n"
"tarantool> json.encode(123)\n"
"---\n"
"- '123'\n"
"...\n"
"tarantool> json.encode({123})\n"
"---\n"
"- '[123]'\n"
"...\n"
"tarantool> json.encode({123, 234, 345})\n"
"---\n"
"- '[123,234,345]'\n"
"...\n"
"tarantool> json.encode({abc = 234, cde = 345})\n"
"---\n"
"- '{\"cde\":345,\"abc\":234}'\n"
"...\n"
"tarantool> json.encode({hello = {'world'}})\n"
"---\n"
"- '{\"hello\":[\"world\"]}'\n"
"..."
msgstr ""

#: ../doc/reference/reference_lua/json.rst:88
msgid "Convert a JSON string to a Lua object."
msgstr ""

#: ../doc/reference/reference_lua/json.rst:90
msgid "a string formatted as JSON."
msgstr ""

#: ../doc/reference/reference_lua/json.rst:92
msgid "the original contents formatted as a Lua table."
msgstr ""

#: ../doc/reference/reference_lua/json.rst:93
msgid "table"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:97
msgid "tarantool> json = require('json')\n"
"---\n"
"...\n"
"tarantool> json.decode('123')\n"
"---\n"
"- 123\n"
"...\n"
"tarantool> json.decode('[123, \"hello\"]')\n"
"---\n"
"- [123, 'hello']\n"
"...\n"
"tarantool> json.decode('{\"hello\": \"world\"}').hello\n"
"---\n"
"- world\n"
"..."
msgstr ""

#: ../doc/reference/reference_lua/json.rst:115
msgid "See the tutorial :ref:`Sum a JSON field for all tuples <c_lua_tutorial-sum_a_json_field>` to see how ``json.decode()`` can fit in an application."
msgstr ""

#: ../doc/reference/reference_lua/json.rst:123
msgid "A value comparable to Lua \"nil\" which may be useful as a placeholder in a tuple."
msgstr ""

#: ../doc/reference/reference_lua/json.rst:128
msgid "-- When nil is assigned to a Lua-table field, the field is null\n"
"tarantool> {nil, 'a', 'b'}\n"
"---\n"
"- - null\n"
"  - a\n"
"  - b\n"
"...\n"
"-- When json.NULL is assigned to a Lua-table field, the field is json.NULL\n"
"tarantool> {json.NULL, 'a', 'b'}\n"
"---\n"
"- - null\n"
"  - a\n"
"  - b\n"
"...\n"
"-- When json.NULL is assigned to a JSON field, the field is null\n"
"tarantool> json.encode({field2 = json.NULL, field1 = 'a', field3 = 'c'})\n"
"---\n"
"- '{\"field2\":null,\"field1\":\"a\",\"field3\":\"c\"}'\n"
"..."
msgstr ""

#: ../doc/reference/reference_lua/json.rst:150
msgid "The JSON output structure can be specified with ``__serialize``:"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:152
msgid "``__serialize=\"seq\"`` for an array"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:153
msgid "``__serialize=\"map\"`` for a map"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:155
msgid "Serializing 'A' and 'B' with different ``__serialize`` values causes different results:"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:158
msgid "tarantool> json.encode(setmetatable({'A', 'B'}, { __serialize=\"seq\"}))\n"
"---\n"
"- '[\"A\",\"B\"]'\n"
"...\n"
"tarantool> json.encode(setmetatable({'A', 'B'}, { __serialize=\"map\"}))\n"
"---\n"
"- '{\"1\":\"A\",\"2\":\"B\"}'\n"
"...\n"
"tarantool> json.encode({setmetatable({f1 = 'A', f2 = 'B'}, { __serialize=\"map\"})})\n"
"---\n"
"- '[{\"f2\":\"B\",\"f1\":\"A\"}]'\n"
"...\n"
"tarantool> json.encode({setmetatable({f1 = 'A', f2 = 'B'}, { __serialize=\"seq\"})})\n"
"---\n"
"- '[[]]'\n"
"..."
msgstr ""

#: ../doc/reference/reference_lua/json.rst:181
msgid "Set values affecting behavior of :ref:`json.encode <json-encode>` and :ref:`json.decode <json-decode>`."
msgstr ""

#: ../doc/reference/reference_lua/json.rst:184
msgid "The values are all either integers or boolean ``true``/``false`` values."
msgstr ""

#: ../doc/reference/reference_lua/json.rst:186
msgid "``cfg.encode_deep_as_nil`` (default is false) -- see :ref:`below <json-module.cfg_encode_deep_as_nil>`"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:187
msgid "``cfg.encode_invalid_as_nil`` (default is false) -- use ``null`` for all unrecognizable types"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:189
msgid "``cfg.encode_invalid_numbers`` (default is true) -- allow nan and inf"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:190
msgid "``cfg.encode_load_metatables`` (default is true) -- load metatables"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:191
msgid "``cfg.encode_max_depth`` (default is 32) -- maximum nesting depth in a structure"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:192
msgid "``cfg.encode_number_precision`` (default is 14) -- maximum post-decimal digits"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:193
msgid "``cfg.encode_sparse_convert`` (default is true) -- handle excessively sparse arrays as maps"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:194
msgid "``cfg.encode_sparse_ratio`` (default is 2) -- how sparse an array can be"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:195
msgid "``cfg.encode_sparse_safe`` (default is 10) -- how much can safely be sparse"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:196
msgid "``cfg.encode_use_tostring`` (default is false) -- use ``tostring`` for unrecognizable types"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:198
msgid "``cfg.decode_invalid_numbers`` (default is true) -- allow nan and inf"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:199
msgid "``cfg.decode_max_depth`` (default is 32) -- maximum nesting depth in a structure"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:200
msgid "``cfg.decode_save_metatables`` (default is true) -- like ``encode_load_metatables``"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:202
msgid "For example, the following code will encode 0/0 as nan (\"not a number\") and 1/0 as inf (\"infinity\"), rather than returning nil or an error message:"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:205
msgid "json = require('json')\n"
"json.cfg{encode_invalid_numbers = true}\n"
"x = 0/0\n"
"y = 1/0\n"
"json.encode({1, x, y, 2})"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:213
msgid "The result of the ``json.encode()`` request will look like this:"
msgstr ""

#: ../doc/reference/reference_lua/json.rst:215
msgid "tarantool> json.encode({1, x, y, 2})\n"
"---\n"
"- '[1,nan,inf,2]\n"
"..."
msgstr ""

#: ../doc/reference/reference_lua/json.rst:222
msgid "To achieve the same effect for only one call to ``json.encode()`` without changing the configuration persistently, one could say ``json.encode({1, x, y, 2}, {encode_invalid_numbers = true})``."
msgstr ""

#: ../doc/reference/reference_lua/json.rst:226
msgid "The same configuration settings exist for json, for :ref:`MsgPack <msgpack-module>`, and for :ref:`YAML <yaml-module>`."
msgstr ""

#: ../doc/reference/reference_lua/json.rst:233
msgid "**Behavior change:** Before Tarantool version 1.10.4, if a nested structure was deeper than ``cfg.encode_max_depth``, the deeper levels were cropped (encoded as nil)."
msgstr ""

#: ../doc/reference/reference_lua/json.rst:237
msgid "Now, the result is an error suggesting that ``cfg.encode_max_depth`` is not deep enough. To return to the old behavior, say ``cfg.encode_deep_as_nil = true``."
msgstr ""

#: ../doc/reference/reference_lua/json.rst:241
msgid "This option is ignored for ``YAML``."
msgstr ""

