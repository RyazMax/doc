# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-03 19:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../doc/reference/reference_lua/http.rst:5
msgid "Module `http`"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:11
msgid "Overview"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:13
msgid "The ``http`` module, specifically the ``http.client`` submodule, provides the functionality of an HTTP client with support for HTTPS and keepalive. It uses routines in the `libcurl <https://curl.haxx.se/libcurl/>`_ library."
msgstr ""

#: ../doc/reference/reference_lua/http.rst:19
msgid "Index"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:21
msgid "Below is a list of all ``http`` functions."
msgstr ""

#: ../doc/reference/reference_lua/http.rst:29
msgid "Name"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:29
msgid "Use"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:31
msgid ":ref:`http.client.new() <http-new>`"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:31
msgid "Create an HTTP client instance"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:34
msgid ":ref:`client_object:request() <client_object-request>`"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:34
msgid "Perform an HTTP request"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:37
msgid ":ref:`client_object:stat() <client_object-stat>`"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:37
msgid "Get a table with statistics"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:45
msgid "Construct a new HTTP client instance."
msgstr ""

#: ../doc/reference/reference_lua/http.rst:0
#: ../doc/reference/reference_lua/http.rst:0
msgid "Parameters"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:47
msgid "integer settings which are passed to ``libcurl``."
msgstr ""

#: ../doc/reference/reference_lua/http.rst:49
msgid "The two possible options are ``max_connections`` and ``max_total_connections``."
msgstr ""

#: ../doc/reference/reference_lua/http.rst:51
msgid "``max_connections`` is the maximum number of entries in the cache. It affects ``libcurl``'s `CURLMOPT_MAXCONNECTS <https://curl.haxx.se/libcurl/c/CURLMOPT_MAXCONNECTS.html>`_. The default is -1."
msgstr ""

#: ../doc/reference/reference_lua/http.rst:55
msgid "``max_total_connections`` is the maximum number of active connections. It affects ``libcurl``'s  `CURLMOPT_MAX_TOTAL_CONNECTIONS <https://curl.haxx.se/libcurl/c/CURLMOPT_MAX_TOTAL_CONNECTIONS.html>`_. It is ignored if the ``curl`` version is less than 7.30. The default is 0, which allows ``libcurl`` to scale according to easy handles count."
msgstr ""

#: ../doc/reference/reference_lua/http.rst:60
msgid "The default option values are usually good enough but in rare cases it might be good to set them. In that case here are two tips."
msgstr ""

#: ../doc/reference/reference_lua/http.rst:63
msgid "1. You may want to control the maximum number of sockets that a particular http client uses simultaneously. If a system passes many requests to distinct hosts, then ``libcurl`` cannot reuse sockets. In this case setting ``max_total_connections`` may be useful, since it causes ``curl`` to avoid creating too many sockets which would not be used anyway."
msgstr ""

#: ../doc/reference/reference_lua/http.rst:68
msgid "2. Do not set ``max_connections`` less than ``max_total_connections`` unless you are confident about your actions. When ``max_connections`` is less then ``max_total_connections``, in some cases ``libcurl`` will not reuse sockets for requests that are going to the same host. If the limit is reached and a new request occurs, then ``libcurl`` will first create a new socket, send the request, wait for the first connection to be free, and close it, in order to avoid exceeding the ``max_connections`` cache size. In the worst case, ``libcurl`` will create a new socket for every request, even if all requests are going to the same host. See `this Tarantool issue on github <https://github.com/tarantool/tarantool/issues/3945>`_ for details."
msgstr ""

#: ../doc/reference/reference_lua/http.rst:0
#: ../doc/reference/reference_lua/http.rst:0
msgid "return"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:80
msgid "a new HTTP client instance"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:0
#: ../doc/reference/reference_lua/http.rst:0
msgid "rtype"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:81
msgid "userdata"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:83
msgid "**Example:**"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:85
msgid "tarantool> http_client = require('http.client').new({max_connections = 5})\n"
"---\n"
"..."
msgstr ""

#: ../doc/reference/reference_lua/http.rst:97
msgid "If ``http_client`` is an HTTP client instance, ``http_client:request()`` will perform an HTTP request and, if there is a successful connection, will return a table with connection information."
msgstr ""

#: ../doc/reference/reference_lua/http.rst:101
msgid "HTTP method, for example 'GET' or 'POST' or 'PUT'"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:102
msgid "location, for example 'https://tarantool.org/doc'"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:103
msgid "optional initial message, for example 'My text string!'"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:104
msgid "table of connection options, with any of these components:   * ``timeout`` - number of seconds to wait for a ``curl`` API read request    before timing out  * ``ca_path`` - path to a directory holding one or more certificates to    verify the peer with  * ``ca_file`` - path to an SSL certificate file to verify the peer with  * ``verify_host`` - set on/off verification of the certificate's name    (CN) against host. See also    `CURLOPT_SSL_VERIFYHOST <https://curl.haxx.se/libcurl/c/CURLOPT_SSL_VERIFYHOST.html>`_  * ``verify_peer`` - set on/off verification of the peer's SSL    certificate. See also    `CURLOPT_SSL_VERIFYPEER <https://curl.haxx.se/libcurl/c/CURLOPT_SSL_VERIFYPEER.html>`_  * ``ssl_key`` - path to a private key file for a TLS and SSL client    certificate. See also    `CURLOPT_SSLKEY <https://curl.haxx.se/libcurl/c/CURLOPT_SSLKEY.html>`_  * ``ssl_cert`` - path to a SSL client certificate file. See also    `CURLOPT_SSLCERT <https://curl.haxx.se/libcurl/c/CURLOPT_SSLCERT.html>`_  * ``headers`` - table of HTTP headers  * ``keepalive_idle`` - delay, in seconds, that the operating system    will wait while the connection is idle before sending keepalive    probes. See also    `CURLOPT_TCP_KEEPIDLE <https://curl.haxx.se/libcurl/c/CURLOPT_TCP_KEEPIDLE.html>`_    and the note below about keepalive_interval.  * ``keepalive_interval`` - the interval, in seconds, that the operating    system will wait between sending keepalive probes. See also    `CURLOPT_TCP_KEEPINTVL <https://curl.haxx.se/libcurl/c/CURLOPT_TCP_KEEPINTVL.html>`_.    If both keepalive_idle and keepalive_interval are set, then    Tarantool will also set HTTP keepalive headers: Connection:Keep-Alive    and Keep-Alive:timeout=<keepalive_idle>.    Otherwise Tarantool will send Connection:close  * ``low_speed_time`` - set the \"low speed time\" -- the time that the    transfer speed should be below the \"low speed limit\" for the library    to consider it too slow and abort. See also    `CURLOPT_LOW_SPEED_TIME <https://curl.haxx.se/libcurl/c/CURLOPT_LOW_SPEED_TIME.html>`_  * ``low_speed_limit`` - set the \"low speed limit\" -- the average    transfer speed in bytes per second that the transfer should be below    during \"low speed time\" seconds for the library to consider it to be    too slow and abort. See also    `CURLOPT_LOW_SPEED_LIMIT <https://curl.haxx.se/libcurl/c/CURLOPT_LOW_SPEED_LIMIT.html>`_  * ``verbose`` - set on/off verbose mode  * ``unix_socket`` - a socket name to use instead of an Internet address,    for a local connection. The Tarantool server must be built with    ``libcurl`` 7.40 or later. See the :ref:`second example <http-example2>`    later in this section.  * ``max_header_name_len`` - the maximal length of a header name. If a header    name is bigger than this value, it is truncated to this length.    The default value is '32'."
msgstr ""

#: ../doc/reference/reference_lua/http.rst:104
msgid "table of connection options, with any of these components:"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:107
msgid "``timeout`` - number of seconds to wait for a ``curl`` API read request before timing out"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:109
msgid "``ca_path`` - path to a directory holding one or more certificates to verify the peer with"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:111
msgid "``ca_file`` - path to an SSL certificate file to verify the peer with"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:112
msgid "``verify_host`` - set on/off verification of the certificate's name (CN) against host. See also `CURLOPT_SSL_VERIFYHOST <https://curl.haxx.se/libcurl/c/CURLOPT_SSL_VERIFYHOST.html>`_"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:115
msgid "``verify_peer`` - set on/off verification of the peer's SSL certificate. See also `CURLOPT_SSL_VERIFYPEER <https://curl.haxx.se/libcurl/c/CURLOPT_SSL_VERIFYPEER.html>`_"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:118
msgid "``ssl_key`` - path to a private key file for a TLS and SSL client certificate. See also `CURLOPT_SSLKEY <https://curl.haxx.se/libcurl/c/CURLOPT_SSLKEY.html>`_"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:121
msgid "``ssl_cert`` - path to a SSL client certificate file. See also `CURLOPT_SSLCERT <https://curl.haxx.se/libcurl/c/CURLOPT_SSLCERT.html>`_"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:123
msgid "``headers`` - table of HTTP headers"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:124
msgid "``keepalive_idle`` - delay, in seconds, that the operating system will wait while the connection is idle before sending keepalive probes. See also `CURLOPT_TCP_KEEPIDLE <https://curl.haxx.se/libcurl/c/CURLOPT_TCP_KEEPIDLE.html>`_ and the note below about keepalive_interval."
msgstr ""

#: ../doc/reference/reference_lua/http.rst:129
msgid "``keepalive_interval`` - the interval, in seconds, that the operating system will wait between sending keepalive probes. See also `CURLOPT_TCP_KEEPINTVL <https://curl.haxx.se/libcurl/c/CURLOPT_TCP_KEEPINTVL.html>`_. If both keepalive_idle and keepalive_interval are set, then Tarantool will also set HTTP keepalive headers: Connection:Keep-Alive and Keep-Alive:timeout=<keepalive_idle>. Otherwise Tarantool will send Connection:close"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:136
msgid "``low_speed_time`` - set the \"low speed time\" -- the time that the transfer speed should be below the \"low speed limit\" for the library to consider it too slow and abort. See also `CURLOPT_LOW_SPEED_TIME <https://curl.haxx.se/libcurl/c/CURLOPT_LOW_SPEED_TIME.html>`_"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:140
msgid "``low_speed_limit`` - set the \"low speed limit\" -- the average transfer speed in bytes per second that the transfer should be below during \"low speed time\" seconds for the library to consider it to be too slow and abort. See also `CURLOPT_LOW_SPEED_LIMIT <https://curl.haxx.se/libcurl/c/CURLOPT_LOW_SPEED_LIMIT.html>`_"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:145
msgid "``verbose`` - set on/off verbose mode"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:146
msgid "``unix_socket`` - a socket name to use instead of an Internet address, for a local connection. The Tarantool server must be built with ``libcurl`` 7.40 or later. See the :ref:`second example <http-example2>` later in this section."
msgstr ""

#: ../doc/reference/reference_lua/http.rst:150
msgid "``max_header_name_len`` - the maximal length of a header name. If a header name is bigger than this value, it is truncated to this length. The default value is '32'."
msgstr ""

#: ../doc/reference/reference_lua/http.rst:154
msgid "response information, with all of these components:"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:156
msgid "``status`` - HTTP response status"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:157
msgid "``reason`` - HTTP response status text"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:158
msgid "``headers`` - a Lua table with normalized HTTP headers"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:159
msgid "``body`` - response body"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:160
msgid "``proto`` - protocol version"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:161
msgid "``cookies`` - a Lua table with response cookies and their options"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:163
msgid "table"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:165
msgid "The ``cookies`` component contains a Lua table where the key is a cookie name. The value is an array of two elements where the first one is the cookie value and the second one is an array with the cookie’s options. Possible options are: \"Expires\", \"Max-Age\", \"Domain\", \"Path\", \"Secure\", \"HttpOnly\", \"SameSite\". Note that an option is a string with '=' splitting the option's name and its value. `Here <https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies>`_ you can find more info."
msgstr ""

#: ../doc/reference/reference_lua/http.rst:174
msgid "**Example**"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:176
msgid "You can use cookies information like this:"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:178
msgid "tarantool> require('http.client').get('https://www.tarantool.io/en/').cookies\n"
"---\n"
"- csrftoken:\n"
"  - bWJVkBybvX9LdJ8uLPOTVrit5P3VbRjE3potYVOuUnsSjYT5ahghDV06tXRkfnOl\n"
"  - - Max-Age=31449600\n"
"    - Path=/\n"
"...\n"
"\n"
"tarantool> cookies = require('http.client').get('https://www.tarantool.io/en/').cookies\n"
"---\n"
"...\n"
"\n"
"tarantool> options = cookies['csrftoken'][2]\n"
"---\n"
"...\n"
"\n"
"tarantool> for _, option in ipairs(options) do\n"
"         > if option:startswith('csrftoken cookie's Max-Age = ') then\n"
"         > print(option)\n"
"         > end\n"
"         > end\n"
"\n"
"csrftoken cookie's Max-Age = 31449600\n"
"---\n"
"...\n"
"\n"
"tarantool>"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:208
msgid "The following \"shortcuts\" exist for requests:"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:210
msgid "``http_client:get(url, options)`` - shortcut for ``http_client:request(\"GET\", url, nil, opts)``"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:212
msgid "``http_client:post (url, body, options)`` - shortcut for ``http_client:request(\"POST\", url, body, opts)``"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:214
msgid "``http_client:put(url, body, options)`` - shortcut for ``http_client:request(\"PUT\", url, body, opts)``"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:216
msgid "``http_client:patch(url, body, options)`` - shortcut for ``http_client:request(\"PATCH\", url, body, opts)``"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:218
msgid "``http_client:options(url, options)`` - shortcut for ``http_client:request(\"OPTIONS\", url, nil, opts)``"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:220
msgid "``http_client:head(url, options)`` - shortcut for ``http_client:request(\"HEAD\", url, nil, opts)``"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:222
msgid "``http_client:delete(url, options)`` - shortcut for ``http_client:request(\"DELETE\", url, nil, opts)``"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:224
msgid "``http_client:trace(url, options)`` - shortcut for ``http_client:request(\"TRACE\", url, nil, opts)``"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:226
msgid "``http_client:connect:(url, options)`` - shortcut for ``http_client:request(\"CONNECT\", url, nil, opts)``"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:229
msgid "Requests may be influenced by environment variables, for example users can set up an http proxy by setting :samp:`HTTP_PROXY={proxy}` before initiating any requests. See the web page document `Environment variables libcurl understands <https://curl.haxx.se/libcurl/c/libcurl-env.html>`_."
msgstr ""

#: ../doc/reference/reference_lua/http.rst:239
msgid "The ``http_client:stat()`` function returns a table with statistics:"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:241
msgid "``active_requests`` - number of currently executing requests"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:242
msgid "``sockets_added`` - total number of sockets added into an event loop"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:243
msgid "``sockets_deleted`` - total number of sockets sockets from an event loop"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:244
msgid "``total_requests`` - total number of requests"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:245
msgid "``http_200_responses`` - total number of requests which have returned code HTTP 200"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:247
msgid "``http_other_responses`` - total number of requests which have not returned code HTTP 200"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:249
msgid "``failed_requests`` - total number of requests which have failed including system errors, ``curl`` errors, and HTTP errors"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:254
msgid "**Example 1:**"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:256
msgid "Connect to an HTTP server, look at the size of the response for a 'GET' request, and look at the statistics for the session."
msgstr ""

#: ../doc/reference/reference_lua/http.rst:259
msgid "tarantool> http_client = require('http.client').new()\n"
"---\n"
"...\n"
"tarantool> r = http_client:request('GET','http://tarantool.org')\n"
"---\n"
"...\n"
"tarantool> string.len(r.body)\n"
"---\n"
"- 21725\n"
"...\n"
"tarantool> http_client:stat()\n"
"---\n"
"- total_requests: 1\n"
"  sockets_deleted: 2\n"
"  failed_requests: 0\n"
"  active_requests: 0\n"
"  http_other_responses: 0\n"
"  http_200_responses: 1\n"
"  sockets_added: 2"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:283
msgid "**Example 2:**"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:285
msgid "Start two Tarantool instances on the same computer."
msgstr ""

#: ../doc/reference/reference_lua/http.rst:287
msgid "On the first Tarantool instance, listen on a Unix socket:"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:289
msgid "box.cfg{listen='/tmp/unix_domain_socket.sock'}"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:293
msgid "On the second Tarantool instance, send via ``http_client``:"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:295
msgid "box.cfg{}\n"
"http_client = require('http.client').new({5})\n"
"http_client:put('http://localhost/','body',{unix_socket = '/tmp/unix_domain_socket.sock'})"
msgstr ""

#: ../doc/reference/reference_lua/http.rst:301
msgid "Terminal #1 will show an error message: \"Invalid MsgPack\". This is not useful but demonstrates the syntax and demonstrates that was sent was received."
msgstr ""

