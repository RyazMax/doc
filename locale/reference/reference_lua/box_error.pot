# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-03 19:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../doc/reference/reference_lua/box_error.rst:3
msgid "Submodule `box.error`"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:9
msgid "Overview"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:11
msgid "The ``box.error`` function is for raising an error. The difference between this function and Lua's built-in `error <https://www.lua.org/pil/8.3.html>`_ function is that when the error reaches the client, its error code is preserved. In contrast, a Lua error would always be presented to the client as ``ER_PROC_LUA``."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:19
msgid "Index"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:21
msgid "Below is a list of all ``box.error`` functions."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:29
msgid "Name"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:29
msgid "Use"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:31
msgid ":ref:`box.error() <box_error-error>`"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:31
msgid "Throw an error"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:34
msgid ":ref:`box.error.last() <box_error-last>`"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:34
msgid "Get a description of the last error"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:37
msgid ":ref:`box.error.clear() <box_error-clear>`"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:37
msgid "Clear the record of errors"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:40
msgid ":ref:`box.error.new() <box_error-new>`"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:40
msgid "Create an error but do not throw"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:44
msgid "``box.error`` throws an object that has the cdata type and contain the following fields:"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:47
msgid "\"type\" (string) error's C++ class,"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:48
msgid "\"code\" (number) error's number,"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:49
msgid "\"message\" (string) error's message,"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:50
msgid "\"file\" (string) Tarantool source file,"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:51
msgid "\"line\" (number) line number in the Tarantool source file,"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:52
msgid "\"errno\" (number) C standard error number; this field is added only if the error is a system error (for example, due to a failure in a socket or file i/o)."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:57
msgid "When called with a Lua-table argument, the code and reason have any user-desired values. The result will be those values."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:0
#: ../doc/reference/reference_lua/box_error.rst:0
#: ../doc/reference/reference_lua/box_error.rst:0
msgid "Parameters"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:60
msgid "description of an error, defined by user"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:61
msgid "numeric code for this error, defined by user"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:65
msgid "When called without arguments, ``box.error()`` re-throws whatever the last error was."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:72
msgid "Emulate a request error, with text based on one of the pre-defined Tarantool errors defined in the file `errcode.h <https://github.com/tarantool/tarantool/blob/1.10/src/box/errcode.h>`_ in the source tree. Lua constants which correspond to those Tarantool errors are defined as members of ``box.error``, for example ``box.error.NO_SUCH_USER == 45``."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:78
#: ../doc/reference/reference_lua/box_error.rst:176
msgid "number of a pre-defined error"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:79
#: ../doc/reference/reference_lua/box_error.rst:177
msgid "part of the message which will accompany the error"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:81
msgid "For example:"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:83
msgid "the ``NO_SUCH_USER`` message is \"``User '%s' is not found``\" -- it includes one \"``%s``\" component which will be replaced with errtext. Thus a call to ``box.error(box.error.NO_SUCH_USER, 'joe')`` or ``box.error(45, 'joe')`` will result in an error with the accompanying message \"``User 'joe' is not found``\"."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:0
msgid "except"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:89
msgid "whatever is specified in errcode-number."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:91
#: ../doc/reference/reference_lua/box_error.rst:147
#: ../doc/reference/reference_lua/box_error.rst:179
msgid "**Example:**"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:93
msgid "tarantool> box.error{code = 555, reason = 'Arbitrary message'}\n"
"---\n"
"- error: Arbitrary message\n"
"...\n"
"tarantool> box.error()\n"
"---\n"
"- error: Arbitrary message\n"
"...\n"
"tarantool> box.error(box.error.FUNCTION_ACCESS_DENIED, 'A', 'B', 'C')\n"
"---\n"
"- error: A access denied for user 'B' to function 'C'\n"
"..."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:112
msgid "Show the last error object."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:114
msgid "**Example**"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:116
msgid "You can reach the last error object's fields like this:"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:118
msgid "tarantool> box.schema.space.create('')\n"
"---\n"
"- error: Invalid identifier '' (expected printable symbols only or it is too long)\n"
"...\n"
"tarantool> box.error.last()\n"
"---\n"
"- Invalid identifier '' (expected printable symbols only or it is too long)\n"
"...\n"
"tarantool> box.error.last().code\n"
"---\n"
"- 70\n"
"...\n"
"tarantool> box.error.last().type\n"
"---\n"
"- ClientError\n"
"..."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:0
msgid "return"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:137
msgid "the last error object"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:0
msgid "rtype"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:138
msgid "cdata"
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:144
msgid "Clear the record of errors, so functions like ``box.error()`` or ``box.error.last()`` will have no effect."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:149
msgid "tarantool> box.schema.space.create('')\n"
"---\n"
"- error: Invalid identifier '' (expected printable symbols only or it is too long)\n"
"...\n"
"tarantool> box.error.last()\n"
"---\n"
"- Invalid identifier '' (expected printable symbols only or it is too long)\n"
"...\n"
"tarantool> box.error.clear()\n"
"---\n"
"...\n"
"tarantool> box.error.last()\n"
"---\n"
"- null\n"
"..."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:171
msgid "Create an error object, but do not throw. This is useful when error information should be saved for later retrieval. The parameters are the same as for :ref:`box.error() <box_error-error>`, see the description there."
msgstr ""

#: ../doc/reference/reference_lua/box_error.rst:181
msgid "tarantool> e = box.error.new{code = 555, reason = 'Arbitrary message'}\n"
"---\n"
"...\n"
"tarantool> e:unpack()\n"
"---\n"
"- type: ClientError\n"
"  code: 555\n"
"  message: Arbitrary message\n"
"  trace:\n"
"  - file: '[string \"e = box.error.new{code = 555, reason = ''Arbit...\"]'\n"
"    line: 1\n"
"..."
msgstr ""

