# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 2.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-04 10:02+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../doc/book/box/triggers.rst:6
msgid "Triggers"
msgstr ""

#: ../doc/book/box/triggers.rst:8
msgid ""
"**Triggers**, also known as **callbacks**, are functions which the server"
" executes when certain events happen."
msgstr ""

#: ../doc/book/box/triggers.rst:11
msgid "There are six types of triggers in Tarantool:"
msgstr ""

#: ../doc/book/box/triggers.rst:13 ../doc/book/box/triggers.rst:33
msgid ""
":ref:`box.session.on_connect() <box_session-on_connect>` or "
":ref:`box.session.on_disconnect() <box_session-on_disconnect>`,"
msgstr ""

#: ../doc/book/box/triggers.rst:15 ../doc/book/box/triggers.rst:35
msgid ":ref:`box.session.on_auth() <box_session-on_auth>`,"
msgstr ""

#: ../doc/book/box/triggers.rst:16 ../doc/book/box/triggers.rst:39
msgid ""
":ref:`space_object:on_replace() <box_space-on_replace>` or "
":ref:`space_object:before_replace() <box_space-before_replace>`,"
msgstr ""

#: ../doc/book/box/triggers.rst:18 ../doc/book/box/triggers.rst:41
msgid ""
":ref:`box.on_commit() <box-on_commit>` or :ref:`box.on_rollback() <box-"
"on_rollback>`,"
msgstr ""

#: ../doc/book/box/triggers.rst:20 ../doc/book/box/triggers.rst:36
msgid ""
":ref:`net.box.on_connect() <net_box-on_connect>` or "
":ref:`net.box.on_disconnect() <net_box-on_disconnect>`,"
msgstr ""

#: ../doc/book/box/triggers.rst:22 ../doc/book/box/triggers.rst:38
msgid ":ref:`net.box.on_schema_reload() <net_box-on_schema_reload>`,"
msgstr ""

#: ../doc/book/box/triggers.rst:23 ../doc/book/box/triggers.rst:43
msgid ""
":ref:`box.ctl.on_schema_init() <box_ctl-on_schema_init>` or "
":ref:`box.ctl.on_shutdown() <box_ctl-on_shutdown>`,"
msgstr ""

#: ../doc/book/box/triggers.rst:25 ../doc/book/box/triggers.rst:45
msgid ":ref:`swim_object:on_member_event() <swim-on_member_event>`."
msgstr ""

#: ../doc/book/box/triggers.rst:27
msgid "All triggers have the following characteristics:"
msgstr ""

#: ../doc/book/box/triggers.rst:29
msgid ""
"Triggers associate a function with an event. The request to \"define a "
"trigger\" implies passing the trigger's function to one of the "
"\"on_event()\" functions:"
msgstr ""

#: ../doc/book/box/triggers.rst:47
msgid ""
"Triggers are defined only by the :ref:`'admin' user <authentication-"
"owners_privileges>`."
msgstr ""

#: ../doc/book/box/triggers.rst:49
msgid ""
"Triggers are stored in the Tarantool instance's memory, not in the "
"database. Therefore triggers disappear when the instance is shut down. To"
" make them permanent, put function definitions and trigger settings into "
"Tarantool's :ref:`initialization script <index-init_label>`."
msgstr ""

#: ../doc/book/box/triggers.rst:54
msgid ""
"Triggers have low overhead. If a trigger is not defined, then the "
"overhead is minimal: merely a pointer dereference and check. If a trigger"
" is defined, then its overhead is equivalent to the overhead of calling a"
" function."
msgstr ""

#: ../doc/book/box/triggers.rst:58
msgid ""
"There can be multiple triggers for one event. In this case, triggers are "
"executed in the reverse order that they were defined in. (Exception: "
"member triggers are executed in the order that they appear in the member "
"list.)"
msgstr ""

#: ../doc/book/box/triggers.rst:62
msgid ""
"Triggers must work within the event context. However, effects are "
"undefined if a function contains requests which normally could not occur "
"immediately after the event, but only before the return from the event. "
"For example, putting `os.exit() "
"<http://www.lua.org/manual/5.1/manual.html#pdf-os.exit>`_ or "
":ref:`box.rollback() <box-rollback>` in a trigger function would be "
"bringing in requests outside the event context."
msgstr ""

#: ../doc/book/box/triggers.rst:69
msgid ""
"Triggers are replaceable. The request to \"redefine a trigger\" implies "
"passing a new trigger function and an old trigger function to one of the "
"\"on_event()\" functions."
msgstr ""

#: ../doc/book/box/triggers.rst:73
msgid ""
"The \"on_event()\" functions all have parameters which are function "
"pointers, and they all return function pointers. Remember that a Lua "
"function definition such as \"function f() x = x + 1 end\" is the same as"
" \"f = function () x = x + 1 end\" -- in both cases ``f`` gets a function"
" pointer. And \"trigger = box.session.on_connect(f)\" is the same as "
"\"trigger = box.session.on_connect(function () x = x + 1 end)\" -- in "
"both cases ``trigger`` gets the function pointer which was passed."
msgstr ""

#: ../doc/book/box/triggers.rst:81
msgid ""
"You can call any \"on_event()\" function with no arguments to get a list "
"of its triggers. For example, use ``box.session.on_connect()`` to return "
"a table of all connect-trigger functions."
msgstr ""

#: ../doc/book/box/triggers.rst:85
msgid "**Example**"
msgstr ""

#: ../doc/book/box/triggers.rst:87
msgid "Here we log connect and disconnect events into Tarantool server log."
msgstr ""

#: ../doc/book/box/triggers.rst:89
msgid ""
"log = require('log')\n"
"\n"
"function on_connect_impl()\n"
"  log.info(\"connected \"..box.session.peer()..\", sid "
"\"..box.session.id())\n"
"end\n"
"\n"
"function on_disconnect_impl()\n"
"  log.info(\"disconnected, sid \"..box.session.id())\n"
"end\n"
"\n"
"function on_auth_impl(user)\n"
"  log.info(\"authenticated sid \"..box.session.id()..\" as \"..user)\n"
"end\"\n"
"\n"
"function on_connect() pcall(on_connect_impl) end\n"
"function on_disconnect() pcall(on_disconnect_impl) end\n"
"function on_auth(user) pcall(on_auth_impl, user) end\n"
"\n"
"box.session.on_connect(on_connect)\n"
"box.session.on_disconnect(on_disconnect)\n"
"box.session.on_auth(on_auth)"
msgstr ""

