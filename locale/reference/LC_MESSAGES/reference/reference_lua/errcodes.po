# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 2.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-04 10:02+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../doc/reference/reference_lua/errcodes.rst:5
msgid "Database error codes"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:7
msgid ""
"In the current version of the binary protocol, error messages, which are "
"normally more descriptive than error codes, are not present in server "
"responses. The actual message may contain a file name, a detailed reason "
"or operating system error code. All such messages, however, are logged in"
" the error log. Below are general descriptions of some popular codes. A "
"complete list of errors can be found in file `errcode.h`_ in the source "
"tree."
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:18
msgid "**List of error codes**"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:26
msgid "ER_NONMASTER"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:26
msgid ""
"(In replication) A server instance cannot modify data unless it is a "
"master."
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:29
msgid "ER_ILLEGAL_PARAMS"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:29
msgid "Illegal parameters. Malformed protocol message."
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:32
msgid "ER_MEMORY_ISSUE"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:32
msgid ""
"Out of memory: :ref:`memtx_memory <cfg_storage-memtx_memory>` limit has "
"been reached."
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:36
msgid "ER_WAL_IO"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:36
msgid ""
"Failed to write to disk. May mean: failed to record a change in the "
"write-ahead log. Some sort of disk error."
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:40
msgid "ER_KEY_PART_COUNT"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:40
msgid "Key part count is not the same as index part count"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:43
msgid "ER_NO_SUCH_SPACE"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:43
msgid "The specified space does not exist."
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:46
msgid "ER_NO_SUCH_INDEX"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:46
msgid "The specified index in the specified space does not exist."
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:49
msgid "ER_PROC_LUA"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:49
msgid "An error occurred inside a Lua procedure."
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:52
msgid "ER_FIBER_STACK"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:52
msgid ""
"The recursion limit was reached when creating a new fiber. This usually "
"indicates that a stored procedure is recursively invoking itself too "
"often."
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:57
msgid "ER_UPDATE_FIELD"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:57
msgid "An error occurred during update of a field."
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:60
msgid "ER_TUPLE_FOUND"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:60
msgid "A duplicate key exists in a unique index."
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:68
msgid "Handling errors"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:70
msgid ""
"Here are some procedures that can make Lua functions more robust when "
"there are errors, particularly database errors."
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:73
msgid "Invoke with pcall."
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst
msgid ""
"Take advantage of Lua's mechanisms for `\"Error handling and exceptions\""
" <http://www.lua.org/pil/8.4.html>`_, particularly ``pcall``. That is, "
"instead of simply invoking with"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst
msgid ":samp:`box.space.{space-name}:{function-name}()`"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst
msgid "say"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst
msgid ""
":samp:`if pcall(box.space.{space-name}.{function-name}, box.space.{space-"
"name}) ...`"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst
msgid ""
"For some Tarantool box functions, pcall also returns error details "
"including a file-name and line-number within Tarantool's source code. "
"This can be seen by unpacking. For example:"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst
msgid "``x, y = pcall(function() box.schema.space.create('') end)``"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst
msgid "``y:unpack()``"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:88
msgid ""
"See the tutorial :ref:`Sum a JSON field for all tuples <c_lua_tutorial-"
"sum_a_json_field>` to see how pcall can fit in an application."
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:91
msgid "Examine and raise with box.error."
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:93
msgid ""
"To make a new error and pass it on, the box.error module provides "
":ref:`box.error(code, errtext [, errtext ...]) <box_error-error>`."
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:96
msgid ""
"To find the last error, the box.error module provides "
":ref:`box.error.last() <box_error-last>`. (There is also a way to find "
"the text of the last operating-system error for certain functions -- "
":ref:`errno.strerror([code]) <errno-strerror>`.)"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:101
msgid "Log."
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:103
msgid "Put messages in a log using the :ref:`log module <log-module>`."
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:105
msgid ""
"And filter messages that are automatically generated, with the :ref:`log "
"<cfg_logging-log>` configuration parameter."
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:109
msgid ""
"Generally, for Tarantool built-in functions which are designed to return "
"objects: the result will be an object, or nil, or `a Lua error "
"<https://www.lua.org/pil/8.3.html>`_. For example consider the "
":ref:`fio_read.lua <cookbook-fio_read>` program in our cookbook:"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:113
msgid ""
"#!/usr/bin/env tarantool\n"
"\n"
"local fio = require('fio')\n"
"local errno = require('errno')\n"
"local f = fio.open('/tmp/xxxx.txt', {'O_RDONLY' })\n"
"if not f then\n"
"    error(\"Failed to open file: \"..errno.strerror())\n"
"end\n"
"local data = f:read(4096)\n"
"f:close()\n"
"print(data)"
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:127
msgid ""
"After a function call that might fail, like fio.open() above, it is "
"common to see syntax like ``if not f then ...`` or ``if f == nil then "
"...``, which check for common failures. But if there had been a syntax "
"error, for example fio.opex instead of fio.open, then there would have "
"been a Lua error and f would not have been changed. If checking for such "
"an obvious error had been a concern, the programmer would probably have "
"used pcall()."
msgstr ""

#: ../doc/reference/reference_lua/errcodes.rst:137
msgid ""
"All functions in Tarantool modules should work this way, unless the "
"manual explicitly says otherwise."
msgstr ""

